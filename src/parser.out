Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_NOT
    BR
    CASE
    DEFAULT
    DOUBLE_QUOTES
    MAKE
    SINGLE_QUOTES
    SWITCH

Grammar

Rule 0     S' -> SourceFile
Rule 1     lcurly -> LCURLY
Rule 2     rcurly -> RCURLY
Rule 3     Type -> TypeName
Rule 4     Type -> TypeLit
Rule 5     TypeName -> ID
Rule 6     TypeName -> DATA_TYPE
Rule 7     TypeLit -> ArrayType
Rule 8     TypeLit -> StructType
Rule 9     TypeLit -> PointerType
Rule 10    TypeLit -> SliceType
Rule 11    ArrayType -> LSQUARE ArrayLength RSQUARE ElementType
Rule 12    ArrayLength -> Expression
Rule 13    SliceType -> LSQUARE RSQUARE ElementType
Rule 14    ElementType -> Type
Rule 15    PointerType -> STAR BaseType
Rule 16    BaseType -> Type
Rule 17    StructType -> STRUCT lcurly FieldDeclList rcurly
Rule 18    FieldDeclList -> FieldDeclList FieldDecl SEMICOLON
Rule 19    FieldDeclList -> FieldDecl SEMICOLON
Rule 20    FieldDecl -> IdentifierList Type
Rule 21    Block -> lcurly StatementList rcurly
Rule 22    Block -> lcurly rcurly
Rule 23    StatementList -> StatementList Statement SEMICOLON
Rule 24    StatementList -> Statement SEMICOLON
Rule 25    Declaration -> ConstDecl SEMICOLON
Rule 26    Declaration -> TypeDecl SEMICOLON
Rule 27    Declaration -> VarDecl SEMICOLON
Rule 28    TopLevelDecl -> Declaration
Rule 29    TopLevelDecl -> FunctionDecl
Rule 30    TopLevelDecl -> MethodDecl
Rule 31    ConstDecl -> CONST ConstSpec
Rule 32    ConstSpec -> IdentifierList EQ ExpressionList
Rule 33    IdentifierList -> IdentifierList COMMA ID
Rule 34    IdentifierList -> ID
Rule 35    ExpressionList -> ExpressionList COMMA Expression
Rule 36    ExpressionList -> Expression
Rule 37    TypeDecl -> TYPE ID Type
Rule 38    VarDecl -> VAR VarSpec
Rule 39    VarSpec -> IdentifierList Type
Rule 40    VarSpec -> IdentifierList Type EQ ExpressionList
Rule 41    ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON
Rule 42    FunctionDecl -> FUNC FunctionName Signature FunctionBody
Rule 43    FunctionDecl -> FUNC FunctionName Signature SEMICOLON
Rule 44    FunctionName -> ID
Rule 45    Signature -> Parameters
Rule 46    Signature -> Parameters Result
Rule 47    Parameters -> LROUND ParameterList RROUND
Rule 48    Parameters -> LROUND RROUND
Rule 49    ParameterList -> ParameterList COMMA ParameterDecl
Rule 50    ParameterList -> ParameterDecl
Rule 51    ParameterDecl -> IdentifierList Type
Rule 52    Result -> Type
Rule 53    FunctionBody -> Block
Rule 54    MethodDecl -> FUNC Receiver MethodName Signature
Rule 55    MethodDecl -> FUNC Receiver MethodName Signature FunctionBody
Rule 56    MethodName -> ID
Rule 57    Receiver -> LROUND ParameterDecl RROUND
Rule 58    Operand -> Literal
Rule 59    Operand -> OperandName
Rule 60    Operand -> LROUND Expression RROUND
Rule 61    Literal -> BasicLit
Rule 62    Literal -> CompositeLit
Rule 63    BasicLit -> INT_LIT
Rule 64    BasicLit -> FLOAT_LIT
Rule 65    BasicLit -> STRING_LIT
Rule 66    BasicLit -> BOOL_LIT
Rule 67    BasicLit -> CHAR_LIT
Rule 68    BasicLit -> NIL
Rule 69    OperandName -> ID
Rule 70    CompositeLit -> LiteralType LiteralValue
Rule 71    LiteralType -> StructType
Rule 72    LiteralType -> ArrayType
Rule 73    LiteralType -> SliceType
Rule 74    LiteralType -> ID
Rule 75    LiteralValue -> lcurly rcurly
Rule 76    LiteralValue -> lcurly ElementList rcurly
Rule 77    ElementList -> Element
Rule 78    ElementList -> ElementList COMMA Element
Rule 79    Element -> Expression
Rule 80    Element -> LiteralValue
Rule 81    PrimaryExpr -> Operand
Rule 82    PrimaryExpr -> PrimaryExpr Selector
Rule 83    PrimaryExpr -> PrimaryExpr Index
Rule 84    PrimaryExpr -> PrimaryExpr Arguments
Rule 85    Selector -> DOT ID
Rule 86    Index -> LSQUARE Expression RSQUARE
Rule 87    Arguments -> LROUND ExpressionList RROUND
Rule 88    Arguments -> LROUND RROUND
Rule 89    Expression -> UnaryExpr
Rule 90    Expression -> Expression OR_OR Expression
Rule 91    Expression -> Expression AMP_AMP Expression
Rule 92    Expression -> Expression EQ_EQ Expression
Rule 93    Expression -> Expression NOT_EQ Expression
Rule 94    Expression -> Expression LT Expression
Rule 95    Expression -> Expression LE Expression
Rule 96    Expression -> Expression GT Expression
Rule 97    Expression -> Expression GE Expression
Rule 98    Expression -> Expression PLUS Expression
Rule 99    Expression -> Expression MINUS Expression
Rule 100   Expression -> Expression OR Expression
Rule 101   Expression -> Expression CARET Expression
Rule 102   Expression -> Expression STAR Expression
Rule 103   Expression -> Expression DIVIDE Expression
Rule 104   Expression -> Expression MODULO Expression
Rule 105   Expression -> Expression LSHIFT Expression
Rule 106   Expression -> Expression RSHIFT Expression
Rule 107   Expression -> Expression AMP Expression
Rule 108   UnaryExpr -> PrimaryExpr
Rule 109   UnaryExpr -> unary_op UnaryExpr
Rule 110   rel_op -> EQ_EQ
Rule 111   rel_op -> NOT_EQ
Rule 112   rel_op -> LT
Rule 113   rel_op -> LE
Rule 114   rel_op -> GT
Rule 115   rel_op -> GE
Rule 116   add_op -> PLUS
Rule 117   add_op -> MINUS
Rule 118   add_op -> OR
Rule 119   add_op -> CARET
Rule 120   mul_op -> STAR
Rule 121   mul_op -> DIVIDE
Rule 122   mul_op -> MODULO
Rule 123   mul_op -> LSHIFT
Rule 124   mul_op -> RSHIFT
Rule 125   mul_op -> AMP
Rule 126   unary_op -> PLUS
Rule 127   unary_op -> MINUS
Rule 128   unary_op -> NOT
Rule 129   unary_op -> CARET
Rule 130   unary_op -> STAR
Rule 131   unary_op -> AMP
Rule 132   Statement -> Declaration
Rule 133   Statement -> LabeledStmt
Rule 134   Statement -> ReturnStmt
Rule 135   Statement -> BreakStmt
Rule 136   Statement -> ContinueStmt
Rule 137   Statement -> GotoStmt
Rule 138   Statement -> Block
Rule 139   Statement -> IfStmt
Rule 140   Statement -> ForStmt
Rule 141   Statement -> SimpleStmt SEMICOLON
Rule 142   SimpleStmt -> ExpressionStmt
Rule 143   SimpleStmt -> IncDecStmt
Rule 144   SimpleStmt -> Assignment
Rule 145   SimpleStmt -> ShortVarDecl
Rule 146   ExpressionStmt -> Expression
Rule 147   LabeledStmt -> Label COLON Statement
Rule 148   Label -> ID
Rule 149   IncDecStmt -> Expression PLUS_PLUS
Rule 150   IncDecStmt -> Expression MINUS_MINUS
Rule 151   Assignment -> ExpressionList assign_op ExpressionList
Rule 152   assign_op -> PLUS_EQ
Rule 153   assign_op -> MINUS_EQ
Rule 154   assign_op -> STAR_EQ
Rule 155   assign_op -> DIVIDE_EQ
Rule 156   assign_op -> MODULO_EQ
Rule 157   assign_op -> AMP_EQ
Rule 158   assign_op -> OR_EQ
Rule 159   assign_op -> CARET_EQ
Rule 160   assign_op -> EQ
Rule 161   ForStmt -> ForLoop Block
Rule 162   ForStmt -> WhileLoop Block
Rule 163   ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
Rule 164   ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON
Rule 165   ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt
Rule 166   ForLoop -> FOR InitStmt SEMICOLON SEMICOLON
Rule 167   ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt
Rule 168   ForLoop -> FOR SEMICOLON Condition SEMICOLON
Rule 169   ForLoop -> FOR SEMICOLON SEMICOLON PostStmt
Rule 170   ForLoop -> FOR SEMICOLON SEMICOLON
Rule 171   WhileLoop -> FOR Condition Block
Rule 172   WhileLoop -> FOR Block
Rule 173   InitStmt -> SimpleStmt
Rule 174   PostStmt -> SimpleStmt
Rule 175   Condition -> Expression
Rule 176   ReturnStmt -> RETURN SEMICOLON
Rule 177   ReturnStmt -> RETURN ExpressionList SEMICOLON
Rule 178   BreakStmt -> BREAK SEMICOLON
Rule 179   BreakStmt -> BREAK Label SEMICOLON
Rule 180   ContinueStmt -> CONTINUE SEMICOLON
Rule 181   ContinueStmt -> CONTINUE Label SEMICOLON
Rule 182   GotoStmt -> GOTO Label SEMICOLON
Rule 183   IfStmt -> IF SimpleStmt SEMICOLON Expression Block
Rule 184   IfStmt -> IF Expression Block
Rule 185   IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt
Rule 186   IfStmt -> IF Expression ElseStmt
Rule 187   ElseStmt -> ELSE IfStmt
Rule 188   ElseStmt -> ELSE Block
Rule 189   SourceFile -> PackageClause ImportDeclList TopLevelDeclList
Rule 190   SourceFile -> PackageClause ImportDeclList
Rule 191   SourceFile -> PackageClause TopLevelDeclList
Rule 192   SourceFile -> PackageClause
Rule 193   PackageClause -> PACKAGE ID
Rule 194   ImportDeclList -> ImportDeclList ImportDecl SEMICOLON
Rule 195   ImportDeclList -> ImportDecl SEMICOLON
Rule 196   ImportDecl -> IMPORT ImportPath
Rule 197   ImportPath -> STRING_LIT
Rule 198   TopLevelDeclList -> TopLevelDeclList TopLevelDecl
Rule 199   TopLevelDeclList -> TopLevelDecl

Terminals, with rules where they appear

AMP                  : 107 125 131
AMP_AMP              : 91
AMP_EQ               : 157
AND_NOT              : 
ASSIGN               : 41
BOOL_LIT             : 66
BR                   : 
BREAK                : 178 179
CARET                : 101 119 129
CARET_EQ             : 159
CASE                 : 
CHAR_LIT             : 67
COLON                : 147
COMMA                : 33 35 49 78
CONST                : 31
CONTINUE             : 180 181
DATA_TYPE            : 6
DEFAULT              : 
DIVIDE               : 103 121
DIVIDE_EQ            : 155
DOT                  : 85
DOUBLE_QUOTES        : 
ELSE                 : 187 188
EQ                   : 32 40 160
EQ_EQ                : 92 110
FLOAT_LIT            : 64
FOR                  : 163 164 165 166 167 168 169 170 171 172
FUNC                 : 42 43 54 55
GE                   : 97 115
GOTO                 : 182
GT                   : 96 114
ID                   : 5 33 34 37 44 56 69 74 85 148 193
IF                   : 183 184 185 186
IMPORT               : 196
INT_LIT              : 63
LCURLY               : 1
LE                   : 95 113
LROUND               : 47 48 57 60 87 88
LSHIFT               : 105 123
LSQUARE              : 11 13 86
LT                   : 94 112
MAKE                 : 
MINUS                : 99 117 127
MINUS_EQ             : 153
MINUS_MINUS          : 150
MODULO               : 104 122
MODULO_EQ            : 156
NIL                  : 68
NOT                  : 128
NOT_EQ               : 93 111
OR                   : 100 118
OR_EQ                : 158
OR_OR                : 90
PACKAGE              : 193
PLUS                 : 98 116 126
PLUS_EQ              : 152
PLUS_PLUS            : 149
RCURLY               : 2
RETURN               : 176 177
RROUND               : 47 48 57 60 87 88
RSHIFT               : 106 124
RSQUARE              : 11 13 86
SEMICOLON            : 18 19 23 24 25 26 27 41 43 141 163 163 164 164 165 165 166 166 167 167 168 168 169 169 170 170 176 177 178 179 180 181 182 183 185 194 195
SINGLE_QUOTES        : 
STAR                 : 15 102 120 130
STAR_EQ              : 154
STRING_LIT           : 65 197
STRUCT               : 17
SWITCH               : 
TYPE                 : 37
VAR                  : 38
error                : 

Nonterminals, with rules where they appear

Arguments            : 84
ArrayLength          : 11
ArrayType            : 7 72
Assignment           : 144
BaseType             : 15
BasicLit             : 61
Block                : 53 138 161 162 171 172 183 184 188
BreakStmt            : 135
CompositeLit         : 62
Condition            : 163 164 167 168 171
ConstDecl            : 25
ConstSpec            : 31
ContinueStmt         : 136
Declaration          : 28 132
Element              : 77 78
ElementList          : 76 78
ElementType          : 11 13
ElseStmt             : 185 186
Expression           : 12 35 36 60 79 86 90 90 91 91 92 92 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 146 149 150 175 183 184 185 186
ExpressionList       : 32 35 40 41 87 151 151 177
ExpressionStmt       : 142
FieldDecl            : 18 19
FieldDeclList        : 17 18
ForLoop              : 161
ForStmt              : 140
FunctionBody         : 42 55
FunctionDecl         : 29
FunctionName         : 42 43
GotoStmt             : 137
IdentifierList       : 20 32 33 39 40 41 51
IfStmt               : 139 187
ImportDecl           : 194 195
ImportDeclList       : 189 190 194
ImportPath           : 196
IncDecStmt           : 143
Index                : 83
InitStmt             : 163 164 165 166
Label                : 147 179 181 182
LabeledStmt          : 133
Literal              : 58
LiteralType          : 70
LiteralValue         : 70 80
MethodDecl           : 30
MethodName           : 54 55
Operand              : 81
OperandName          : 59
PackageClause        : 189 190 191 192
ParameterDecl        : 49 50 57
ParameterList        : 47 49
Parameters           : 45 46
PointerType          : 9
PostStmt             : 163 165 167 169
PrimaryExpr          : 82 83 84 108
Receiver             : 54 55
Result               : 46
ReturnStmt           : 134
Selector             : 82
ShortVarDecl         : 145
Signature            : 42 43 54 55
SimpleStmt           : 141 173 174 183 185
SliceType            : 10 73
SourceFile           : 0
Statement            : 23 24 147
StatementList        : 21 23
StructType           : 8 71
TopLevelDecl         : 198 199
TopLevelDeclList     : 189 191 198
Type                 : 14 16 20 37 39 40 51 52
TypeDecl             : 26
TypeLit              : 4
TypeName             : 3
UnaryExpr            : 89 109
VarDecl              : 27
VarSpec              : 38
WhileLoop            : 162
add_op               : 
assign_op            : 151
lcurly               : 17 21 22 75 76
mul_op               : 
rcurly               : 17 21 22 75 76
rel_op               : 
unary_op             : 109

Parsing method: LALR

state 0

    (0) S' -> . SourceFile
    (189) SourceFile -> . PackageClause ImportDeclList TopLevelDeclList
    (190) SourceFile -> . PackageClause ImportDeclList
    (191) SourceFile -> . PackageClause TopLevelDeclList
    (192) SourceFile -> . PackageClause
    (193) PackageClause -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    SourceFile                     shift and go to state 1
    PackageClause                  shift and go to state 2

state 1

    (0) S' -> SourceFile .



state 2

    (189) SourceFile -> PackageClause . ImportDeclList TopLevelDeclList
    (190) SourceFile -> PackageClause . ImportDeclList
    (191) SourceFile -> PackageClause . TopLevelDeclList
    (192) SourceFile -> PackageClause .
    (194) ImportDeclList -> . ImportDeclList ImportDecl SEMICOLON
    (195) ImportDeclList -> . ImportDecl SEMICOLON
    (198) TopLevelDeclList -> . TopLevelDeclList TopLevelDecl
    (199) TopLevelDeclList -> . TopLevelDecl
    (196) ImportDecl -> . IMPORT ImportPath
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec

    $end            reduce using rule 192 (SourceFile -> PackageClause .)
    IMPORT          shift and go to state 8
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    ImportDeclList                 shift and go to state 4
    TopLevelDeclList               shift and go to state 5
    ImportDecl                     shift and go to state 6
    TopLevelDecl                   shift and go to state 7
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 3

    (193) PackageClause -> PACKAGE . ID

    ID              shift and go to state 19


state 4

    (189) SourceFile -> PackageClause ImportDeclList . TopLevelDeclList
    (190) SourceFile -> PackageClause ImportDeclList .
    (194) ImportDeclList -> ImportDeclList . ImportDecl SEMICOLON
    (198) TopLevelDeclList -> . TopLevelDeclList TopLevelDecl
    (199) TopLevelDeclList -> . TopLevelDecl
    (196) ImportDecl -> . IMPORT ImportPath
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec

    $end            reduce using rule 190 (SourceFile -> PackageClause ImportDeclList .)
    IMPORT          shift and go to state 8
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDeclList               shift and go to state 20
    ImportDecl                     shift and go to state 21
    TopLevelDecl                   shift and go to state 7
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 5

    (191) SourceFile -> PackageClause TopLevelDeclList .
    (198) TopLevelDeclList -> TopLevelDeclList . TopLevelDecl
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec

    $end            reduce using rule 191 (SourceFile -> PackageClause TopLevelDeclList .)
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDecl                   shift and go to state 22
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 6

    (195) ImportDeclList -> ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 23


state 7

    (199) TopLevelDeclList -> TopLevelDecl .

    FUNC            reduce using rule 199 (TopLevelDeclList -> TopLevelDecl .)
    CONST           reduce using rule 199 (TopLevelDeclList -> TopLevelDecl .)
    TYPE            reduce using rule 199 (TopLevelDeclList -> TopLevelDecl .)
    VAR             reduce using rule 199 (TopLevelDeclList -> TopLevelDecl .)
    $end            reduce using rule 199 (TopLevelDeclList -> TopLevelDecl .)


state 8

    (196) ImportDecl -> IMPORT . ImportPath
    (197) ImportPath -> . STRING_LIT

    STRING_LIT      shift and go to state 25

    ImportPath                     shift and go to state 24

state 9

    (28) TopLevelDecl -> Declaration .

    FUNC            reduce using rule 28 (TopLevelDecl -> Declaration .)
    CONST           reduce using rule 28 (TopLevelDecl -> Declaration .)
    TYPE            reduce using rule 28 (TopLevelDecl -> Declaration .)
    VAR             reduce using rule 28 (TopLevelDecl -> Declaration .)
    $end            reduce using rule 28 (TopLevelDecl -> Declaration .)


state 10

    (29) TopLevelDecl -> FunctionDecl .

    FUNC            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    CONST           reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    TYPE            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    VAR             reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    $end            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)


state 11

    (30) TopLevelDecl -> MethodDecl .

    FUNC            reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    CONST           reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    TYPE            reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    VAR             reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    $end            reduce using rule 30 (TopLevelDecl -> MethodDecl .)


state 12

    (25) Declaration -> ConstDecl . SEMICOLON

    SEMICOLON       shift and go to state 26


state 13

    (26) Declaration -> TypeDecl . SEMICOLON

    SEMICOLON       shift and go to state 27


state 14

    (27) Declaration -> VarDecl . SEMICOLON

    SEMICOLON       shift and go to state 28


state 15

    (42) FunctionDecl -> FUNC . FunctionName Signature FunctionBody
    (43) FunctionDecl -> FUNC . FunctionName Signature SEMICOLON
    (54) MethodDecl -> FUNC . Receiver MethodName Signature
    (55) MethodDecl -> FUNC . Receiver MethodName Signature FunctionBody
    (44) FunctionName -> . ID
    (57) Receiver -> . LROUND ParameterDecl RROUND

    ID              shift and go to state 31
    LROUND          shift and go to state 32

    FunctionName                   shift and go to state 29
    Receiver                       shift and go to state 30

state 16

    (31) ConstDecl -> CONST . ConstSpec
    (32) ConstSpec -> . IdentifierList EQ ExpressionList
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 35

    ConstSpec                      shift and go to state 33
    IdentifierList                 shift and go to state 34

state 17

    (37) TypeDecl -> TYPE . ID Type

    ID              shift and go to state 36


state 18

    (38) VarDecl -> VAR . VarSpec
    (39) VarSpec -> . IdentifierList Type
    (40) VarSpec -> . IdentifierList Type EQ ExpressionList
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 35

    VarSpec                        shift and go to state 37
    IdentifierList                 shift and go to state 38

state 19

    (193) PackageClause -> PACKAGE ID .

    IMPORT          reduce using rule 193 (PackageClause -> PACKAGE ID .)
    FUNC            reduce using rule 193 (PackageClause -> PACKAGE ID .)
    CONST           reduce using rule 193 (PackageClause -> PACKAGE ID .)
    TYPE            reduce using rule 193 (PackageClause -> PACKAGE ID .)
    VAR             reduce using rule 193 (PackageClause -> PACKAGE ID .)
    $end            reduce using rule 193 (PackageClause -> PACKAGE ID .)


state 20

    (189) SourceFile -> PackageClause ImportDeclList TopLevelDeclList .
    (198) TopLevelDeclList -> TopLevelDeclList . TopLevelDecl
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec

    $end            reduce using rule 189 (SourceFile -> PackageClause ImportDeclList TopLevelDeclList .)
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDecl                   shift and go to state 22
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 21

    (194) ImportDeclList -> ImportDeclList ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 39


state 22

    (198) TopLevelDeclList -> TopLevelDeclList TopLevelDecl .

    FUNC            reduce using rule 198 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    CONST           reduce using rule 198 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    TYPE            reduce using rule 198 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    VAR             reduce using rule 198 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    $end            reduce using rule 198 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)


state 23

    (195) ImportDeclList -> ImportDecl SEMICOLON .

    IMPORT          reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)
    FUNC            reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)
    CONST           reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)
    TYPE            reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)
    VAR             reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)
    $end            reduce using rule 195 (ImportDeclList -> ImportDecl SEMICOLON .)


state 24

    (196) ImportDecl -> IMPORT ImportPath .

    SEMICOLON       reduce using rule 196 (ImportDecl -> IMPORT ImportPath .)


state 25

    (197) ImportPath -> STRING_LIT .

    SEMICOLON       reduce using rule 197 (ImportPath -> STRING_LIT .)


state 26

    (25) Declaration -> ConstDecl SEMICOLON .

    FUNC            reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)
    CONST           reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)
    TYPE            reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)
    VAR             reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)
    $end            reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)
    SEMICOLON       reduce using rule 25 (Declaration -> ConstDecl SEMICOLON .)


state 27

    (26) Declaration -> TypeDecl SEMICOLON .

    FUNC            reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)
    CONST           reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)
    TYPE            reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)
    VAR             reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)
    $end            reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)
    SEMICOLON       reduce using rule 26 (Declaration -> TypeDecl SEMICOLON .)


state 28

    (27) Declaration -> VarDecl SEMICOLON .

    FUNC            reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)
    CONST           reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)
    TYPE            reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)
    VAR             reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)
    $end            reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)
    SEMICOLON       reduce using rule 27 (Declaration -> VarDecl SEMICOLON .)


state 29

    (42) FunctionDecl -> FUNC FunctionName . Signature FunctionBody
    (43) FunctionDecl -> FUNC FunctionName . Signature SEMICOLON
    (45) Signature -> . Parameters
    (46) Signature -> . Parameters Result
    (47) Parameters -> . LROUND ParameterList RROUND
    (48) Parameters -> . LROUND RROUND

    LROUND          shift and go to state 42

    Signature                      shift and go to state 40
    Parameters                     shift and go to state 41

state 30

    (54) MethodDecl -> FUNC Receiver . MethodName Signature
    (55) MethodDecl -> FUNC Receiver . MethodName Signature FunctionBody
    (56) MethodName -> . ID

    ID              shift and go to state 44

    MethodName                     shift and go to state 43

state 31

    (44) FunctionName -> ID .

    LROUND          reduce using rule 44 (FunctionName -> ID .)


state 32

    (57) Receiver -> LROUND . ParameterDecl RROUND
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 35

    ParameterDecl                  shift and go to state 45
    IdentifierList                 shift and go to state 46

state 33

    (31) ConstDecl -> CONST ConstSpec .

    SEMICOLON       reduce using rule 31 (ConstDecl -> CONST ConstSpec .)


state 34

    (32) ConstSpec -> IdentifierList . EQ ExpressionList
    (33) IdentifierList -> IdentifierList . COMMA ID

    EQ              shift and go to state 47
    COMMA           shift and go to state 48


state 35

    (34) IdentifierList -> ID .

    EQ              reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    ID              reduce using rule 34 (IdentifierList -> ID .)
    DATA_TYPE       reduce using rule 34 (IdentifierList -> ID .)
    LSQUARE         reduce using rule 34 (IdentifierList -> ID .)
    STRUCT          reduce using rule 34 (IdentifierList -> ID .)
    STAR            reduce using rule 34 (IdentifierList -> ID .)


state 36

    (37) TypeDecl -> TYPE ID . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    Type                           shift and go to state 50
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 37

    (38) VarDecl -> VAR VarSpec .

    SEMICOLON       reduce using rule 38 (VarDecl -> VAR VarSpec .)


state 38

    (39) VarSpec -> IdentifierList . Type
    (40) VarSpec -> IdentifierList . Type EQ ExpressionList
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 48
    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    Type                           shift and go to state 61
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 39

    (194) ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .

    IMPORT          reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    FUNC            reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    CONST           reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    TYPE            reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    VAR             reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    $end            reduce using rule 194 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)


state 40

    (42) FunctionDecl -> FUNC FunctionName Signature . FunctionBody
    (43) FunctionDecl -> FUNC FunctionName Signature . SEMICOLON
    (53) FunctionBody -> . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    SEMICOLON       shift and go to state 63
    LCURLY          shift and go to state 66

    FunctionBody                   shift and go to state 62
    Block                          shift and go to state 64
    lcurly                         shift and go to state 65

state 41

    (45) Signature -> Parameters .
    (46) Signature -> Parameters . Result
    (52) Result -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       reduce using rule 45 (Signature -> Parameters .)
    LCURLY          reduce using rule 45 (Signature -> Parameters .)
    FUNC            reduce using rule 45 (Signature -> Parameters .)
    CONST           reduce using rule 45 (Signature -> Parameters .)
    TYPE            reduce using rule 45 (Signature -> Parameters .)
    VAR             reduce using rule 45 (Signature -> Parameters .)
    $end            reduce using rule 45 (Signature -> Parameters .)
    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    Result                         shift and go to state 67
    Type                           shift and go to state 68
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 42

    (47) Parameters -> LROUND . ParameterList RROUND
    (48) Parameters -> LROUND . RROUND
    (49) ParameterList -> . ParameterList COMMA ParameterDecl
    (50) ParameterList -> . ParameterDecl
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    RROUND          shift and go to state 70
    ID              shift and go to state 35

    ParameterList                  shift and go to state 69
    ParameterDecl                  shift and go to state 71
    IdentifierList                 shift and go to state 46

state 43

    (54) MethodDecl -> FUNC Receiver MethodName . Signature
    (55) MethodDecl -> FUNC Receiver MethodName . Signature FunctionBody
    (45) Signature -> . Parameters
    (46) Signature -> . Parameters Result
    (47) Parameters -> . LROUND ParameterList RROUND
    (48) Parameters -> . LROUND RROUND

    LROUND          shift and go to state 42

    Signature                      shift and go to state 72
    Parameters                     shift and go to state 41

state 44

    (56) MethodName -> ID .

    LROUND          reduce using rule 56 (MethodName -> ID .)


state 45

    (57) Receiver -> LROUND ParameterDecl . RROUND

    RROUND          shift and go to state 73


state 46

    (51) ParameterDecl -> IdentifierList . Type
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 48
    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    Type                           shift and go to state 74
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 47

    (32) ConstSpec -> IdentifierList EQ . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 75
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 48

    (33) IdentifierList -> IdentifierList COMMA . ID

    ID              shift and go to state 103


state 49

    (5) TypeName -> ID .

    SEMICOLON       reduce using rule 5 (TypeName -> ID .)
    EQ              reduce using rule 5 (TypeName -> ID .)
    LCURLY          reduce using rule 5 (TypeName -> ID .)
    FUNC            reduce using rule 5 (TypeName -> ID .)
    CONST           reduce using rule 5 (TypeName -> ID .)
    TYPE            reduce using rule 5 (TypeName -> ID .)
    VAR             reduce using rule 5 (TypeName -> ID .)
    $end            reduce using rule 5 (TypeName -> ID .)
    RROUND          reduce using rule 5 (TypeName -> ID .)
    COMMA           reduce using rule 5 (TypeName -> ID .)


state 50

    (37) TypeDecl -> TYPE ID Type .

    SEMICOLON       reduce using rule 37 (TypeDecl -> TYPE ID Type .)


state 51

    (3) Type -> TypeName .

    SEMICOLON       reduce using rule 3 (Type -> TypeName .)
    EQ              reduce using rule 3 (Type -> TypeName .)
    LCURLY          reduce using rule 3 (Type -> TypeName .)
    FUNC            reduce using rule 3 (Type -> TypeName .)
    CONST           reduce using rule 3 (Type -> TypeName .)
    TYPE            reduce using rule 3 (Type -> TypeName .)
    VAR             reduce using rule 3 (Type -> TypeName .)
    $end            reduce using rule 3 (Type -> TypeName .)
    RROUND          reduce using rule 3 (Type -> TypeName .)
    COMMA           reduce using rule 3 (Type -> TypeName .)


state 52

    (4) Type -> TypeLit .

    SEMICOLON       reduce using rule 4 (Type -> TypeLit .)
    EQ              reduce using rule 4 (Type -> TypeLit .)
    LCURLY          reduce using rule 4 (Type -> TypeLit .)
    FUNC            reduce using rule 4 (Type -> TypeLit .)
    CONST           reduce using rule 4 (Type -> TypeLit .)
    TYPE            reduce using rule 4 (Type -> TypeLit .)
    VAR             reduce using rule 4 (Type -> TypeLit .)
    $end            reduce using rule 4 (Type -> TypeLit .)
    RROUND          reduce using rule 4 (Type -> TypeLit .)
    COMMA           reduce using rule 4 (Type -> TypeLit .)


state 53

    (6) TypeName -> DATA_TYPE .

    SEMICOLON       reduce using rule 6 (TypeName -> DATA_TYPE .)
    EQ              reduce using rule 6 (TypeName -> DATA_TYPE .)
    LCURLY          reduce using rule 6 (TypeName -> DATA_TYPE .)
    FUNC            reduce using rule 6 (TypeName -> DATA_TYPE .)
    CONST           reduce using rule 6 (TypeName -> DATA_TYPE .)
    TYPE            reduce using rule 6 (TypeName -> DATA_TYPE .)
    VAR             reduce using rule 6 (TypeName -> DATA_TYPE .)
    $end            reduce using rule 6 (TypeName -> DATA_TYPE .)
    RROUND          reduce using rule 6 (TypeName -> DATA_TYPE .)
    COMMA           reduce using rule 6 (TypeName -> DATA_TYPE .)


state 54

    (7) TypeLit -> ArrayType .

    SEMICOLON       reduce using rule 7 (TypeLit -> ArrayType .)
    EQ              reduce using rule 7 (TypeLit -> ArrayType .)
    LCURLY          reduce using rule 7 (TypeLit -> ArrayType .)
    FUNC            reduce using rule 7 (TypeLit -> ArrayType .)
    CONST           reduce using rule 7 (TypeLit -> ArrayType .)
    TYPE            reduce using rule 7 (TypeLit -> ArrayType .)
    VAR             reduce using rule 7 (TypeLit -> ArrayType .)
    $end            reduce using rule 7 (TypeLit -> ArrayType .)
    RROUND          reduce using rule 7 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 7 (TypeLit -> ArrayType .)


state 55

    (8) TypeLit -> StructType .

    SEMICOLON       reduce using rule 8 (TypeLit -> StructType .)
    EQ              reduce using rule 8 (TypeLit -> StructType .)
    LCURLY          reduce using rule 8 (TypeLit -> StructType .)
    FUNC            reduce using rule 8 (TypeLit -> StructType .)
    CONST           reduce using rule 8 (TypeLit -> StructType .)
    TYPE            reduce using rule 8 (TypeLit -> StructType .)
    VAR             reduce using rule 8 (TypeLit -> StructType .)
    $end            reduce using rule 8 (TypeLit -> StructType .)
    RROUND          reduce using rule 8 (TypeLit -> StructType .)
    COMMA           reduce using rule 8 (TypeLit -> StructType .)


state 56

    (9) TypeLit -> PointerType .

    SEMICOLON       reduce using rule 9 (TypeLit -> PointerType .)
    EQ              reduce using rule 9 (TypeLit -> PointerType .)
    LCURLY          reduce using rule 9 (TypeLit -> PointerType .)
    FUNC            reduce using rule 9 (TypeLit -> PointerType .)
    CONST           reduce using rule 9 (TypeLit -> PointerType .)
    TYPE            reduce using rule 9 (TypeLit -> PointerType .)
    VAR             reduce using rule 9 (TypeLit -> PointerType .)
    $end            reduce using rule 9 (TypeLit -> PointerType .)
    RROUND          reduce using rule 9 (TypeLit -> PointerType .)
    COMMA           reduce using rule 9 (TypeLit -> PointerType .)


state 57

    (10) TypeLit -> SliceType .

    SEMICOLON       reduce using rule 10 (TypeLit -> SliceType .)
    EQ              reduce using rule 10 (TypeLit -> SliceType .)
    LCURLY          reduce using rule 10 (TypeLit -> SliceType .)
    FUNC            reduce using rule 10 (TypeLit -> SliceType .)
    CONST           reduce using rule 10 (TypeLit -> SliceType .)
    TYPE            reduce using rule 10 (TypeLit -> SliceType .)
    VAR             reduce using rule 10 (TypeLit -> SliceType .)
    $end            reduce using rule 10 (TypeLit -> SliceType .)
    RROUND          reduce using rule 10 (TypeLit -> SliceType .)
    COMMA           reduce using rule 10 (TypeLit -> SliceType .)


state 58

    (11) ArrayType -> LSQUARE . ArrayLength RSQUARE ElementType
    (13) SliceType -> LSQUARE . RSQUARE ElementType
    (12) ArrayLength -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RSQUARE         shift and go to state 105
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ArrayLength                    shift and go to state 104
    Expression                     shift and go to state 106
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 59

    (17) StructType -> STRUCT . lcurly FieldDeclList rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 66

    lcurly                         shift and go to state 107

state 60

    (15) PointerType -> STAR . BaseType
    (16) BaseType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    BaseType                       shift and go to state 108
    Type                           shift and go to state 109
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 61

    (39) VarSpec -> IdentifierList Type .
    (40) VarSpec -> IdentifierList Type . EQ ExpressionList

    SEMICOLON       reduce using rule 39 (VarSpec -> IdentifierList Type .)
    EQ              shift and go to state 110


state 62

    (42) FunctionDecl -> FUNC FunctionName Signature FunctionBody .

    FUNC            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    CONST           reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    TYPE            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    VAR             reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    $end            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)


state 63

    (43) FunctionDecl -> FUNC FunctionName Signature SEMICOLON .

    FUNC            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    CONST           reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    TYPE            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    VAR             reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    $end            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)


state 64

    (53) FunctionBody -> Block .

    FUNC            reduce using rule 53 (FunctionBody -> Block .)
    CONST           reduce using rule 53 (FunctionBody -> Block .)
    TYPE            reduce using rule 53 (FunctionBody -> Block .)
    VAR             reduce using rule 53 (FunctionBody -> Block .)
    $end            reduce using rule 53 (FunctionBody -> Block .)


state 65

    (21) Block -> lcurly . StatementList rcurly
    (22) Block -> lcurly . rcurly
    (23) StatementList -> . StatementList Statement SEMICOLON
    (24) StatementList -> . Statement SEMICOLON
    (2) rcurly -> . RCURLY
    (132) Statement -> . Declaration
    (133) Statement -> . LabeledStmt
    (134) Statement -> . ReturnStmt
    (135) Statement -> . BreakStmt
    (136) Statement -> . ContinueStmt
    (137) Statement -> . GotoStmt
    (138) Statement -> . Block
    (139) Statement -> . IfStmt
    (140) Statement -> . ForStmt
    (141) Statement -> . SimpleStmt SEMICOLON
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (147) LabeledStmt -> . Label COLON Statement
    (176) ReturnStmt -> . RETURN SEMICOLON
    (177) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (178) BreakStmt -> . BREAK SEMICOLON
    (179) BreakStmt -> . BREAK Label SEMICOLON
    (180) ContinueStmt -> . CONTINUE SEMICOLON
    (181) ContinueStmt -> . CONTINUE Label SEMICOLON
    (182) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (183) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (184) IfStmt -> . IF Expression Block
    (185) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (186) IfStmt -> . IF Expression ElseStmt
    (161) ForStmt -> . ForLoop Block
    (162) ForStmt -> . WhileLoop Block
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec
    (148) Label -> . ID
    (1) lcurly -> . LCURLY
    (163) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (164) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (165) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (166) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (167) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR SEMICOLON SEMICOLON
    (171) WhileLoop -> . FOR Condition Block
    (172) WhileLoop -> . FOR Block
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 114
    RETURN          shift and go to state 126
    BREAK           shift and go to state 128
    CONTINUE        shift and go to state 129
    GOTO            shift and go to state 130
    IF              shift and go to state 131
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 139
    LCURLY          shift and go to state 66
    FOR             shift and go to state 140
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    lcurly                         shift and go to state 65
    StatementList                  shift and go to state 111
    rcurly                         shift and go to state 112
    Statement                      shift and go to state 113
    Declaration                    shift and go to state 115
    LabeledStmt                    shift and go to state 116
    ReturnStmt                     shift and go to state 117
    BreakStmt                      shift and go to state 118
    ContinueStmt                   shift and go to state 119
    GotoStmt                       shift and go to state 120
    Block                          shift and go to state 121
    IfStmt                         shift and go to state 122
    ForStmt                        shift and go to state 123
    SimpleStmt                     shift and go to state 124
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    Label                          shift and go to state 125
    ExpressionList                 shift and go to state 127
    Expression                     shift and go to state 132
    ForLoop                        shift and go to state 133
    WhileLoop                      shift and go to state 134
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 66

    (1) lcurly -> LCURLY .

    RCURLY          reduce using rule 1 (lcurly -> LCURLY .)
    RETURN          reduce using rule 1 (lcurly -> LCURLY .)
    BREAK           reduce using rule 1 (lcurly -> LCURLY .)
    CONTINUE        reduce using rule 1 (lcurly -> LCURLY .)
    GOTO            reduce using rule 1 (lcurly -> LCURLY .)
    IF              reduce using rule 1 (lcurly -> LCURLY .)
    CONST           reduce using rule 1 (lcurly -> LCURLY .)
    TYPE            reduce using rule 1 (lcurly -> LCURLY .)
    VAR             reduce using rule 1 (lcurly -> LCURLY .)
    ID              reduce using rule 1 (lcurly -> LCURLY .)
    LCURLY          reduce using rule 1 (lcurly -> LCURLY .)
    FOR             reduce using rule 1 (lcurly -> LCURLY .)
    PLUS            reduce using rule 1 (lcurly -> LCURLY .)
    MINUS           reduce using rule 1 (lcurly -> LCURLY .)
    NOT             reduce using rule 1 (lcurly -> LCURLY .)
    CARET           reduce using rule 1 (lcurly -> LCURLY .)
    STAR            reduce using rule 1 (lcurly -> LCURLY .)
    AMP             reduce using rule 1 (lcurly -> LCURLY .)
    LROUND          reduce using rule 1 (lcurly -> LCURLY .)
    INT_LIT         reduce using rule 1 (lcurly -> LCURLY .)
    FLOAT_LIT       reduce using rule 1 (lcurly -> LCURLY .)
    STRING_LIT      reduce using rule 1 (lcurly -> LCURLY .)
    BOOL_LIT        reduce using rule 1 (lcurly -> LCURLY .)
    CHAR_LIT        reduce using rule 1 (lcurly -> LCURLY .)
    NIL             reduce using rule 1 (lcurly -> LCURLY .)
    STRUCT          reduce using rule 1 (lcurly -> LCURLY .)
    LSQUARE         reduce using rule 1 (lcurly -> LCURLY .)


state 67

    (46) Signature -> Parameters Result .

    SEMICOLON       reduce using rule 46 (Signature -> Parameters Result .)
    LCURLY          reduce using rule 46 (Signature -> Parameters Result .)
    FUNC            reduce using rule 46 (Signature -> Parameters Result .)
    CONST           reduce using rule 46 (Signature -> Parameters Result .)
    TYPE            reduce using rule 46 (Signature -> Parameters Result .)
    VAR             reduce using rule 46 (Signature -> Parameters Result .)
    $end            reduce using rule 46 (Signature -> Parameters Result .)


state 68

    (52) Result -> Type .

    SEMICOLON       reduce using rule 52 (Result -> Type .)
    LCURLY          reduce using rule 52 (Result -> Type .)
    FUNC            reduce using rule 52 (Result -> Type .)
    CONST           reduce using rule 52 (Result -> Type .)
    TYPE            reduce using rule 52 (Result -> Type .)
    VAR             reduce using rule 52 (Result -> Type .)
    $end            reduce using rule 52 (Result -> Type .)


state 69

    (47) Parameters -> LROUND ParameterList . RROUND
    (49) ParameterList -> ParameterList . COMMA ParameterDecl

    RROUND          shift and go to state 142
    COMMA           shift and go to state 143


state 70

    (48) Parameters -> LROUND RROUND .

    ID              reduce using rule 48 (Parameters -> LROUND RROUND .)
    DATA_TYPE       reduce using rule 48 (Parameters -> LROUND RROUND .)
    LSQUARE         reduce using rule 48 (Parameters -> LROUND RROUND .)
    STRUCT          reduce using rule 48 (Parameters -> LROUND RROUND .)
    STAR            reduce using rule 48 (Parameters -> LROUND RROUND .)
    SEMICOLON       reduce using rule 48 (Parameters -> LROUND RROUND .)
    LCURLY          reduce using rule 48 (Parameters -> LROUND RROUND .)
    FUNC            reduce using rule 48 (Parameters -> LROUND RROUND .)
    CONST           reduce using rule 48 (Parameters -> LROUND RROUND .)
    TYPE            reduce using rule 48 (Parameters -> LROUND RROUND .)
    VAR             reduce using rule 48 (Parameters -> LROUND RROUND .)
    $end            reduce using rule 48 (Parameters -> LROUND RROUND .)


state 71

    (50) ParameterList -> ParameterDecl .

    RROUND          reduce using rule 50 (ParameterList -> ParameterDecl .)
    COMMA           reduce using rule 50 (ParameterList -> ParameterDecl .)


state 72

    (54) MethodDecl -> FUNC Receiver MethodName Signature .
    (55) MethodDecl -> FUNC Receiver MethodName Signature . FunctionBody
    (53) FunctionBody -> . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    FUNC            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    CONST           reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    TYPE            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    VAR             reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    $end            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    LCURLY          shift and go to state 66

    FunctionBody                   shift and go to state 144
    Block                          shift and go to state 64
    lcurly                         shift and go to state 65

state 73

    (57) Receiver -> LROUND ParameterDecl RROUND .

    ID              reduce using rule 57 (Receiver -> LROUND ParameterDecl RROUND .)


state 74

    (51) ParameterDecl -> IdentifierList Type .

    RROUND          reduce using rule 51 (ParameterDecl -> IdentifierList Type .)
    COMMA           reduce using rule 51 (ParameterDecl -> IdentifierList Type .)


state 75

    (32) ConstSpec -> IdentifierList EQ ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 32 (ConstSpec -> IdentifierList EQ ExpressionList .)
    COMMA           shift and go to state 145


state 76

    (36) ExpressionList -> Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    SEMICOLON       reduce using rule 36 (ExpressionList -> Expression .)
    RROUND          reduce using rule 36 (ExpressionList -> Expression .)
    LCURLY          reduce using rule 36 (ExpressionList -> Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 77

    (89) Expression -> UnaryExpr .

    OR_OR           reduce using rule 89 (Expression -> UnaryExpr .)
    AMP_AMP         reduce using rule 89 (Expression -> UnaryExpr .)
    EQ_EQ           reduce using rule 89 (Expression -> UnaryExpr .)
    NOT_EQ          reduce using rule 89 (Expression -> UnaryExpr .)
    LT              reduce using rule 89 (Expression -> UnaryExpr .)
    LE              reduce using rule 89 (Expression -> UnaryExpr .)
    GT              reduce using rule 89 (Expression -> UnaryExpr .)
    GE              reduce using rule 89 (Expression -> UnaryExpr .)
    PLUS            reduce using rule 89 (Expression -> UnaryExpr .)
    MINUS           reduce using rule 89 (Expression -> UnaryExpr .)
    OR              reduce using rule 89 (Expression -> UnaryExpr .)
    CARET           reduce using rule 89 (Expression -> UnaryExpr .)
    STAR            reduce using rule 89 (Expression -> UnaryExpr .)
    DIVIDE          reduce using rule 89 (Expression -> UnaryExpr .)
    MODULO          reduce using rule 89 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 89 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 89 (Expression -> UnaryExpr .)
    AMP             reduce using rule 89 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 89 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 89 (Expression -> UnaryExpr .)
    RSQUARE         reduce using rule 89 (Expression -> UnaryExpr .)
    PLUS_PLUS       reduce using rule 89 (Expression -> UnaryExpr .)
    MINUS_MINUS     reduce using rule 89 (Expression -> UnaryExpr .)
    PLUS_EQ         reduce using rule 89 (Expression -> UnaryExpr .)
    MINUS_EQ        reduce using rule 89 (Expression -> UnaryExpr .)
    STAR_EQ         reduce using rule 89 (Expression -> UnaryExpr .)
    DIVIDE_EQ       reduce using rule 89 (Expression -> UnaryExpr .)
    MODULO_EQ       reduce using rule 89 (Expression -> UnaryExpr .)
    AMP_EQ          reduce using rule 89 (Expression -> UnaryExpr .)
    OR_EQ           reduce using rule 89 (Expression -> UnaryExpr .)
    CARET_EQ        reduce using rule 89 (Expression -> UnaryExpr .)
    EQ              reduce using rule 89 (Expression -> UnaryExpr .)
    RROUND          reduce using rule 89 (Expression -> UnaryExpr .)
    ELSE            reduce using rule 89 (Expression -> UnaryExpr .)
    LCURLY          reduce using rule 89 (Expression -> UnaryExpr .)
    RCURLY          reduce using rule 89 (Expression -> UnaryExpr .)


state 78

    (126) unary_op -> PLUS .

    PLUS            reduce using rule 126 (unary_op -> PLUS .)
    MINUS           reduce using rule 126 (unary_op -> PLUS .)
    NOT             reduce using rule 126 (unary_op -> PLUS .)
    CARET           reduce using rule 126 (unary_op -> PLUS .)
    STAR            reduce using rule 126 (unary_op -> PLUS .)
    AMP             reduce using rule 126 (unary_op -> PLUS .)
    LROUND          reduce using rule 126 (unary_op -> PLUS .)
    ID              reduce using rule 126 (unary_op -> PLUS .)
    INT_LIT         reduce using rule 126 (unary_op -> PLUS .)
    FLOAT_LIT       reduce using rule 126 (unary_op -> PLUS .)
    STRING_LIT      reduce using rule 126 (unary_op -> PLUS .)
    BOOL_LIT        reduce using rule 126 (unary_op -> PLUS .)
    CHAR_LIT        reduce using rule 126 (unary_op -> PLUS .)
    NIL             reduce using rule 126 (unary_op -> PLUS .)
    STRUCT          reduce using rule 126 (unary_op -> PLUS .)
    LSQUARE         reduce using rule 126 (unary_op -> PLUS .)


state 79

    (127) unary_op -> MINUS .

    PLUS            reduce using rule 127 (unary_op -> MINUS .)
    MINUS           reduce using rule 127 (unary_op -> MINUS .)
    NOT             reduce using rule 127 (unary_op -> MINUS .)
    CARET           reduce using rule 127 (unary_op -> MINUS .)
    STAR            reduce using rule 127 (unary_op -> MINUS .)
    AMP             reduce using rule 127 (unary_op -> MINUS .)
    LROUND          reduce using rule 127 (unary_op -> MINUS .)
    ID              reduce using rule 127 (unary_op -> MINUS .)
    INT_LIT         reduce using rule 127 (unary_op -> MINUS .)
    FLOAT_LIT       reduce using rule 127 (unary_op -> MINUS .)
    STRING_LIT      reduce using rule 127 (unary_op -> MINUS .)
    BOOL_LIT        reduce using rule 127 (unary_op -> MINUS .)
    CHAR_LIT        reduce using rule 127 (unary_op -> MINUS .)
    NIL             reduce using rule 127 (unary_op -> MINUS .)
    STRUCT          reduce using rule 127 (unary_op -> MINUS .)
    LSQUARE         reduce using rule 127 (unary_op -> MINUS .)


state 80

    (129) unary_op -> CARET .

    PLUS            reduce using rule 129 (unary_op -> CARET .)
    MINUS           reduce using rule 129 (unary_op -> CARET .)
    NOT             reduce using rule 129 (unary_op -> CARET .)
    CARET           reduce using rule 129 (unary_op -> CARET .)
    STAR            reduce using rule 129 (unary_op -> CARET .)
    AMP             reduce using rule 129 (unary_op -> CARET .)
    LROUND          reduce using rule 129 (unary_op -> CARET .)
    ID              reduce using rule 129 (unary_op -> CARET .)
    INT_LIT         reduce using rule 129 (unary_op -> CARET .)
    FLOAT_LIT       reduce using rule 129 (unary_op -> CARET .)
    STRING_LIT      reduce using rule 129 (unary_op -> CARET .)
    BOOL_LIT        reduce using rule 129 (unary_op -> CARET .)
    CHAR_LIT        reduce using rule 129 (unary_op -> CARET .)
    NIL             reduce using rule 129 (unary_op -> CARET .)
    STRUCT          reduce using rule 129 (unary_op -> CARET .)
    LSQUARE         reduce using rule 129 (unary_op -> CARET .)


state 81

    (130) unary_op -> STAR .

    PLUS            reduce using rule 130 (unary_op -> STAR .)
    MINUS           reduce using rule 130 (unary_op -> STAR .)
    NOT             reduce using rule 130 (unary_op -> STAR .)
    CARET           reduce using rule 130 (unary_op -> STAR .)
    STAR            reduce using rule 130 (unary_op -> STAR .)
    AMP             reduce using rule 130 (unary_op -> STAR .)
    LROUND          reduce using rule 130 (unary_op -> STAR .)
    ID              reduce using rule 130 (unary_op -> STAR .)
    INT_LIT         reduce using rule 130 (unary_op -> STAR .)
    FLOAT_LIT       reduce using rule 130 (unary_op -> STAR .)
    STRING_LIT      reduce using rule 130 (unary_op -> STAR .)
    BOOL_LIT        reduce using rule 130 (unary_op -> STAR .)
    CHAR_LIT        reduce using rule 130 (unary_op -> STAR .)
    NIL             reduce using rule 130 (unary_op -> STAR .)
    STRUCT          reduce using rule 130 (unary_op -> STAR .)
    LSQUARE         reduce using rule 130 (unary_op -> STAR .)


state 82

    (131) unary_op -> AMP .

    PLUS            reduce using rule 131 (unary_op -> AMP .)
    MINUS           reduce using rule 131 (unary_op -> AMP .)
    NOT             reduce using rule 131 (unary_op -> AMP .)
    CARET           reduce using rule 131 (unary_op -> AMP .)
    STAR            reduce using rule 131 (unary_op -> AMP .)
    AMP             reduce using rule 131 (unary_op -> AMP .)
    LROUND          reduce using rule 131 (unary_op -> AMP .)
    ID              reduce using rule 131 (unary_op -> AMP .)
    INT_LIT         reduce using rule 131 (unary_op -> AMP .)
    FLOAT_LIT       reduce using rule 131 (unary_op -> AMP .)
    STRING_LIT      reduce using rule 131 (unary_op -> AMP .)
    BOOL_LIT        reduce using rule 131 (unary_op -> AMP .)
    CHAR_LIT        reduce using rule 131 (unary_op -> AMP .)
    NIL             reduce using rule 131 (unary_op -> AMP .)
    STRUCT          reduce using rule 131 (unary_op -> AMP .)
    LSQUARE         reduce using rule 131 (unary_op -> AMP .)


state 83

    (108) UnaryExpr -> PrimaryExpr .
    (82) PrimaryExpr -> PrimaryExpr . Selector
    (83) PrimaryExpr -> PrimaryExpr . Index
    (84) PrimaryExpr -> PrimaryExpr . Arguments
    (85) Selector -> . DOT ID
    (86) Index -> . LSQUARE Expression RSQUARE
    (87) Arguments -> . LROUND ExpressionList RROUND
    (88) Arguments -> . LROUND RROUND

    OR_OR           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    AMP_AMP         reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    EQ_EQ           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    NOT_EQ          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    LT              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    LE              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    GT              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    GE              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    PLUS            reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    MINUS           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    CARET           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    STAR            reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    DIVIDE          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    MODULO          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    AMP             reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    RSQUARE         reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    PLUS_PLUS       reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    MINUS_MINUS     reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    PLUS_EQ         reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    MINUS_EQ        reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    STAR_EQ         reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    DIVIDE_EQ       reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    MODULO_EQ       reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    AMP_EQ          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    OR_EQ           reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    CARET_EQ        reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    EQ              reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    RROUND          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    ELSE            reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    LCURLY          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    RCURLY          reduce using rule 108 (UnaryExpr -> PrimaryExpr .)
    DOT             shift and go to state 167
    LSQUARE         shift and go to state 168
    LROUND          shift and go to state 169

    Selector                       shift and go to state 164
    Index                          shift and go to state 165
    Arguments                      shift and go to state 166

state 84

    (109) UnaryExpr -> unary_op . UnaryExpr
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    unary_op                       shift and go to state 84
    UnaryExpr                      shift and go to state 170
    PrimaryExpr                    shift and go to state 83
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 85

    (81) PrimaryExpr -> Operand .

    DOT             reduce using rule 81 (PrimaryExpr -> Operand .)
    LSQUARE         reduce using rule 81 (PrimaryExpr -> Operand .)
    LROUND          reduce using rule 81 (PrimaryExpr -> Operand .)
    OR_OR           reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP_AMP         reduce using rule 81 (PrimaryExpr -> Operand .)
    EQ_EQ           reduce using rule 81 (PrimaryExpr -> Operand .)
    NOT_EQ          reduce using rule 81 (PrimaryExpr -> Operand .)
    LT              reduce using rule 81 (PrimaryExpr -> Operand .)
    LE              reduce using rule 81 (PrimaryExpr -> Operand .)
    GT              reduce using rule 81 (PrimaryExpr -> Operand .)
    GE              reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS            reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS           reduce using rule 81 (PrimaryExpr -> Operand .)
    OR              reduce using rule 81 (PrimaryExpr -> Operand .)
    CARET           reduce using rule 81 (PrimaryExpr -> Operand .)
    STAR            reduce using rule 81 (PrimaryExpr -> Operand .)
    DIVIDE          reduce using rule 81 (PrimaryExpr -> Operand .)
    MODULO          reduce using rule 81 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 81 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP             reduce using rule 81 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 81 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 81 (PrimaryExpr -> Operand .)
    RSQUARE         reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS_PLUS       reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS_MINUS     reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS_EQ         reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS_EQ        reduce using rule 81 (PrimaryExpr -> Operand .)
    STAR_EQ         reduce using rule 81 (PrimaryExpr -> Operand .)
    DIVIDE_EQ       reduce using rule 81 (PrimaryExpr -> Operand .)
    MODULO_EQ       reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP_EQ          reduce using rule 81 (PrimaryExpr -> Operand .)
    OR_EQ           reduce using rule 81 (PrimaryExpr -> Operand .)
    CARET_EQ        reduce using rule 81 (PrimaryExpr -> Operand .)
    EQ              reduce using rule 81 (PrimaryExpr -> Operand .)
    RROUND          reduce using rule 81 (PrimaryExpr -> Operand .)
    ELSE            reduce using rule 81 (PrimaryExpr -> Operand .)
    LCURLY          reduce using rule 81 (PrimaryExpr -> Operand .)
    RCURLY          reduce using rule 81 (PrimaryExpr -> Operand .)


state 86

    (128) unary_op -> NOT .

    PLUS            reduce using rule 128 (unary_op -> NOT .)
    MINUS           reduce using rule 128 (unary_op -> NOT .)
    NOT             reduce using rule 128 (unary_op -> NOT .)
    CARET           reduce using rule 128 (unary_op -> NOT .)
    STAR            reduce using rule 128 (unary_op -> NOT .)
    AMP             reduce using rule 128 (unary_op -> NOT .)
    LROUND          reduce using rule 128 (unary_op -> NOT .)
    ID              reduce using rule 128 (unary_op -> NOT .)
    INT_LIT         reduce using rule 128 (unary_op -> NOT .)
    FLOAT_LIT       reduce using rule 128 (unary_op -> NOT .)
    STRING_LIT      reduce using rule 128 (unary_op -> NOT .)
    BOOL_LIT        reduce using rule 128 (unary_op -> NOT .)
    CHAR_LIT        reduce using rule 128 (unary_op -> NOT .)
    NIL             reduce using rule 128 (unary_op -> NOT .)
    STRUCT          reduce using rule 128 (unary_op -> NOT .)
    LSQUARE         reduce using rule 128 (unary_op -> NOT .)


state 87

    (58) Operand -> Literal .

    DOT             reduce using rule 58 (Operand -> Literal .)
    LSQUARE         reduce using rule 58 (Operand -> Literal .)
    LROUND          reduce using rule 58 (Operand -> Literal .)
    OR_OR           reduce using rule 58 (Operand -> Literal .)
    AMP_AMP         reduce using rule 58 (Operand -> Literal .)
    EQ_EQ           reduce using rule 58 (Operand -> Literal .)
    NOT_EQ          reduce using rule 58 (Operand -> Literal .)
    LT              reduce using rule 58 (Operand -> Literal .)
    LE              reduce using rule 58 (Operand -> Literal .)
    GT              reduce using rule 58 (Operand -> Literal .)
    GE              reduce using rule 58 (Operand -> Literal .)
    PLUS            reduce using rule 58 (Operand -> Literal .)
    MINUS           reduce using rule 58 (Operand -> Literal .)
    OR              reduce using rule 58 (Operand -> Literal .)
    CARET           reduce using rule 58 (Operand -> Literal .)
    STAR            reduce using rule 58 (Operand -> Literal .)
    DIVIDE          reduce using rule 58 (Operand -> Literal .)
    MODULO          reduce using rule 58 (Operand -> Literal .)
    LSHIFT          reduce using rule 58 (Operand -> Literal .)
    RSHIFT          reduce using rule 58 (Operand -> Literal .)
    AMP             reduce using rule 58 (Operand -> Literal .)
    COMMA           reduce using rule 58 (Operand -> Literal .)
    SEMICOLON       reduce using rule 58 (Operand -> Literal .)
    RSQUARE         reduce using rule 58 (Operand -> Literal .)
    PLUS_PLUS       reduce using rule 58 (Operand -> Literal .)
    MINUS_MINUS     reduce using rule 58 (Operand -> Literal .)
    PLUS_EQ         reduce using rule 58 (Operand -> Literal .)
    MINUS_EQ        reduce using rule 58 (Operand -> Literal .)
    STAR_EQ         reduce using rule 58 (Operand -> Literal .)
    DIVIDE_EQ       reduce using rule 58 (Operand -> Literal .)
    MODULO_EQ       reduce using rule 58 (Operand -> Literal .)
    AMP_EQ          reduce using rule 58 (Operand -> Literal .)
    OR_EQ           reduce using rule 58 (Operand -> Literal .)
    CARET_EQ        reduce using rule 58 (Operand -> Literal .)
    EQ              reduce using rule 58 (Operand -> Literal .)
    RROUND          reduce using rule 58 (Operand -> Literal .)
    ELSE            reduce using rule 58 (Operand -> Literal .)
    LCURLY          reduce using rule 58 (Operand -> Literal .)
    RCURLY          reduce using rule 58 (Operand -> Literal .)


state 88

    (59) Operand -> OperandName .

    DOT             reduce using rule 59 (Operand -> OperandName .)
    LSQUARE         reduce using rule 59 (Operand -> OperandName .)
    LROUND          reduce using rule 59 (Operand -> OperandName .)
    OR_OR           reduce using rule 59 (Operand -> OperandName .)
    AMP_AMP         reduce using rule 59 (Operand -> OperandName .)
    EQ_EQ           reduce using rule 59 (Operand -> OperandName .)
    NOT_EQ          reduce using rule 59 (Operand -> OperandName .)
    LT              reduce using rule 59 (Operand -> OperandName .)
    LE              reduce using rule 59 (Operand -> OperandName .)
    GT              reduce using rule 59 (Operand -> OperandName .)
    GE              reduce using rule 59 (Operand -> OperandName .)
    PLUS            reduce using rule 59 (Operand -> OperandName .)
    MINUS           reduce using rule 59 (Operand -> OperandName .)
    OR              reduce using rule 59 (Operand -> OperandName .)
    CARET           reduce using rule 59 (Operand -> OperandName .)
    STAR            reduce using rule 59 (Operand -> OperandName .)
    DIVIDE          reduce using rule 59 (Operand -> OperandName .)
    MODULO          reduce using rule 59 (Operand -> OperandName .)
    LSHIFT          reduce using rule 59 (Operand -> OperandName .)
    RSHIFT          reduce using rule 59 (Operand -> OperandName .)
    AMP             reduce using rule 59 (Operand -> OperandName .)
    COMMA           reduce using rule 59 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 59 (Operand -> OperandName .)
    RSQUARE         reduce using rule 59 (Operand -> OperandName .)
    PLUS_PLUS       reduce using rule 59 (Operand -> OperandName .)
    MINUS_MINUS     reduce using rule 59 (Operand -> OperandName .)
    PLUS_EQ         reduce using rule 59 (Operand -> OperandName .)
    MINUS_EQ        reduce using rule 59 (Operand -> OperandName .)
    STAR_EQ         reduce using rule 59 (Operand -> OperandName .)
    DIVIDE_EQ       reduce using rule 59 (Operand -> OperandName .)
    MODULO_EQ       reduce using rule 59 (Operand -> OperandName .)
    AMP_EQ          reduce using rule 59 (Operand -> OperandName .)
    OR_EQ           reduce using rule 59 (Operand -> OperandName .)
    CARET_EQ        reduce using rule 59 (Operand -> OperandName .)
    EQ              reduce using rule 59 (Operand -> OperandName .)
    RROUND          reduce using rule 59 (Operand -> OperandName .)
    ELSE            reduce using rule 59 (Operand -> OperandName .)
    LCURLY          reduce using rule 59 (Operand -> OperandName .)
    RCURLY          reduce using rule 59 (Operand -> OperandName .)


state 89

    (60) Operand -> LROUND . Expression RROUND
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 171
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 90

    (61) Literal -> BasicLit .

    DOT             reduce using rule 61 (Literal -> BasicLit .)
    LSQUARE         reduce using rule 61 (Literal -> BasicLit .)
    LROUND          reduce using rule 61 (Literal -> BasicLit .)
    OR_OR           reduce using rule 61 (Literal -> BasicLit .)
    AMP_AMP         reduce using rule 61 (Literal -> BasicLit .)
    EQ_EQ           reduce using rule 61 (Literal -> BasicLit .)
    NOT_EQ          reduce using rule 61 (Literal -> BasicLit .)
    LT              reduce using rule 61 (Literal -> BasicLit .)
    LE              reduce using rule 61 (Literal -> BasicLit .)
    GT              reduce using rule 61 (Literal -> BasicLit .)
    GE              reduce using rule 61 (Literal -> BasicLit .)
    PLUS            reduce using rule 61 (Literal -> BasicLit .)
    MINUS           reduce using rule 61 (Literal -> BasicLit .)
    OR              reduce using rule 61 (Literal -> BasicLit .)
    CARET           reduce using rule 61 (Literal -> BasicLit .)
    STAR            reduce using rule 61 (Literal -> BasicLit .)
    DIVIDE          reduce using rule 61 (Literal -> BasicLit .)
    MODULO          reduce using rule 61 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 61 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 61 (Literal -> BasicLit .)
    AMP             reduce using rule 61 (Literal -> BasicLit .)
    COMMA           reduce using rule 61 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 61 (Literal -> BasicLit .)
    RSQUARE         reduce using rule 61 (Literal -> BasicLit .)
    PLUS_PLUS       reduce using rule 61 (Literal -> BasicLit .)
    MINUS_MINUS     reduce using rule 61 (Literal -> BasicLit .)
    PLUS_EQ         reduce using rule 61 (Literal -> BasicLit .)
    MINUS_EQ        reduce using rule 61 (Literal -> BasicLit .)
    STAR_EQ         reduce using rule 61 (Literal -> BasicLit .)
    DIVIDE_EQ       reduce using rule 61 (Literal -> BasicLit .)
    MODULO_EQ       reduce using rule 61 (Literal -> BasicLit .)
    AMP_EQ          reduce using rule 61 (Literal -> BasicLit .)
    OR_EQ           reduce using rule 61 (Literal -> BasicLit .)
    CARET_EQ        reduce using rule 61 (Literal -> BasicLit .)
    EQ              reduce using rule 61 (Literal -> BasicLit .)
    RROUND          reduce using rule 61 (Literal -> BasicLit .)
    ELSE            reduce using rule 61 (Literal -> BasicLit .)
    LCURLY          reduce using rule 61 (Literal -> BasicLit .)
    RCURLY          reduce using rule 61 (Literal -> BasicLit .)


state 91

    (62) Literal -> CompositeLit .

    DOT             reduce using rule 62 (Literal -> CompositeLit .)
    LSQUARE         reduce using rule 62 (Literal -> CompositeLit .)
    LROUND          reduce using rule 62 (Literal -> CompositeLit .)
    OR_OR           reduce using rule 62 (Literal -> CompositeLit .)
    AMP_AMP         reduce using rule 62 (Literal -> CompositeLit .)
    EQ_EQ           reduce using rule 62 (Literal -> CompositeLit .)
    NOT_EQ          reduce using rule 62 (Literal -> CompositeLit .)
    LT              reduce using rule 62 (Literal -> CompositeLit .)
    LE              reduce using rule 62 (Literal -> CompositeLit .)
    GT              reduce using rule 62 (Literal -> CompositeLit .)
    GE              reduce using rule 62 (Literal -> CompositeLit .)
    PLUS            reduce using rule 62 (Literal -> CompositeLit .)
    MINUS           reduce using rule 62 (Literal -> CompositeLit .)
    OR              reduce using rule 62 (Literal -> CompositeLit .)
    CARET           reduce using rule 62 (Literal -> CompositeLit .)
    STAR            reduce using rule 62 (Literal -> CompositeLit .)
    DIVIDE          reduce using rule 62 (Literal -> CompositeLit .)
    MODULO          reduce using rule 62 (Literal -> CompositeLit .)
    LSHIFT          reduce using rule 62 (Literal -> CompositeLit .)
    RSHIFT          reduce using rule 62 (Literal -> CompositeLit .)
    AMP             reduce using rule 62 (Literal -> CompositeLit .)
    COMMA           reduce using rule 62 (Literal -> CompositeLit .)
    SEMICOLON       reduce using rule 62 (Literal -> CompositeLit .)
    RSQUARE         reduce using rule 62 (Literal -> CompositeLit .)
    PLUS_PLUS       reduce using rule 62 (Literal -> CompositeLit .)
    MINUS_MINUS     reduce using rule 62 (Literal -> CompositeLit .)
    PLUS_EQ         reduce using rule 62 (Literal -> CompositeLit .)
    MINUS_EQ        reduce using rule 62 (Literal -> CompositeLit .)
    STAR_EQ         reduce using rule 62 (Literal -> CompositeLit .)
    DIVIDE_EQ       reduce using rule 62 (Literal -> CompositeLit .)
    MODULO_EQ       reduce using rule 62 (Literal -> CompositeLit .)
    AMP_EQ          reduce using rule 62 (Literal -> CompositeLit .)
    OR_EQ           reduce using rule 62 (Literal -> CompositeLit .)
    CARET_EQ        reduce using rule 62 (Literal -> CompositeLit .)
    EQ              reduce using rule 62 (Literal -> CompositeLit .)
    RROUND          reduce using rule 62 (Literal -> CompositeLit .)
    ELSE            reduce using rule 62 (Literal -> CompositeLit .)
    LCURLY          reduce using rule 62 (Literal -> CompositeLit .)
    RCURLY          reduce using rule 62 (Literal -> CompositeLit .)


state 92

    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for LCURLY resolved using rule 69 (OperandName -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    COMMA           reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    RSQUARE         reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)
    RROUND          reduce using rule 69 (OperandName -> ID .)
    ELSE            reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 69 (OperandName -> ID .)
    RCURLY          reduce using rule 69 (OperandName -> ID .)

  ! LCURLY          [ reduce using rule 74 (LiteralType -> ID .) ]


state 93

    (63) BasicLit -> INT_LIT .

    DOT             reduce using rule 63 (BasicLit -> INT_LIT .)
    LSQUARE         reduce using rule 63 (BasicLit -> INT_LIT .)
    LROUND          reduce using rule 63 (BasicLit -> INT_LIT .)
    OR_OR           reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP_AMP         reduce using rule 63 (BasicLit -> INT_LIT .)
    EQ_EQ           reduce using rule 63 (BasicLit -> INT_LIT .)
    NOT_EQ          reduce using rule 63 (BasicLit -> INT_LIT .)
    LT              reduce using rule 63 (BasicLit -> INT_LIT .)
    LE              reduce using rule 63 (BasicLit -> INT_LIT .)
    GT              reduce using rule 63 (BasicLit -> INT_LIT .)
    GE              reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS            reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS           reduce using rule 63 (BasicLit -> INT_LIT .)
    OR              reduce using rule 63 (BasicLit -> INT_LIT .)
    CARET           reduce using rule 63 (BasicLit -> INT_LIT .)
    STAR            reduce using rule 63 (BasicLit -> INT_LIT .)
    DIVIDE          reduce using rule 63 (BasicLit -> INT_LIT .)
    MODULO          reduce using rule 63 (BasicLit -> INT_LIT .)
    LSHIFT          reduce using rule 63 (BasicLit -> INT_LIT .)
    RSHIFT          reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP             reduce using rule 63 (BasicLit -> INT_LIT .)
    COMMA           reduce using rule 63 (BasicLit -> INT_LIT .)
    SEMICOLON       reduce using rule 63 (BasicLit -> INT_LIT .)
    RSQUARE         reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS_PLUS       reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS_MINUS     reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS_EQ         reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS_EQ        reduce using rule 63 (BasicLit -> INT_LIT .)
    STAR_EQ         reduce using rule 63 (BasicLit -> INT_LIT .)
    DIVIDE_EQ       reduce using rule 63 (BasicLit -> INT_LIT .)
    MODULO_EQ       reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP_EQ          reduce using rule 63 (BasicLit -> INT_LIT .)
    OR_EQ           reduce using rule 63 (BasicLit -> INT_LIT .)
    CARET_EQ        reduce using rule 63 (BasicLit -> INT_LIT .)
    EQ              reduce using rule 63 (BasicLit -> INT_LIT .)
    RROUND          reduce using rule 63 (BasicLit -> INT_LIT .)
    ELSE            reduce using rule 63 (BasicLit -> INT_LIT .)
    LCURLY          reduce using rule 63 (BasicLit -> INT_LIT .)
    RCURLY          reduce using rule 63 (BasicLit -> INT_LIT .)


state 94

    (64) BasicLit -> FLOAT_LIT .

    DOT             reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LSQUARE         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LROUND          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR_OR           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP_AMP         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    EQ_EQ           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    NOT_EQ          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LT              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LE              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    GT              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    GE              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    CARET           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    STAR            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    DIVIDE          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MODULO          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LSHIFT          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RSHIFT          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP             reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    COMMA           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    SEMICOLON       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RSQUARE         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS_PLUS       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS_MINUS     reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS_EQ         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS_EQ        reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    STAR_EQ         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    DIVIDE_EQ       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MODULO_EQ       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP_EQ          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR_EQ           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    CARET_EQ        reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    EQ              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RROUND          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    ELSE            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LCURLY          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RCURLY          reduce using rule 64 (BasicLit -> FLOAT_LIT .)


state 95

    (65) BasicLit -> STRING_LIT .

    DOT             reduce using rule 65 (BasicLit -> STRING_LIT .)
    LSQUARE         reduce using rule 65 (BasicLit -> STRING_LIT .)
    LROUND          reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR_OR           reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP_AMP         reduce using rule 65 (BasicLit -> STRING_LIT .)
    EQ_EQ           reduce using rule 65 (BasicLit -> STRING_LIT .)
    NOT_EQ          reduce using rule 65 (BasicLit -> STRING_LIT .)
    LT              reduce using rule 65 (BasicLit -> STRING_LIT .)
    LE              reduce using rule 65 (BasicLit -> STRING_LIT .)
    GT              reduce using rule 65 (BasicLit -> STRING_LIT .)
    GE              reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS            reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS           reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR              reduce using rule 65 (BasicLit -> STRING_LIT .)
    CARET           reduce using rule 65 (BasicLit -> STRING_LIT .)
    STAR            reduce using rule 65 (BasicLit -> STRING_LIT .)
    DIVIDE          reduce using rule 65 (BasicLit -> STRING_LIT .)
    MODULO          reduce using rule 65 (BasicLit -> STRING_LIT .)
    LSHIFT          reduce using rule 65 (BasicLit -> STRING_LIT .)
    RSHIFT          reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP             reduce using rule 65 (BasicLit -> STRING_LIT .)
    COMMA           reduce using rule 65 (BasicLit -> STRING_LIT .)
    SEMICOLON       reduce using rule 65 (BasicLit -> STRING_LIT .)
    RSQUARE         reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS_PLUS       reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS_MINUS     reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS_EQ         reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS_EQ        reduce using rule 65 (BasicLit -> STRING_LIT .)
    STAR_EQ         reduce using rule 65 (BasicLit -> STRING_LIT .)
    DIVIDE_EQ       reduce using rule 65 (BasicLit -> STRING_LIT .)
    MODULO_EQ       reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP_EQ          reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR_EQ           reduce using rule 65 (BasicLit -> STRING_LIT .)
    CARET_EQ        reduce using rule 65 (BasicLit -> STRING_LIT .)
    EQ              reduce using rule 65 (BasicLit -> STRING_LIT .)
    RROUND          reduce using rule 65 (BasicLit -> STRING_LIT .)
    ELSE            reduce using rule 65 (BasicLit -> STRING_LIT .)
    LCURLY          reduce using rule 65 (BasicLit -> STRING_LIT .)
    RCURLY          reduce using rule 65 (BasicLit -> STRING_LIT .)


state 96

    (66) BasicLit -> BOOL_LIT .

    DOT             reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LSQUARE         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LROUND          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR_OR           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP_AMP         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    EQ_EQ           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    NOT_EQ          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LT              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LE              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    GT              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    GE              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    CARET           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    STAR            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    DIVIDE          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MODULO          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LSHIFT          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RSHIFT          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP             reduce using rule 66 (BasicLit -> BOOL_LIT .)
    COMMA           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    SEMICOLON       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RSQUARE         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS_PLUS       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS_MINUS     reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS_EQ         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS_EQ        reduce using rule 66 (BasicLit -> BOOL_LIT .)
    STAR_EQ         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    DIVIDE_EQ       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MODULO_EQ       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP_EQ          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR_EQ           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    CARET_EQ        reduce using rule 66 (BasicLit -> BOOL_LIT .)
    EQ              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RROUND          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    ELSE            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LCURLY          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RCURLY          reduce using rule 66 (BasicLit -> BOOL_LIT .)


state 97

    (67) BasicLit -> CHAR_LIT .

    DOT             reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LSQUARE         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LROUND          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR_OR           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP_AMP         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    EQ_EQ           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    NOT_EQ          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LT              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LE              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    GT              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    GE              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    CARET           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    STAR            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    DIVIDE          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MODULO          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LSHIFT          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RSHIFT          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP             reduce using rule 67 (BasicLit -> CHAR_LIT .)
    COMMA           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    SEMICOLON       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RSQUARE         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS_PLUS       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS_MINUS     reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS_EQ         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS_EQ        reduce using rule 67 (BasicLit -> CHAR_LIT .)
    STAR_EQ         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    DIVIDE_EQ       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MODULO_EQ       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP_EQ          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR_EQ           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    CARET_EQ        reduce using rule 67 (BasicLit -> CHAR_LIT .)
    EQ              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RROUND          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    ELSE            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LCURLY          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RCURLY          reduce using rule 67 (BasicLit -> CHAR_LIT .)


state 98

    (68) BasicLit -> NIL .

    DOT             reduce using rule 68 (BasicLit -> NIL .)
    LSQUARE         reduce using rule 68 (BasicLit -> NIL .)
    LROUND          reduce using rule 68 (BasicLit -> NIL .)
    OR_OR           reduce using rule 68 (BasicLit -> NIL .)
    AMP_AMP         reduce using rule 68 (BasicLit -> NIL .)
    EQ_EQ           reduce using rule 68 (BasicLit -> NIL .)
    NOT_EQ          reduce using rule 68 (BasicLit -> NIL .)
    LT              reduce using rule 68 (BasicLit -> NIL .)
    LE              reduce using rule 68 (BasicLit -> NIL .)
    GT              reduce using rule 68 (BasicLit -> NIL .)
    GE              reduce using rule 68 (BasicLit -> NIL .)
    PLUS            reduce using rule 68 (BasicLit -> NIL .)
    MINUS           reduce using rule 68 (BasicLit -> NIL .)
    OR              reduce using rule 68 (BasicLit -> NIL .)
    CARET           reduce using rule 68 (BasicLit -> NIL .)
    STAR            reduce using rule 68 (BasicLit -> NIL .)
    DIVIDE          reduce using rule 68 (BasicLit -> NIL .)
    MODULO          reduce using rule 68 (BasicLit -> NIL .)
    LSHIFT          reduce using rule 68 (BasicLit -> NIL .)
    RSHIFT          reduce using rule 68 (BasicLit -> NIL .)
    AMP             reduce using rule 68 (BasicLit -> NIL .)
    COMMA           reduce using rule 68 (BasicLit -> NIL .)
    SEMICOLON       reduce using rule 68 (BasicLit -> NIL .)
    RSQUARE         reduce using rule 68 (BasicLit -> NIL .)
    PLUS_PLUS       reduce using rule 68 (BasicLit -> NIL .)
    MINUS_MINUS     reduce using rule 68 (BasicLit -> NIL .)
    PLUS_EQ         reduce using rule 68 (BasicLit -> NIL .)
    MINUS_EQ        reduce using rule 68 (BasicLit -> NIL .)
    STAR_EQ         reduce using rule 68 (BasicLit -> NIL .)
    DIVIDE_EQ       reduce using rule 68 (BasicLit -> NIL .)
    MODULO_EQ       reduce using rule 68 (BasicLit -> NIL .)
    AMP_EQ          reduce using rule 68 (BasicLit -> NIL .)
    OR_EQ           reduce using rule 68 (BasicLit -> NIL .)
    CARET_EQ        reduce using rule 68 (BasicLit -> NIL .)
    EQ              reduce using rule 68 (BasicLit -> NIL .)
    RROUND          reduce using rule 68 (BasicLit -> NIL .)
    ELSE            reduce using rule 68 (BasicLit -> NIL .)
    LCURLY          reduce using rule 68 (BasicLit -> NIL .)
    RCURLY          reduce using rule 68 (BasicLit -> NIL .)


state 99

    (70) CompositeLit -> LiteralType . LiteralValue
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 66

    LiteralValue                   shift and go to state 172
    lcurly                         shift and go to state 173

state 100

    (71) LiteralType -> StructType .

    LCURLY          reduce using rule 71 (LiteralType -> StructType .)


state 101

    (72) LiteralType -> ArrayType .

    LCURLY          reduce using rule 72 (LiteralType -> ArrayType .)


state 102

    (73) LiteralType -> SliceType .

    LCURLY          reduce using rule 73 (LiteralType -> SliceType .)


state 103

    (33) IdentifierList -> IdentifierList COMMA ID .

    EQ              reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    COMMA           reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    ID              reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    DATA_TYPE       reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    LSQUARE         reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    STRUCT          reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    STAR            reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    ASSIGN          reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)


state 104

    (11) ArrayType -> LSQUARE ArrayLength . RSQUARE ElementType

    RSQUARE         shift and go to state 174


state 105

    (13) SliceType -> LSQUARE RSQUARE . ElementType
    (14) ElementType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    ElementType                    shift and go to state 175
    Type                           shift and go to state 176
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 106

    (12) ArrayLength -> Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    RSQUARE         reduce using rule 12 (ArrayLength -> Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 107

    (17) StructType -> STRUCT lcurly . FieldDeclList rcurly
    (18) FieldDeclList -> . FieldDeclList FieldDecl SEMICOLON
    (19) FieldDeclList -> . FieldDecl SEMICOLON
    (20) FieldDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 35

    FieldDeclList                  shift and go to state 177
    FieldDecl                      shift and go to state 178
    IdentifierList                 shift and go to state 179

state 108

    (15) PointerType -> STAR BaseType .

    SEMICOLON       reduce using rule 15 (PointerType -> STAR BaseType .)
    EQ              reduce using rule 15 (PointerType -> STAR BaseType .)
    LCURLY          reduce using rule 15 (PointerType -> STAR BaseType .)
    FUNC            reduce using rule 15 (PointerType -> STAR BaseType .)
    CONST           reduce using rule 15 (PointerType -> STAR BaseType .)
    TYPE            reduce using rule 15 (PointerType -> STAR BaseType .)
    VAR             reduce using rule 15 (PointerType -> STAR BaseType .)
    $end            reduce using rule 15 (PointerType -> STAR BaseType .)
    RROUND          reduce using rule 15 (PointerType -> STAR BaseType .)
    COMMA           reduce using rule 15 (PointerType -> STAR BaseType .)


state 109

    (16) BaseType -> Type .

    SEMICOLON       reduce using rule 16 (BaseType -> Type .)
    EQ              reduce using rule 16 (BaseType -> Type .)
    LCURLY          reduce using rule 16 (BaseType -> Type .)
    FUNC            reduce using rule 16 (BaseType -> Type .)
    CONST           reduce using rule 16 (BaseType -> Type .)
    TYPE            reduce using rule 16 (BaseType -> Type .)
    VAR             reduce using rule 16 (BaseType -> Type .)
    $end            reduce using rule 16 (BaseType -> Type .)
    RROUND          reduce using rule 16 (BaseType -> Type .)
    COMMA           reduce using rule 16 (BaseType -> Type .)


state 110

    (40) VarSpec -> IdentifierList Type EQ . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 180
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 111

    (21) Block -> lcurly StatementList . rcurly
    (23) StatementList -> StatementList . Statement SEMICOLON
    (2) rcurly -> . RCURLY
    (132) Statement -> . Declaration
    (133) Statement -> . LabeledStmt
    (134) Statement -> . ReturnStmt
    (135) Statement -> . BreakStmt
    (136) Statement -> . ContinueStmt
    (137) Statement -> . GotoStmt
    (138) Statement -> . Block
    (139) Statement -> . IfStmt
    (140) Statement -> . ForStmt
    (141) Statement -> . SimpleStmt SEMICOLON
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (147) LabeledStmt -> . Label COLON Statement
    (176) ReturnStmt -> . RETURN SEMICOLON
    (177) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (178) BreakStmt -> . BREAK SEMICOLON
    (179) BreakStmt -> . BREAK Label SEMICOLON
    (180) ContinueStmt -> . CONTINUE SEMICOLON
    (181) ContinueStmt -> . CONTINUE Label SEMICOLON
    (182) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (183) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (184) IfStmt -> . IF Expression Block
    (185) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (186) IfStmt -> . IF Expression ElseStmt
    (161) ForStmt -> . ForLoop Block
    (162) ForStmt -> . WhileLoop Block
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec
    (148) Label -> . ID
    (1) lcurly -> . LCURLY
    (163) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (164) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (165) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (166) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (167) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR SEMICOLON SEMICOLON
    (171) WhileLoop -> . FOR Condition Block
    (172) WhileLoop -> . FOR Block
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 114
    RETURN          shift and go to state 126
    BREAK           shift and go to state 128
    CONTINUE        shift and go to state 129
    GOTO            shift and go to state 130
    IF              shift and go to state 131
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 139
    LCURLY          shift and go to state 66
    FOR             shift and go to state 140
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    lcurly                         shift and go to state 65
    rcurly                         shift and go to state 181
    Statement                      shift and go to state 182
    Declaration                    shift and go to state 115
    LabeledStmt                    shift and go to state 116
    ReturnStmt                     shift and go to state 117
    BreakStmt                      shift and go to state 118
    ContinueStmt                   shift and go to state 119
    GotoStmt                       shift and go to state 120
    Block                          shift and go to state 121
    IfStmt                         shift and go to state 122
    ForStmt                        shift and go to state 123
    SimpleStmt                     shift and go to state 124
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    Label                          shift and go to state 125
    ExpressionList                 shift and go to state 127
    Expression                     shift and go to state 132
    ForLoop                        shift and go to state 133
    WhileLoop                      shift and go to state 134
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 112

    (22) Block -> lcurly rcurly .

    FUNC            reduce using rule 22 (Block -> lcurly rcurly .)
    CONST           reduce using rule 22 (Block -> lcurly rcurly .)
    TYPE            reduce using rule 22 (Block -> lcurly rcurly .)
    VAR             reduce using rule 22 (Block -> lcurly rcurly .)
    $end            reduce using rule 22 (Block -> lcurly rcurly .)
    SEMICOLON       reduce using rule 22 (Block -> lcurly rcurly .)
    LCURLY          reduce using rule 22 (Block -> lcurly rcurly .)


state 113

    (24) StatementList -> Statement . SEMICOLON

    SEMICOLON       shift and go to state 183


state 114

    (2) rcurly -> RCURLY .

    FUNC            reduce using rule 2 (rcurly -> RCURLY .)
    CONST           reduce using rule 2 (rcurly -> RCURLY .)
    TYPE            reduce using rule 2 (rcurly -> RCURLY .)
    VAR             reduce using rule 2 (rcurly -> RCURLY .)
    $end            reduce using rule 2 (rcurly -> RCURLY .)
    SEMICOLON       reduce using rule 2 (rcurly -> RCURLY .)
    LCURLY          reduce using rule 2 (rcurly -> RCURLY .)
    DOT             reduce using rule 2 (rcurly -> RCURLY .)
    LSQUARE         reduce using rule 2 (rcurly -> RCURLY .)
    LROUND          reduce using rule 2 (rcurly -> RCURLY .)
    OR_OR           reduce using rule 2 (rcurly -> RCURLY .)
    AMP_AMP         reduce using rule 2 (rcurly -> RCURLY .)
    EQ_EQ           reduce using rule 2 (rcurly -> RCURLY .)
    NOT_EQ          reduce using rule 2 (rcurly -> RCURLY .)
    LT              reduce using rule 2 (rcurly -> RCURLY .)
    LE              reduce using rule 2 (rcurly -> RCURLY .)
    GT              reduce using rule 2 (rcurly -> RCURLY .)
    GE              reduce using rule 2 (rcurly -> RCURLY .)
    PLUS            reduce using rule 2 (rcurly -> RCURLY .)
    MINUS           reduce using rule 2 (rcurly -> RCURLY .)
    OR              reduce using rule 2 (rcurly -> RCURLY .)
    CARET           reduce using rule 2 (rcurly -> RCURLY .)
    STAR            reduce using rule 2 (rcurly -> RCURLY .)
    DIVIDE          reduce using rule 2 (rcurly -> RCURLY .)
    MODULO          reduce using rule 2 (rcurly -> RCURLY .)
    LSHIFT          reduce using rule 2 (rcurly -> RCURLY .)
    RSHIFT          reduce using rule 2 (rcurly -> RCURLY .)
    AMP             reduce using rule 2 (rcurly -> RCURLY .)
    COMMA           reduce using rule 2 (rcurly -> RCURLY .)
    RSQUARE         reduce using rule 2 (rcurly -> RCURLY .)
    PLUS_PLUS       reduce using rule 2 (rcurly -> RCURLY .)
    MINUS_MINUS     reduce using rule 2 (rcurly -> RCURLY .)
    PLUS_EQ         reduce using rule 2 (rcurly -> RCURLY .)
    MINUS_EQ        reduce using rule 2 (rcurly -> RCURLY .)
    STAR_EQ         reduce using rule 2 (rcurly -> RCURLY .)
    DIVIDE_EQ       reduce using rule 2 (rcurly -> RCURLY .)
    MODULO_EQ       reduce using rule 2 (rcurly -> RCURLY .)
    AMP_EQ          reduce using rule 2 (rcurly -> RCURLY .)
    OR_EQ           reduce using rule 2 (rcurly -> RCURLY .)
    CARET_EQ        reduce using rule 2 (rcurly -> RCURLY .)
    EQ              reduce using rule 2 (rcurly -> RCURLY .)
    RROUND          reduce using rule 2 (rcurly -> RCURLY .)
    ELSE            reduce using rule 2 (rcurly -> RCURLY .)
    RCURLY          reduce using rule 2 (rcurly -> RCURLY .)


state 115

    (132) Statement -> Declaration .

    SEMICOLON       reduce using rule 132 (Statement -> Declaration .)


state 116

    (133) Statement -> LabeledStmt .

    SEMICOLON       reduce using rule 133 (Statement -> LabeledStmt .)


state 117

    (134) Statement -> ReturnStmt .

    SEMICOLON       reduce using rule 134 (Statement -> ReturnStmt .)


state 118

    (135) Statement -> BreakStmt .

    SEMICOLON       reduce using rule 135 (Statement -> BreakStmt .)


state 119

    (136) Statement -> ContinueStmt .

    SEMICOLON       reduce using rule 136 (Statement -> ContinueStmt .)


state 120

    (137) Statement -> GotoStmt .

    SEMICOLON       reduce using rule 137 (Statement -> GotoStmt .)


state 121

    (138) Statement -> Block .

    SEMICOLON       reduce using rule 138 (Statement -> Block .)


state 122

    (139) Statement -> IfStmt .

    SEMICOLON       reduce using rule 139 (Statement -> IfStmt .)


state 123

    (140) Statement -> ForStmt .

    SEMICOLON       reduce using rule 140 (Statement -> ForStmt .)


state 124

    (141) Statement -> SimpleStmt . SEMICOLON

    SEMICOLON       shift and go to state 184


state 125

    (147) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 185


state 126

    (176) ReturnStmt -> RETURN . SEMICOLON
    (177) ReturnStmt -> RETURN . ExpressionList SEMICOLON
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 186
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 187
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 127

    (151) Assignment -> ExpressionList . assign_op ExpressionList
    (35) ExpressionList -> ExpressionList . COMMA Expression
    (152) assign_op -> . PLUS_EQ
    (153) assign_op -> . MINUS_EQ
    (154) assign_op -> . STAR_EQ
    (155) assign_op -> . DIVIDE_EQ
    (156) assign_op -> . MODULO_EQ
    (157) assign_op -> . AMP_EQ
    (158) assign_op -> . OR_EQ
    (159) assign_op -> . CARET_EQ
    (160) assign_op -> . EQ

    COMMA           shift and go to state 145
    PLUS_EQ         shift and go to state 189
    MINUS_EQ        shift and go to state 190
    STAR_EQ         shift and go to state 191
    DIVIDE_EQ       shift and go to state 192
    MODULO_EQ       shift and go to state 193
    AMP_EQ          shift and go to state 194
    OR_EQ           shift and go to state 195
    CARET_EQ        shift and go to state 196
    EQ              shift and go to state 197

    assign_op                      shift and go to state 188

state 128

    (178) BreakStmt -> BREAK . SEMICOLON
    (179) BreakStmt -> BREAK . Label SEMICOLON
    (148) Label -> . ID

    SEMICOLON       shift and go to state 198
    ID              shift and go to state 200

    Label                          shift and go to state 199

state 129

    (180) ContinueStmt -> CONTINUE . SEMICOLON
    (181) ContinueStmt -> CONTINUE . Label SEMICOLON
    (148) Label -> . ID

    SEMICOLON       shift and go to state 201
    ID              shift and go to state 200

    Label                          shift and go to state 202

state 130

    (182) GotoStmt -> GOTO . Label SEMICOLON
    (148) Label -> . ID

    ID              shift and go to state 200

    Label                          shift and go to state 203

state 131

    (183) IfStmt -> IF . SimpleStmt SEMICOLON Expression Block
    (184) IfStmt -> IF . Expression Block
    (185) IfStmt -> IF . SimpleStmt SEMICOLON Expression ElseStmt
    (186) IfStmt -> IF . Expression ElseStmt
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    SimpleStmt                     shift and go to state 204
    Expression                     shift and go to state 205
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    UnaryExpr                      shift and go to state 77
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 132

    (146) ExpressionStmt -> Expression .
    (149) IncDecStmt -> Expression . PLUS_PLUS
    (150) IncDecStmt -> Expression . MINUS_MINUS
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression
    (36) ExpressionList -> Expression .

    SEMICOLON       reduce using rule 146 (ExpressionStmt -> Expression .)
    LCURLY          reduce using rule 146 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 207
    MINUS_MINUS     shift and go to state 208
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)


state 133

    (161) ForStmt -> ForLoop . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 66

    Block                          shift and go to state 209
    lcurly                         shift and go to state 65

state 134

    (162) ForStmt -> WhileLoop . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 66

    Block                          shift and go to state 210
    lcurly                         shift and go to state 65

state 135

    (142) SimpleStmt -> ExpressionStmt .

    SEMICOLON       reduce using rule 142 (SimpleStmt -> ExpressionStmt .)
    LCURLY          reduce using rule 142 (SimpleStmt -> ExpressionStmt .)


state 136

    (143) SimpleStmt -> IncDecStmt .

    SEMICOLON       reduce using rule 143 (SimpleStmt -> IncDecStmt .)
    LCURLY          reduce using rule 143 (SimpleStmt -> IncDecStmt .)


state 137

    (144) SimpleStmt -> Assignment .

    SEMICOLON       reduce using rule 144 (SimpleStmt -> Assignment .)
    LCURLY          reduce using rule 144 (SimpleStmt -> Assignment .)


state 138

    (145) SimpleStmt -> ShortVarDecl .

    SEMICOLON       reduce using rule 145 (SimpleStmt -> ShortVarDecl .)
    LCURLY          reduce using rule 145 (SimpleStmt -> ShortVarDecl .)


state 139

    (148) Label -> ID .
    (34) IdentifierList -> ID .
    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (IdentifierList -> ID .)
    COLON           reduce using rule 148 (Label -> ID .)
    ASSIGN          reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 74 (LiteralType -> ID .)

  ! COMMA           [ reduce using rule 69 (OperandName -> ID .) ]


state 140

    (163) ForLoop -> FOR . InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (164) ForLoop -> FOR . InitStmt SEMICOLON Condition SEMICOLON
    (165) ForLoop -> FOR . InitStmt SEMICOLON SEMICOLON PostStmt
    (166) ForLoop -> FOR . InitStmt SEMICOLON SEMICOLON
    (167) ForLoop -> FOR . SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> FOR . SEMICOLON Condition SEMICOLON
    (169) ForLoop -> FOR . SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> FOR . SEMICOLON SEMICOLON
    (171) WhileLoop -> FOR . Condition Block
    (172) WhileLoop -> FOR . Block
    (173) InitStmt -> . SimpleStmt
    (175) Condition -> . Expression
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (1) lcurly -> . LCURLY
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 212
    LCURLY          shift and go to state 66
    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    InitStmt                       shift and go to state 211
    Condition                      shift and go to state 213
    Block                          shift and go to state 214
    SimpleStmt                     shift and go to state 215
    Expression                     shift and go to state 216
    lcurly                         shift and go to state 65
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    UnaryExpr                      shift and go to state 77
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 141

    (41) ShortVarDecl -> IdentifierList . ASSIGN ExpressionList SEMICOLON
    (33) IdentifierList -> IdentifierList . COMMA ID

    ASSIGN          shift and go to state 217
    COMMA           shift and go to state 48


state 142

    (47) Parameters -> LROUND ParameterList RROUND .

    ID              reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    DATA_TYPE       reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    LSQUARE         reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    STRUCT          reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    STAR            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    SEMICOLON       reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    LCURLY          reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    FUNC            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    CONST           reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    TYPE            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    VAR             reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    $end            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)


state 143

    (49) ParameterList -> ParameterList COMMA . ParameterDecl
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 35

    ParameterDecl                  shift and go to state 218
    IdentifierList                 shift and go to state 46

state 144

    (55) MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .

    FUNC            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    CONST           reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    TYPE            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    VAR             reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    $end            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)


state 145

    (35) ExpressionList -> ExpressionList COMMA . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 219
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 146

    (90) Expression -> Expression OR_OR . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 220
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 147

    (91) Expression -> Expression AMP_AMP . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 221
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 148

    (92) Expression -> Expression EQ_EQ . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 222
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 149

    (93) Expression -> Expression NOT_EQ . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 223
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 150

    (94) Expression -> Expression LT . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 224
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 151

    (95) Expression -> Expression LE . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 225
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 152

    (96) Expression -> Expression GT . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 226
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 153

    (97) Expression -> Expression GE . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 227
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 154

    (98) Expression -> Expression PLUS . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 228
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 155

    (99) Expression -> Expression MINUS . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 229
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 156

    (100) Expression -> Expression OR . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 230
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 157

    (101) Expression -> Expression CARET . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 231
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 158

    (102) Expression -> Expression STAR . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 232
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 159

    (103) Expression -> Expression DIVIDE . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 233
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 160

    (104) Expression -> Expression MODULO . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 234
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 161

    (105) Expression -> Expression LSHIFT . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 235
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 162

    (106) Expression -> Expression RSHIFT . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 236
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 163

    (107) Expression -> Expression AMP . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 237
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 164

    (82) PrimaryExpr -> PrimaryExpr Selector .

    DOT             reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LSQUARE         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LROUND          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_OR           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP_AMP         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ_EQ           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    NOT_EQ          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LT              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LE              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    GT              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    GE              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    CARET           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MODULO          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP             reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RSQUARE         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_PLUS       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_MINUS     reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_EQ         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_EQ        reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR_EQ         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE_EQ       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MODULO_EQ       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP_EQ          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_EQ           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    CARET_EQ        reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RROUND          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    ELSE            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LCURLY          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RCURLY          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)


state 165

    (83) PrimaryExpr -> PrimaryExpr Index .

    DOT             reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LSQUARE         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LROUND          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR_OR           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP_AMP         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    EQ_EQ           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    NOT_EQ          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LT              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LE              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    GT              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    GE              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    CARET           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    STAR            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDE          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MODULO          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LSHIFT          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RSHIFT          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP             reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    COMMA           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    SEMICOLON       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RSQUARE         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS_PLUS       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS_MINUS     reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS_EQ         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS_EQ        reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    STAR_EQ         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDE_EQ       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MODULO_EQ       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP_EQ          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR_EQ           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    CARET_EQ        reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    EQ              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RROUND          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    ELSE            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LCURLY          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RCURLY          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)


state 166

    (84) PrimaryExpr -> PrimaryExpr Arguments .

    DOT             reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSQUARE         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LROUND          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_OR           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP_AMP         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQ_EQ           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    NOT_EQ          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LT              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LE              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    GT              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    GE              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    CARET           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MODULO          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP             reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    COMMA           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    SEMICOLON       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSQUARE         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_PLUS       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_MINUS     reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_EQ         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_EQ        reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR_EQ         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE_EQ       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MODULO_EQ       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP_EQ          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_EQ           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    CARET_EQ        reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQ              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RROUND          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    ELSE            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LCURLY          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RCURLY          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)


state 167

    (85) Selector -> DOT . ID

    ID              shift and go to state 238


state 168

    (86) Index -> LSQUARE . Expression RSQUARE
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 239
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 169

    (87) Arguments -> LROUND . ExpressionList RROUND
    (88) Arguments -> LROUND . RROUND
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RROUND          shift and go to state 241
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 240
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 170

    (109) UnaryExpr -> unary_op UnaryExpr .

    OR_OR           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    AMP_AMP         reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    EQ_EQ           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    NOT_EQ          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    LT              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    LE              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    GT              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    GE              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS            reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    OR              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    CARET           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    STAR            reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    DIVIDE          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    MODULO          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    LSHIFT          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    RSHIFT          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    AMP             reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    COMMA           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    SEMICOLON       reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    RSQUARE         reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS_PLUS       reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS_MINUS     reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS_EQ         reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS_EQ        reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    STAR_EQ         reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    DIVIDE_EQ       reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    MODULO_EQ       reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    AMP_EQ          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    OR_EQ           reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    CARET_EQ        reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    EQ              reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    RROUND          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    ELSE            reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    LCURLY          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)
    RCURLY          reduce using rule 109 (UnaryExpr -> unary_op UnaryExpr .)


state 171

    (60) Operand -> LROUND Expression . RROUND
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    RROUND          shift and go to state 242
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 172

    (70) CompositeLit -> LiteralType LiteralValue .

    DOT             reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LSQUARE         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LROUND          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR_OR           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP_AMP         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    EQ_EQ           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    NOT_EQ          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LT              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LE              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    GT              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    GE              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    CARET           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    STAR            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    DIVIDE          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MODULO          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LSHIFT          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RSHIFT          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP             reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    COMMA           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    SEMICOLON       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RSQUARE         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS_PLUS       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS_MINUS     reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS_EQ         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS_EQ        reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    STAR_EQ         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    DIVIDE_EQ       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MODULO_EQ       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP_EQ          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR_EQ           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    CARET_EQ        reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    EQ              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RROUND          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    ELSE            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LCURLY          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RCURLY          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)


state 173

    (75) LiteralValue -> lcurly . rcurly
    (76) LiteralValue -> lcurly . ElementList rcurly
    (2) rcurly -> . RCURLY
    (77) ElementList -> . Element
    (78) ElementList -> . ElementList COMMA Element
    (79) Element -> . Expression
    (80) Element -> . LiteralValue
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (1) lcurly -> . LCURLY
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 114
    LCURLY          shift and go to state 66
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    lcurly                         shift and go to state 173
    rcurly                         shift and go to state 243
    ElementList                    shift and go to state 244
    Element                        shift and go to state 245
    Expression                     shift and go to state 246
    LiteralValue                   shift and go to state 247
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 174

    (11) ArrayType -> LSQUARE ArrayLength RSQUARE . ElementType
    (14) ElementType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    ElementType                    shift and go to state 248
    Type                           shift and go to state 176
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 175

    (13) SliceType -> LSQUARE RSQUARE ElementType .

    SEMICOLON       reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    EQ              reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    LCURLY          reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    FUNC            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    CONST           reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    TYPE            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    VAR             reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    $end            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    RROUND          reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    COMMA           reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)


state 176

    (14) ElementType -> Type .

    SEMICOLON       reduce using rule 14 (ElementType -> Type .)
    EQ              reduce using rule 14 (ElementType -> Type .)
    LCURLY          reduce using rule 14 (ElementType -> Type .)
    FUNC            reduce using rule 14 (ElementType -> Type .)
    CONST           reduce using rule 14 (ElementType -> Type .)
    TYPE            reduce using rule 14 (ElementType -> Type .)
    VAR             reduce using rule 14 (ElementType -> Type .)
    $end            reduce using rule 14 (ElementType -> Type .)
    RROUND          reduce using rule 14 (ElementType -> Type .)
    COMMA           reduce using rule 14 (ElementType -> Type .)


state 177

    (17) StructType -> STRUCT lcurly FieldDeclList . rcurly
    (18) FieldDeclList -> FieldDeclList . FieldDecl SEMICOLON
    (2) rcurly -> . RCURLY
    (20) FieldDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    RCURLY          shift and go to state 114
    ID              shift and go to state 35

    rcurly                         shift and go to state 249
    FieldDecl                      shift and go to state 250
    IdentifierList                 shift and go to state 179

state 178

    (19) FieldDeclList -> FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 251


state 179

    (20) FieldDecl -> IdentifierList . Type
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 48
    ID              shift and go to state 49
    DATA_TYPE       shift and go to state 53
    LSQUARE         shift and go to state 58
    STRUCT          shift and go to state 59
    STAR            shift and go to state 60

    Type                           shift and go to state 252
    TypeName                       shift and go to state 51
    TypeLit                        shift and go to state 52
    ArrayType                      shift and go to state 54
    StructType                     shift and go to state 55
    PointerType                    shift and go to state 56
    SliceType                      shift and go to state 57

state 180

    (40) VarSpec -> IdentifierList Type EQ ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 40 (VarSpec -> IdentifierList Type EQ ExpressionList .)
    COMMA           shift and go to state 145


state 181

    (21) Block -> lcurly StatementList rcurly .

    FUNC            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    CONST           reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    TYPE            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    VAR             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    $end            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    SEMICOLON       reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    LCURLY          reduce using rule 21 (Block -> lcurly StatementList rcurly .)


state 182

    (23) StatementList -> StatementList Statement . SEMICOLON

    SEMICOLON       shift and go to state 253


state 183

    (24) StatementList -> Statement SEMICOLON .

    RCURLY          reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    RETURN          reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    BREAK           reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    CONTINUE        reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    GOTO            reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    IF              reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    CONST           reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    TYPE            reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    VAR             reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    ID              reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    LCURLY          reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    FOR             reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    PLUS            reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    MINUS           reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    NOT             reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    CARET           reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    STAR            reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    AMP             reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    LROUND          reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    INT_LIT         reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    FLOAT_LIT       reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    STRING_LIT      reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    BOOL_LIT        reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    CHAR_LIT        reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    NIL             reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    STRUCT          reduce using rule 24 (StatementList -> Statement SEMICOLON .)
    LSQUARE         reduce using rule 24 (StatementList -> Statement SEMICOLON .)


state 184

    (141) Statement -> SimpleStmt SEMICOLON .

    SEMICOLON       reduce using rule 141 (Statement -> SimpleStmt SEMICOLON .)


state 185

    (147) LabeledStmt -> Label COLON . Statement
    (132) Statement -> . Declaration
    (133) Statement -> . LabeledStmt
    (134) Statement -> . ReturnStmt
    (135) Statement -> . BreakStmt
    (136) Statement -> . ContinueStmt
    (137) Statement -> . GotoStmt
    (138) Statement -> . Block
    (139) Statement -> . IfStmt
    (140) Statement -> . ForStmt
    (141) Statement -> . SimpleStmt SEMICOLON
    (25) Declaration -> . ConstDecl SEMICOLON
    (26) Declaration -> . TypeDecl SEMICOLON
    (27) Declaration -> . VarDecl SEMICOLON
    (147) LabeledStmt -> . Label COLON Statement
    (176) ReturnStmt -> . RETURN SEMICOLON
    (177) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (178) BreakStmt -> . BREAK SEMICOLON
    (179) BreakStmt -> . BREAK Label SEMICOLON
    (180) ContinueStmt -> . CONTINUE SEMICOLON
    (181) ContinueStmt -> . CONTINUE Label SEMICOLON
    (182) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (183) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (184) IfStmt -> . IF Expression Block
    (185) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (186) IfStmt -> . IF Expression ElseStmt
    (161) ForStmt -> . ForLoop Block
    (162) ForStmt -> . WhileLoop Block
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec
    (37) TypeDecl -> . TYPE ID Type
    (38) VarDecl -> . VAR VarSpec
    (148) Label -> . ID
    (1) lcurly -> . LCURLY
    (163) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (164) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (165) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (166) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (167) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR SEMICOLON SEMICOLON
    (171) WhileLoop -> . FOR Condition Block
    (172) WhileLoop -> . FOR Block
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RETURN          shift and go to state 126
    BREAK           shift and go to state 128
    CONTINUE        shift and go to state 129
    GOTO            shift and go to state 130
    IF              shift and go to state 131
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 139
    LCURLY          shift and go to state 66
    FOR             shift and go to state 140
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Label                          shift and go to state 125
    Statement                      shift and go to state 254
    Declaration                    shift and go to state 115
    LabeledStmt                    shift and go to state 116
    ReturnStmt                     shift and go to state 117
    BreakStmt                      shift and go to state 118
    ContinueStmt                   shift and go to state 119
    GotoStmt                       shift and go to state 120
    Block                          shift and go to state 121
    IfStmt                         shift and go to state 122
    ForStmt                        shift and go to state 123
    SimpleStmt                     shift and go to state 124
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    ExpressionList                 shift and go to state 127
    lcurly                         shift and go to state 65
    Expression                     shift and go to state 132
    ForLoop                        shift and go to state 133
    WhileLoop                      shift and go to state 134
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 186

    (176) ReturnStmt -> RETURN SEMICOLON .

    SEMICOLON       reduce using rule 176 (ReturnStmt -> RETURN SEMICOLON .)


state 187

    (177) ReturnStmt -> RETURN ExpressionList . SEMICOLON
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       shift and go to state 255
    COMMA           shift and go to state 145


state 188

    (151) Assignment -> ExpressionList assign_op . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 256
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 189

    (152) assign_op -> PLUS_EQ .

    PLUS            reduce using rule 152 (assign_op -> PLUS_EQ .)
    MINUS           reduce using rule 152 (assign_op -> PLUS_EQ .)
    NOT             reduce using rule 152 (assign_op -> PLUS_EQ .)
    CARET           reduce using rule 152 (assign_op -> PLUS_EQ .)
    STAR            reduce using rule 152 (assign_op -> PLUS_EQ .)
    AMP             reduce using rule 152 (assign_op -> PLUS_EQ .)
    LROUND          reduce using rule 152 (assign_op -> PLUS_EQ .)
    ID              reduce using rule 152 (assign_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 152 (assign_op -> PLUS_EQ .)
    FLOAT_LIT       reduce using rule 152 (assign_op -> PLUS_EQ .)
    STRING_LIT      reduce using rule 152 (assign_op -> PLUS_EQ .)
    BOOL_LIT        reduce using rule 152 (assign_op -> PLUS_EQ .)
    CHAR_LIT        reduce using rule 152 (assign_op -> PLUS_EQ .)
    NIL             reduce using rule 152 (assign_op -> PLUS_EQ .)
    STRUCT          reduce using rule 152 (assign_op -> PLUS_EQ .)
    LSQUARE         reduce using rule 152 (assign_op -> PLUS_EQ .)


state 190

    (153) assign_op -> MINUS_EQ .

    PLUS            reduce using rule 153 (assign_op -> MINUS_EQ .)
    MINUS           reduce using rule 153 (assign_op -> MINUS_EQ .)
    NOT             reduce using rule 153 (assign_op -> MINUS_EQ .)
    CARET           reduce using rule 153 (assign_op -> MINUS_EQ .)
    STAR            reduce using rule 153 (assign_op -> MINUS_EQ .)
    AMP             reduce using rule 153 (assign_op -> MINUS_EQ .)
    LROUND          reduce using rule 153 (assign_op -> MINUS_EQ .)
    ID              reduce using rule 153 (assign_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 153 (assign_op -> MINUS_EQ .)
    FLOAT_LIT       reduce using rule 153 (assign_op -> MINUS_EQ .)
    STRING_LIT      reduce using rule 153 (assign_op -> MINUS_EQ .)
    BOOL_LIT        reduce using rule 153 (assign_op -> MINUS_EQ .)
    CHAR_LIT        reduce using rule 153 (assign_op -> MINUS_EQ .)
    NIL             reduce using rule 153 (assign_op -> MINUS_EQ .)
    STRUCT          reduce using rule 153 (assign_op -> MINUS_EQ .)
    LSQUARE         reduce using rule 153 (assign_op -> MINUS_EQ .)


state 191

    (154) assign_op -> STAR_EQ .

    PLUS            reduce using rule 154 (assign_op -> STAR_EQ .)
    MINUS           reduce using rule 154 (assign_op -> STAR_EQ .)
    NOT             reduce using rule 154 (assign_op -> STAR_EQ .)
    CARET           reduce using rule 154 (assign_op -> STAR_EQ .)
    STAR            reduce using rule 154 (assign_op -> STAR_EQ .)
    AMP             reduce using rule 154 (assign_op -> STAR_EQ .)
    LROUND          reduce using rule 154 (assign_op -> STAR_EQ .)
    ID              reduce using rule 154 (assign_op -> STAR_EQ .)
    INT_LIT         reduce using rule 154 (assign_op -> STAR_EQ .)
    FLOAT_LIT       reduce using rule 154 (assign_op -> STAR_EQ .)
    STRING_LIT      reduce using rule 154 (assign_op -> STAR_EQ .)
    BOOL_LIT        reduce using rule 154 (assign_op -> STAR_EQ .)
    CHAR_LIT        reduce using rule 154 (assign_op -> STAR_EQ .)
    NIL             reduce using rule 154 (assign_op -> STAR_EQ .)
    STRUCT          reduce using rule 154 (assign_op -> STAR_EQ .)
    LSQUARE         reduce using rule 154 (assign_op -> STAR_EQ .)


state 192

    (155) assign_op -> DIVIDE_EQ .

    PLUS            reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    MINUS           reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    NOT             reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    CARET           reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    STAR            reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    AMP             reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    LROUND          reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    ID              reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    INT_LIT         reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    FLOAT_LIT       reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    STRING_LIT      reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    BOOL_LIT        reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    CHAR_LIT        reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    NIL             reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    STRUCT          reduce using rule 155 (assign_op -> DIVIDE_EQ .)
    LSQUARE         reduce using rule 155 (assign_op -> DIVIDE_EQ .)


state 193

    (156) assign_op -> MODULO_EQ .

    PLUS            reduce using rule 156 (assign_op -> MODULO_EQ .)
    MINUS           reduce using rule 156 (assign_op -> MODULO_EQ .)
    NOT             reduce using rule 156 (assign_op -> MODULO_EQ .)
    CARET           reduce using rule 156 (assign_op -> MODULO_EQ .)
    STAR            reduce using rule 156 (assign_op -> MODULO_EQ .)
    AMP             reduce using rule 156 (assign_op -> MODULO_EQ .)
    LROUND          reduce using rule 156 (assign_op -> MODULO_EQ .)
    ID              reduce using rule 156 (assign_op -> MODULO_EQ .)
    INT_LIT         reduce using rule 156 (assign_op -> MODULO_EQ .)
    FLOAT_LIT       reduce using rule 156 (assign_op -> MODULO_EQ .)
    STRING_LIT      reduce using rule 156 (assign_op -> MODULO_EQ .)
    BOOL_LIT        reduce using rule 156 (assign_op -> MODULO_EQ .)
    CHAR_LIT        reduce using rule 156 (assign_op -> MODULO_EQ .)
    NIL             reduce using rule 156 (assign_op -> MODULO_EQ .)
    STRUCT          reduce using rule 156 (assign_op -> MODULO_EQ .)
    LSQUARE         reduce using rule 156 (assign_op -> MODULO_EQ .)


state 194

    (157) assign_op -> AMP_EQ .

    PLUS            reduce using rule 157 (assign_op -> AMP_EQ .)
    MINUS           reduce using rule 157 (assign_op -> AMP_EQ .)
    NOT             reduce using rule 157 (assign_op -> AMP_EQ .)
    CARET           reduce using rule 157 (assign_op -> AMP_EQ .)
    STAR            reduce using rule 157 (assign_op -> AMP_EQ .)
    AMP             reduce using rule 157 (assign_op -> AMP_EQ .)
    LROUND          reduce using rule 157 (assign_op -> AMP_EQ .)
    ID              reduce using rule 157 (assign_op -> AMP_EQ .)
    INT_LIT         reduce using rule 157 (assign_op -> AMP_EQ .)
    FLOAT_LIT       reduce using rule 157 (assign_op -> AMP_EQ .)
    STRING_LIT      reduce using rule 157 (assign_op -> AMP_EQ .)
    BOOL_LIT        reduce using rule 157 (assign_op -> AMP_EQ .)
    CHAR_LIT        reduce using rule 157 (assign_op -> AMP_EQ .)
    NIL             reduce using rule 157 (assign_op -> AMP_EQ .)
    STRUCT          reduce using rule 157 (assign_op -> AMP_EQ .)
    LSQUARE         reduce using rule 157 (assign_op -> AMP_EQ .)


state 195

    (158) assign_op -> OR_EQ .

    PLUS            reduce using rule 158 (assign_op -> OR_EQ .)
    MINUS           reduce using rule 158 (assign_op -> OR_EQ .)
    NOT             reduce using rule 158 (assign_op -> OR_EQ .)
    CARET           reduce using rule 158 (assign_op -> OR_EQ .)
    STAR            reduce using rule 158 (assign_op -> OR_EQ .)
    AMP             reduce using rule 158 (assign_op -> OR_EQ .)
    LROUND          reduce using rule 158 (assign_op -> OR_EQ .)
    ID              reduce using rule 158 (assign_op -> OR_EQ .)
    INT_LIT         reduce using rule 158 (assign_op -> OR_EQ .)
    FLOAT_LIT       reduce using rule 158 (assign_op -> OR_EQ .)
    STRING_LIT      reduce using rule 158 (assign_op -> OR_EQ .)
    BOOL_LIT        reduce using rule 158 (assign_op -> OR_EQ .)
    CHAR_LIT        reduce using rule 158 (assign_op -> OR_EQ .)
    NIL             reduce using rule 158 (assign_op -> OR_EQ .)
    STRUCT          reduce using rule 158 (assign_op -> OR_EQ .)
    LSQUARE         reduce using rule 158 (assign_op -> OR_EQ .)


state 196

    (159) assign_op -> CARET_EQ .

    PLUS            reduce using rule 159 (assign_op -> CARET_EQ .)
    MINUS           reduce using rule 159 (assign_op -> CARET_EQ .)
    NOT             reduce using rule 159 (assign_op -> CARET_EQ .)
    CARET           reduce using rule 159 (assign_op -> CARET_EQ .)
    STAR            reduce using rule 159 (assign_op -> CARET_EQ .)
    AMP             reduce using rule 159 (assign_op -> CARET_EQ .)
    LROUND          reduce using rule 159 (assign_op -> CARET_EQ .)
    ID              reduce using rule 159 (assign_op -> CARET_EQ .)
    INT_LIT         reduce using rule 159 (assign_op -> CARET_EQ .)
    FLOAT_LIT       reduce using rule 159 (assign_op -> CARET_EQ .)
    STRING_LIT      reduce using rule 159 (assign_op -> CARET_EQ .)
    BOOL_LIT        reduce using rule 159 (assign_op -> CARET_EQ .)
    CHAR_LIT        reduce using rule 159 (assign_op -> CARET_EQ .)
    NIL             reduce using rule 159 (assign_op -> CARET_EQ .)
    STRUCT          reduce using rule 159 (assign_op -> CARET_EQ .)
    LSQUARE         reduce using rule 159 (assign_op -> CARET_EQ .)


state 197

    (160) assign_op -> EQ .

    PLUS            reduce using rule 160 (assign_op -> EQ .)
    MINUS           reduce using rule 160 (assign_op -> EQ .)
    NOT             reduce using rule 160 (assign_op -> EQ .)
    CARET           reduce using rule 160 (assign_op -> EQ .)
    STAR            reduce using rule 160 (assign_op -> EQ .)
    AMP             reduce using rule 160 (assign_op -> EQ .)
    LROUND          reduce using rule 160 (assign_op -> EQ .)
    ID              reduce using rule 160 (assign_op -> EQ .)
    INT_LIT         reduce using rule 160 (assign_op -> EQ .)
    FLOAT_LIT       reduce using rule 160 (assign_op -> EQ .)
    STRING_LIT      reduce using rule 160 (assign_op -> EQ .)
    BOOL_LIT        reduce using rule 160 (assign_op -> EQ .)
    CHAR_LIT        reduce using rule 160 (assign_op -> EQ .)
    NIL             reduce using rule 160 (assign_op -> EQ .)
    STRUCT          reduce using rule 160 (assign_op -> EQ .)
    LSQUARE         reduce using rule 160 (assign_op -> EQ .)


state 198

    (178) BreakStmt -> BREAK SEMICOLON .

    SEMICOLON       reduce using rule 178 (BreakStmt -> BREAK SEMICOLON .)


state 199

    (179) BreakStmt -> BREAK Label . SEMICOLON

    SEMICOLON       shift and go to state 257


state 200

    (148) Label -> ID .

    SEMICOLON       reduce using rule 148 (Label -> ID .)


state 201

    (180) ContinueStmt -> CONTINUE SEMICOLON .

    SEMICOLON       reduce using rule 180 (ContinueStmt -> CONTINUE SEMICOLON .)


state 202

    (181) ContinueStmt -> CONTINUE Label . SEMICOLON

    SEMICOLON       shift and go to state 258


state 203

    (182) GotoStmt -> GOTO Label . SEMICOLON

    SEMICOLON       shift and go to state 259


state 204

    (183) IfStmt -> IF SimpleStmt . SEMICOLON Expression Block
    (185) IfStmt -> IF SimpleStmt . SEMICOLON Expression ElseStmt

    SEMICOLON       shift and go to state 260


state 205

    (184) IfStmt -> IF Expression . Block
    (186) IfStmt -> IF Expression . ElseStmt
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression
    (146) ExpressionStmt -> Expression .
    (149) IncDecStmt -> Expression . PLUS_PLUS
    (150) IncDecStmt -> Expression . MINUS_MINUS
    (36) ExpressionList -> Expression .
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (187) ElseStmt -> . ELSE IfStmt
    (188) ElseStmt -> . ELSE Block
    (1) lcurly -> . LCURLY

    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163
    SEMICOLON       reduce using rule 146 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 207
    MINUS_MINUS     shift and go to state 208
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)
    ELSE            shift and go to state 263
    LCURLY          shift and go to state 66

    Block                          shift and go to state 261
    ElseStmt                       shift and go to state 262
    lcurly                         shift and go to state 65

state 206

    (34) IdentifierList -> ID .
    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (IdentifierList -> ID .)
  ! reduce/reduce conflict for LCURLY resolved using rule 69 (OperandName -> ID .)
    ASSIGN          reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    ELSE            reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)

  ! COMMA           [ reduce using rule 69 (OperandName -> ID .) ]
  ! LCURLY          [ reduce using rule 74 (LiteralType -> ID .) ]


state 207

    (149) IncDecStmt -> Expression PLUS_PLUS .

    SEMICOLON       reduce using rule 149 (IncDecStmt -> Expression PLUS_PLUS .)
    LCURLY          reduce using rule 149 (IncDecStmt -> Expression PLUS_PLUS .)


state 208

    (150) IncDecStmt -> Expression MINUS_MINUS .

    SEMICOLON       reduce using rule 150 (IncDecStmt -> Expression MINUS_MINUS .)
    LCURLY          reduce using rule 150 (IncDecStmt -> Expression MINUS_MINUS .)


state 209

    (161) ForStmt -> ForLoop Block .

    SEMICOLON       reduce using rule 161 (ForStmt -> ForLoop Block .)


state 210

    (162) ForStmt -> WhileLoop Block .

    SEMICOLON       reduce using rule 162 (ForStmt -> WhileLoop Block .)


state 211

    (163) ForLoop -> FOR InitStmt . SEMICOLON Condition SEMICOLON PostStmt
    (164) ForLoop -> FOR InitStmt . SEMICOLON Condition SEMICOLON
    (165) ForLoop -> FOR InitStmt . SEMICOLON SEMICOLON PostStmt
    (166) ForLoop -> FOR InitStmt . SEMICOLON SEMICOLON

    SEMICOLON       shift and go to state 264


state 212

    (167) ForLoop -> FOR SEMICOLON . Condition SEMICOLON PostStmt
    (168) ForLoop -> FOR SEMICOLON . Condition SEMICOLON
    (169) ForLoop -> FOR SEMICOLON . SEMICOLON PostStmt
    (170) ForLoop -> FOR SEMICOLON . SEMICOLON
    (175) Condition -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 265
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Condition                      shift and go to state 266
    Expression                     shift and go to state 267
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 213

    (171) WhileLoop -> FOR Condition . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 66

    Block                          shift and go to state 268
    lcurly                         shift and go to state 65

state 214

    (172) WhileLoop -> FOR Block .

    LCURLY          reduce using rule 172 (WhileLoop -> FOR Block .)


state 215

    (173) InitStmt -> SimpleStmt .

    SEMICOLON       reduce using rule 173 (InitStmt -> SimpleStmt .)


state 216

    (175) Condition -> Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression
    (146) ExpressionStmt -> Expression .
    (149) IncDecStmt -> Expression . PLUS_PLUS
    (150) IncDecStmt -> Expression . MINUS_MINUS
    (36) ExpressionList -> Expression .

    LCURLY          reduce using rule 175 (Condition -> Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163
    SEMICOLON       reduce using rule 146 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 207
    MINUS_MINUS     shift and go to state 208
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)


state 217

    (41) ShortVarDecl -> IdentifierList ASSIGN . ExpressionList SEMICOLON
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    ExpressionList                 shift and go to state 269
    Expression                     shift and go to state 76
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 218

    (49) ParameterList -> ParameterList COMMA ParameterDecl .

    RROUND          reduce using rule 49 (ParameterList -> ParameterList COMMA ParameterDecl .)
    COMMA           reduce using rule 49 (ParameterList -> ParameterList COMMA ParameterDecl .)


state 219

    (35) ExpressionList -> ExpressionList COMMA Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    SEMICOLON       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    PLUS_EQ         reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    MINUS_EQ        reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    STAR_EQ         reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    DIVIDE_EQ       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    MODULO_EQ       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    AMP_EQ          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    OR_EQ           reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    CARET_EQ        reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    EQ              reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    RROUND          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    LCURLY          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 220

    (90) Expression -> Expression OR_OR Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    COMMA           reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    SEMICOLON       reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    RSQUARE         reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    PLUS_PLUS       reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    MINUS_MINUS     reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    PLUS_EQ         reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    MINUS_EQ        reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    STAR_EQ         reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    DIVIDE_EQ       reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    MODULO_EQ       reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    AMP_EQ          reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    OR_EQ           reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    CARET_EQ        reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    EQ              reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    RROUND          reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    ELSE            reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    LCURLY          reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    RCURLY          reduce using rule 90 (Expression -> Expression OR_OR Expression .)
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! AMP_AMP         [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! EQ_EQ           [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! NOT_EQ          [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! LT              [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! LE              [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! GT              [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! GE              [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! PLUS            [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! MINUS           [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! OR              [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! CARET           [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! STAR            [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! DIVIDE          [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! MODULO          [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! LSHIFT          [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! RSHIFT          [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! AMP             [ reduce using rule 90 (Expression -> Expression OR_OR Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]


state 221

    (91) Expression -> Expression AMP_AMP Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    AMP_AMP         reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    COMMA           reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    SEMICOLON       reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    RSQUARE         reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    PLUS_PLUS       reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    MINUS_MINUS     reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    PLUS_EQ         reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    MINUS_EQ        reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    STAR_EQ         reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    DIVIDE_EQ       reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    MODULO_EQ       reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    AMP_EQ          reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    OR_EQ           reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    CARET_EQ        reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    EQ              reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    RROUND          reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    ELSE            reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    LCURLY          reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    RCURLY          reduce using rule 91 (Expression -> Expression AMP_AMP Expression .)
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! EQ_EQ           [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! NOT_EQ          [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! LT              [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! LE              [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! GT              [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! GE              [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! PLUS            [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! MINUS           [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! OR              [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! CARET           [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! STAR            [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! DIVIDE          [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! MODULO          [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! LSHIFT          [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! RSHIFT          [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! AMP             [ reduce using rule 91 (Expression -> Expression AMP_AMP Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]


state 222

    (92) Expression -> Expression EQ_EQ Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    AMP_AMP         reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    EQ_EQ           reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    NOT_EQ          reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    LT              reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    LE              reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    GT              reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    GE              reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    COMMA           reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    SEMICOLON       reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    RSQUARE         reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    PLUS_PLUS       reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    MINUS_MINUS     reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    PLUS_EQ         reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    MINUS_EQ        reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    STAR_EQ         reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    DIVIDE_EQ       reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    MODULO_EQ       reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    AMP_EQ          reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    OR_EQ           reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    CARET_EQ        reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    EQ              reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    RROUND          reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    ELSE            reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    LCURLY          reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    RCURLY          reduce using rule 92 (Expression -> Expression EQ_EQ Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! MINUS           [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! OR              [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! CARET           [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! STAR            [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! DIVIDE          [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! MODULO          [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! LSHIFT          [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! RSHIFT          [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! AMP             [ reduce using rule 92 (Expression -> Expression EQ_EQ Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 223

    (93) Expression -> Expression NOT_EQ Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    AMP_AMP         reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    EQ_EQ           reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    NOT_EQ          reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    LT              reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    LE              reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    GT              reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    GE              reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    COMMA           reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    SEMICOLON       reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    RSQUARE         reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    PLUS_PLUS       reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    MINUS_MINUS     reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    PLUS_EQ         reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    MINUS_EQ        reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    STAR_EQ         reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    DIVIDE_EQ       reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    MODULO_EQ       reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    AMP_EQ          reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    OR_EQ           reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    CARET_EQ        reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    EQ              reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    RROUND          reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    ELSE            reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    LCURLY          reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    RCURLY          reduce using rule 93 (Expression -> Expression NOT_EQ Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! MINUS           [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! OR              [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! CARET           [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! STAR            [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! DIVIDE          [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! MODULO          [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! LSHIFT          [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! RSHIFT          [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! AMP             [ reduce using rule 93 (Expression -> Expression NOT_EQ Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 224

    (94) Expression -> Expression LT Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 94 (Expression -> Expression LT Expression .)
    AMP_AMP         reduce using rule 94 (Expression -> Expression LT Expression .)
    EQ_EQ           reduce using rule 94 (Expression -> Expression LT Expression .)
    NOT_EQ          reduce using rule 94 (Expression -> Expression LT Expression .)
    LT              reduce using rule 94 (Expression -> Expression LT Expression .)
    LE              reduce using rule 94 (Expression -> Expression LT Expression .)
    GT              reduce using rule 94 (Expression -> Expression LT Expression .)
    GE              reduce using rule 94 (Expression -> Expression LT Expression .)
    COMMA           reduce using rule 94 (Expression -> Expression LT Expression .)
    SEMICOLON       reduce using rule 94 (Expression -> Expression LT Expression .)
    RSQUARE         reduce using rule 94 (Expression -> Expression LT Expression .)
    PLUS_PLUS       reduce using rule 94 (Expression -> Expression LT Expression .)
    MINUS_MINUS     reduce using rule 94 (Expression -> Expression LT Expression .)
    PLUS_EQ         reduce using rule 94 (Expression -> Expression LT Expression .)
    MINUS_EQ        reduce using rule 94 (Expression -> Expression LT Expression .)
    STAR_EQ         reduce using rule 94 (Expression -> Expression LT Expression .)
    DIVIDE_EQ       reduce using rule 94 (Expression -> Expression LT Expression .)
    MODULO_EQ       reduce using rule 94 (Expression -> Expression LT Expression .)
    AMP_EQ          reduce using rule 94 (Expression -> Expression LT Expression .)
    OR_EQ           reduce using rule 94 (Expression -> Expression LT Expression .)
    CARET_EQ        reduce using rule 94 (Expression -> Expression LT Expression .)
    EQ              reduce using rule 94 (Expression -> Expression LT Expression .)
    RROUND          reduce using rule 94 (Expression -> Expression LT Expression .)
    ELSE            reduce using rule 94 (Expression -> Expression LT Expression .)
    LCURLY          reduce using rule 94 (Expression -> Expression LT Expression .)
    RCURLY          reduce using rule 94 (Expression -> Expression LT Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! MINUS           [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! OR              [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! CARET           [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! STAR            [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! DIVIDE          [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! MODULO          [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! LSHIFT          [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! RSHIFT          [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! AMP             [ reduce using rule 94 (Expression -> Expression LT Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 225

    (95) Expression -> Expression LE Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 95 (Expression -> Expression LE Expression .)
    AMP_AMP         reduce using rule 95 (Expression -> Expression LE Expression .)
    EQ_EQ           reduce using rule 95 (Expression -> Expression LE Expression .)
    NOT_EQ          reduce using rule 95 (Expression -> Expression LE Expression .)
    LT              reduce using rule 95 (Expression -> Expression LE Expression .)
    LE              reduce using rule 95 (Expression -> Expression LE Expression .)
    GT              reduce using rule 95 (Expression -> Expression LE Expression .)
    GE              reduce using rule 95 (Expression -> Expression LE Expression .)
    COMMA           reduce using rule 95 (Expression -> Expression LE Expression .)
    SEMICOLON       reduce using rule 95 (Expression -> Expression LE Expression .)
    RSQUARE         reduce using rule 95 (Expression -> Expression LE Expression .)
    PLUS_PLUS       reduce using rule 95 (Expression -> Expression LE Expression .)
    MINUS_MINUS     reduce using rule 95 (Expression -> Expression LE Expression .)
    PLUS_EQ         reduce using rule 95 (Expression -> Expression LE Expression .)
    MINUS_EQ        reduce using rule 95 (Expression -> Expression LE Expression .)
    STAR_EQ         reduce using rule 95 (Expression -> Expression LE Expression .)
    DIVIDE_EQ       reduce using rule 95 (Expression -> Expression LE Expression .)
    MODULO_EQ       reduce using rule 95 (Expression -> Expression LE Expression .)
    AMP_EQ          reduce using rule 95 (Expression -> Expression LE Expression .)
    OR_EQ           reduce using rule 95 (Expression -> Expression LE Expression .)
    CARET_EQ        reduce using rule 95 (Expression -> Expression LE Expression .)
    EQ              reduce using rule 95 (Expression -> Expression LE Expression .)
    RROUND          reduce using rule 95 (Expression -> Expression LE Expression .)
    ELSE            reduce using rule 95 (Expression -> Expression LE Expression .)
    LCURLY          reduce using rule 95 (Expression -> Expression LE Expression .)
    RCURLY          reduce using rule 95 (Expression -> Expression LE Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! MINUS           [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! OR              [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! CARET           [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! STAR            [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! DIVIDE          [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! MODULO          [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! LSHIFT          [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! RSHIFT          [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! AMP             [ reduce using rule 95 (Expression -> Expression LE Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 226

    (96) Expression -> Expression GT Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 96 (Expression -> Expression GT Expression .)
    AMP_AMP         reduce using rule 96 (Expression -> Expression GT Expression .)
    EQ_EQ           reduce using rule 96 (Expression -> Expression GT Expression .)
    NOT_EQ          reduce using rule 96 (Expression -> Expression GT Expression .)
    LT              reduce using rule 96 (Expression -> Expression GT Expression .)
    LE              reduce using rule 96 (Expression -> Expression GT Expression .)
    GT              reduce using rule 96 (Expression -> Expression GT Expression .)
    GE              reduce using rule 96 (Expression -> Expression GT Expression .)
    COMMA           reduce using rule 96 (Expression -> Expression GT Expression .)
    SEMICOLON       reduce using rule 96 (Expression -> Expression GT Expression .)
    RSQUARE         reduce using rule 96 (Expression -> Expression GT Expression .)
    PLUS_PLUS       reduce using rule 96 (Expression -> Expression GT Expression .)
    MINUS_MINUS     reduce using rule 96 (Expression -> Expression GT Expression .)
    PLUS_EQ         reduce using rule 96 (Expression -> Expression GT Expression .)
    MINUS_EQ        reduce using rule 96 (Expression -> Expression GT Expression .)
    STAR_EQ         reduce using rule 96 (Expression -> Expression GT Expression .)
    DIVIDE_EQ       reduce using rule 96 (Expression -> Expression GT Expression .)
    MODULO_EQ       reduce using rule 96 (Expression -> Expression GT Expression .)
    AMP_EQ          reduce using rule 96 (Expression -> Expression GT Expression .)
    OR_EQ           reduce using rule 96 (Expression -> Expression GT Expression .)
    CARET_EQ        reduce using rule 96 (Expression -> Expression GT Expression .)
    EQ              reduce using rule 96 (Expression -> Expression GT Expression .)
    RROUND          reduce using rule 96 (Expression -> Expression GT Expression .)
    ELSE            reduce using rule 96 (Expression -> Expression GT Expression .)
    LCURLY          reduce using rule 96 (Expression -> Expression GT Expression .)
    RCURLY          reduce using rule 96 (Expression -> Expression GT Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! MINUS           [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! OR              [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! CARET           [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! STAR            [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! DIVIDE          [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! MODULO          [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! LSHIFT          [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! RSHIFT          [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! AMP             [ reduce using rule 96 (Expression -> Expression GT Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 227

    (97) Expression -> Expression GE Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 97 (Expression -> Expression GE Expression .)
    AMP_AMP         reduce using rule 97 (Expression -> Expression GE Expression .)
    EQ_EQ           reduce using rule 97 (Expression -> Expression GE Expression .)
    NOT_EQ          reduce using rule 97 (Expression -> Expression GE Expression .)
    LT              reduce using rule 97 (Expression -> Expression GE Expression .)
    LE              reduce using rule 97 (Expression -> Expression GE Expression .)
    GT              reduce using rule 97 (Expression -> Expression GE Expression .)
    GE              reduce using rule 97 (Expression -> Expression GE Expression .)
    COMMA           reduce using rule 97 (Expression -> Expression GE Expression .)
    SEMICOLON       reduce using rule 97 (Expression -> Expression GE Expression .)
    RSQUARE         reduce using rule 97 (Expression -> Expression GE Expression .)
    PLUS_PLUS       reduce using rule 97 (Expression -> Expression GE Expression .)
    MINUS_MINUS     reduce using rule 97 (Expression -> Expression GE Expression .)
    PLUS_EQ         reduce using rule 97 (Expression -> Expression GE Expression .)
    MINUS_EQ        reduce using rule 97 (Expression -> Expression GE Expression .)
    STAR_EQ         reduce using rule 97 (Expression -> Expression GE Expression .)
    DIVIDE_EQ       reduce using rule 97 (Expression -> Expression GE Expression .)
    MODULO_EQ       reduce using rule 97 (Expression -> Expression GE Expression .)
    AMP_EQ          reduce using rule 97 (Expression -> Expression GE Expression .)
    OR_EQ           reduce using rule 97 (Expression -> Expression GE Expression .)
    CARET_EQ        reduce using rule 97 (Expression -> Expression GE Expression .)
    EQ              reduce using rule 97 (Expression -> Expression GE Expression .)
    RROUND          reduce using rule 97 (Expression -> Expression GE Expression .)
    ELSE            reduce using rule 97 (Expression -> Expression GE Expression .)
    LCURLY          reduce using rule 97 (Expression -> Expression GE Expression .)
    RCURLY          reduce using rule 97 (Expression -> Expression GE Expression .)
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! PLUS            [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! MINUS           [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! OR              [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! CARET           [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! STAR            [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! DIVIDE          [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! MODULO          [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! LSHIFT          [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! RSHIFT          [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! AMP             [ reduce using rule 97 (Expression -> Expression GE Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]


state 228

    (98) Expression -> Expression PLUS Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    AMP_AMP         reduce using rule 98 (Expression -> Expression PLUS Expression .)
    EQ_EQ           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    NOT_EQ          reduce using rule 98 (Expression -> Expression PLUS Expression .)
    LT              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    LE              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    GT              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    GE              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    PLUS            reduce using rule 98 (Expression -> Expression PLUS Expression .)
    MINUS           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    OR              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    CARET           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    COMMA           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    SEMICOLON       reduce using rule 98 (Expression -> Expression PLUS Expression .)
    RSQUARE         reduce using rule 98 (Expression -> Expression PLUS Expression .)
    PLUS_PLUS       reduce using rule 98 (Expression -> Expression PLUS Expression .)
    MINUS_MINUS     reduce using rule 98 (Expression -> Expression PLUS Expression .)
    PLUS_EQ         reduce using rule 98 (Expression -> Expression PLUS Expression .)
    MINUS_EQ        reduce using rule 98 (Expression -> Expression PLUS Expression .)
    STAR_EQ         reduce using rule 98 (Expression -> Expression PLUS Expression .)
    DIVIDE_EQ       reduce using rule 98 (Expression -> Expression PLUS Expression .)
    MODULO_EQ       reduce using rule 98 (Expression -> Expression PLUS Expression .)
    AMP_EQ          reduce using rule 98 (Expression -> Expression PLUS Expression .)
    OR_EQ           reduce using rule 98 (Expression -> Expression PLUS Expression .)
    CARET_EQ        reduce using rule 98 (Expression -> Expression PLUS Expression .)
    EQ              reduce using rule 98 (Expression -> Expression PLUS Expression .)
    RROUND          reduce using rule 98 (Expression -> Expression PLUS Expression .)
    ELSE            reduce using rule 98 (Expression -> Expression PLUS Expression .)
    LCURLY          reduce using rule 98 (Expression -> Expression PLUS Expression .)
    RCURLY          reduce using rule 98 (Expression -> Expression PLUS Expression .)
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! STAR            [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! MODULO          [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! LSHIFT          [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! RSHIFT          [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! AMP             [ reduce using rule 98 (Expression -> Expression PLUS Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]


state 229

    (99) Expression -> Expression MINUS Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    AMP_AMP         reduce using rule 99 (Expression -> Expression MINUS Expression .)
    EQ_EQ           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    NOT_EQ          reduce using rule 99 (Expression -> Expression MINUS Expression .)
    LT              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    LE              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    GT              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    GE              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    PLUS            reduce using rule 99 (Expression -> Expression MINUS Expression .)
    MINUS           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    OR              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    CARET           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    COMMA           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    SEMICOLON       reduce using rule 99 (Expression -> Expression MINUS Expression .)
    RSQUARE         reduce using rule 99 (Expression -> Expression MINUS Expression .)
    PLUS_PLUS       reduce using rule 99 (Expression -> Expression MINUS Expression .)
    MINUS_MINUS     reduce using rule 99 (Expression -> Expression MINUS Expression .)
    PLUS_EQ         reduce using rule 99 (Expression -> Expression MINUS Expression .)
    MINUS_EQ        reduce using rule 99 (Expression -> Expression MINUS Expression .)
    STAR_EQ         reduce using rule 99 (Expression -> Expression MINUS Expression .)
    DIVIDE_EQ       reduce using rule 99 (Expression -> Expression MINUS Expression .)
    MODULO_EQ       reduce using rule 99 (Expression -> Expression MINUS Expression .)
    AMP_EQ          reduce using rule 99 (Expression -> Expression MINUS Expression .)
    OR_EQ           reduce using rule 99 (Expression -> Expression MINUS Expression .)
    CARET_EQ        reduce using rule 99 (Expression -> Expression MINUS Expression .)
    EQ              reduce using rule 99 (Expression -> Expression MINUS Expression .)
    RROUND          reduce using rule 99 (Expression -> Expression MINUS Expression .)
    ELSE            reduce using rule 99 (Expression -> Expression MINUS Expression .)
    LCURLY          reduce using rule 99 (Expression -> Expression MINUS Expression .)
    RCURLY          reduce using rule 99 (Expression -> Expression MINUS Expression .)
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! STAR            [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! MODULO          [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! LSHIFT          [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! RSHIFT          [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! AMP             [ reduce using rule 99 (Expression -> Expression MINUS Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]


state 230

    (100) Expression -> Expression OR Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 100 (Expression -> Expression OR Expression .)
    AMP_AMP         reduce using rule 100 (Expression -> Expression OR Expression .)
    EQ_EQ           reduce using rule 100 (Expression -> Expression OR Expression .)
    NOT_EQ          reduce using rule 100 (Expression -> Expression OR Expression .)
    LT              reduce using rule 100 (Expression -> Expression OR Expression .)
    LE              reduce using rule 100 (Expression -> Expression OR Expression .)
    GT              reduce using rule 100 (Expression -> Expression OR Expression .)
    GE              reduce using rule 100 (Expression -> Expression OR Expression .)
    PLUS            reduce using rule 100 (Expression -> Expression OR Expression .)
    MINUS           reduce using rule 100 (Expression -> Expression OR Expression .)
    OR              reduce using rule 100 (Expression -> Expression OR Expression .)
    CARET           reduce using rule 100 (Expression -> Expression OR Expression .)
    COMMA           reduce using rule 100 (Expression -> Expression OR Expression .)
    SEMICOLON       reduce using rule 100 (Expression -> Expression OR Expression .)
    RSQUARE         reduce using rule 100 (Expression -> Expression OR Expression .)
    PLUS_PLUS       reduce using rule 100 (Expression -> Expression OR Expression .)
    MINUS_MINUS     reduce using rule 100 (Expression -> Expression OR Expression .)
    PLUS_EQ         reduce using rule 100 (Expression -> Expression OR Expression .)
    MINUS_EQ        reduce using rule 100 (Expression -> Expression OR Expression .)
    STAR_EQ         reduce using rule 100 (Expression -> Expression OR Expression .)
    DIVIDE_EQ       reduce using rule 100 (Expression -> Expression OR Expression .)
    MODULO_EQ       reduce using rule 100 (Expression -> Expression OR Expression .)
    AMP_EQ          reduce using rule 100 (Expression -> Expression OR Expression .)
    OR_EQ           reduce using rule 100 (Expression -> Expression OR Expression .)
    CARET_EQ        reduce using rule 100 (Expression -> Expression OR Expression .)
    EQ              reduce using rule 100 (Expression -> Expression OR Expression .)
    RROUND          reduce using rule 100 (Expression -> Expression OR Expression .)
    ELSE            reduce using rule 100 (Expression -> Expression OR Expression .)
    LCURLY          reduce using rule 100 (Expression -> Expression OR Expression .)
    RCURLY          reduce using rule 100 (Expression -> Expression OR Expression .)
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! STAR            [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! DIVIDE          [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! MODULO          [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! LSHIFT          [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! RSHIFT          [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! AMP             [ reduce using rule 100 (Expression -> Expression OR Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]


state 231

    (101) Expression -> Expression CARET Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 101 (Expression -> Expression CARET Expression .)
    AMP_AMP         reduce using rule 101 (Expression -> Expression CARET Expression .)
    EQ_EQ           reduce using rule 101 (Expression -> Expression CARET Expression .)
    NOT_EQ          reduce using rule 101 (Expression -> Expression CARET Expression .)
    LT              reduce using rule 101 (Expression -> Expression CARET Expression .)
    LE              reduce using rule 101 (Expression -> Expression CARET Expression .)
    GT              reduce using rule 101 (Expression -> Expression CARET Expression .)
    GE              reduce using rule 101 (Expression -> Expression CARET Expression .)
    PLUS            reduce using rule 101 (Expression -> Expression CARET Expression .)
    MINUS           reduce using rule 101 (Expression -> Expression CARET Expression .)
    OR              reduce using rule 101 (Expression -> Expression CARET Expression .)
    CARET           reduce using rule 101 (Expression -> Expression CARET Expression .)
    COMMA           reduce using rule 101 (Expression -> Expression CARET Expression .)
    SEMICOLON       reduce using rule 101 (Expression -> Expression CARET Expression .)
    RSQUARE         reduce using rule 101 (Expression -> Expression CARET Expression .)
    PLUS_PLUS       reduce using rule 101 (Expression -> Expression CARET Expression .)
    MINUS_MINUS     reduce using rule 101 (Expression -> Expression CARET Expression .)
    PLUS_EQ         reduce using rule 101 (Expression -> Expression CARET Expression .)
    MINUS_EQ        reduce using rule 101 (Expression -> Expression CARET Expression .)
    STAR_EQ         reduce using rule 101 (Expression -> Expression CARET Expression .)
    DIVIDE_EQ       reduce using rule 101 (Expression -> Expression CARET Expression .)
    MODULO_EQ       reduce using rule 101 (Expression -> Expression CARET Expression .)
    AMP_EQ          reduce using rule 101 (Expression -> Expression CARET Expression .)
    OR_EQ           reduce using rule 101 (Expression -> Expression CARET Expression .)
    CARET_EQ        reduce using rule 101 (Expression -> Expression CARET Expression .)
    EQ              reduce using rule 101 (Expression -> Expression CARET Expression .)
    RROUND          reduce using rule 101 (Expression -> Expression CARET Expression .)
    ELSE            reduce using rule 101 (Expression -> Expression CARET Expression .)
    LCURLY          reduce using rule 101 (Expression -> Expression CARET Expression .)
    RCURLY          reduce using rule 101 (Expression -> Expression CARET Expression .)
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163

  ! STAR            [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! DIVIDE          [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! MODULO          [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! LSHIFT          [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! RSHIFT          [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! AMP             [ reduce using rule 101 (Expression -> Expression CARET Expression .) ]
  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]


state 232

    (102) Expression -> Expression STAR Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 102 (Expression -> Expression STAR Expression .)
    AMP_AMP         reduce using rule 102 (Expression -> Expression STAR Expression .)
    EQ_EQ           reduce using rule 102 (Expression -> Expression STAR Expression .)
    NOT_EQ          reduce using rule 102 (Expression -> Expression STAR Expression .)
    LT              reduce using rule 102 (Expression -> Expression STAR Expression .)
    LE              reduce using rule 102 (Expression -> Expression STAR Expression .)
    GT              reduce using rule 102 (Expression -> Expression STAR Expression .)
    GE              reduce using rule 102 (Expression -> Expression STAR Expression .)
    PLUS            reduce using rule 102 (Expression -> Expression STAR Expression .)
    MINUS           reduce using rule 102 (Expression -> Expression STAR Expression .)
    OR              reduce using rule 102 (Expression -> Expression STAR Expression .)
    CARET           reduce using rule 102 (Expression -> Expression STAR Expression .)
    STAR            reduce using rule 102 (Expression -> Expression STAR Expression .)
    DIVIDE          reduce using rule 102 (Expression -> Expression STAR Expression .)
    MODULO          reduce using rule 102 (Expression -> Expression STAR Expression .)
    LSHIFT          reduce using rule 102 (Expression -> Expression STAR Expression .)
    RSHIFT          reduce using rule 102 (Expression -> Expression STAR Expression .)
    AMP             reduce using rule 102 (Expression -> Expression STAR Expression .)
    COMMA           reduce using rule 102 (Expression -> Expression STAR Expression .)
    SEMICOLON       reduce using rule 102 (Expression -> Expression STAR Expression .)
    RSQUARE         reduce using rule 102 (Expression -> Expression STAR Expression .)
    PLUS_PLUS       reduce using rule 102 (Expression -> Expression STAR Expression .)
    MINUS_MINUS     reduce using rule 102 (Expression -> Expression STAR Expression .)
    PLUS_EQ         reduce using rule 102 (Expression -> Expression STAR Expression .)
    MINUS_EQ        reduce using rule 102 (Expression -> Expression STAR Expression .)
    STAR_EQ         reduce using rule 102 (Expression -> Expression STAR Expression .)
    DIVIDE_EQ       reduce using rule 102 (Expression -> Expression STAR Expression .)
    MODULO_EQ       reduce using rule 102 (Expression -> Expression STAR Expression .)
    AMP_EQ          reduce using rule 102 (Expression -> Expression STAR Expression .)
    OR_EQ           reduce using rule 102 (Expression -> Expression STAR Expression .)
    CARET_EQ        reduce using rule 102 (Expression -> Expression STAR Expression .)
    EQ              reduce using rule 102 (Expression -> Expression STAR Expression .)
    RROUND          reduce using rule 102 (Expression -> Expression STAR Expression .)
    ELSE            reduce using rule 102 (Expression -> Expression STAR Expression .)
    LCURLY          reduce using rule 102 (Expression -> Expression STAR Expression .)
    RCURLY          reduce using rule 102 (Expression -> Expression STAR Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 233

    (103) Expression -> Expression DIVIDE Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    AMP_AMP         reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    EQ_EQ           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    NOT_EQ          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    LT              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    LE              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    GT              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    GE              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    OR              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    CARET           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    STAR            reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    MODULO          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    LSHIFT          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    RSHIFT          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    AMP             reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    SEMICOLON       reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    RSQUARE         reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    PLUS_PLUS       reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    MINUS_MINUS     reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    PLUS_EQ         reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    MINUS_EQ        reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    STAR_EQ         reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    DIVIDE_EQ       reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    MODULO_EQ       reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    AMP_EQ          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    OR_EQ           reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    CARET_EQ        reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    EQ              reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    RROUND          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    ELSE            reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    LCURLY          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)
    RCURLY          reduce using rule 103 (Expression -> Expression DIVIDE Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 234

    (104) Expression -> Expression MODULO Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    AMP_AMP         reduce using rule 104 (Expression -> Expression MODULO Expression .)
    EQ_EQ           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    NOT_EQ          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    LT              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    LE              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    GT              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    GE              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    PLUS            reduce using rule 104 (Expression -> Expression MODULO Expression .)
    MINUS           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    OR              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    CARET           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    STAR            reduce using rule 104 (Expression -> Expression MODULO Expression .)
    DIVIDE          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    MODULO          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    LSHIFT          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    RSHIFT          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    AMP             reduce using rule 104 (Expression -> Expression MODULO Expression .)
    COMMA           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    SEMICOLON       reduce using rule 104 (Expression -> Expression MODULO Expression .)
    RSQUARE         reduce using rule 104 (Expression -> Expression MODULO Expression .)
    PLUS_PLUS       reduce using rule 104 (Expression -> Expression MODULO Expression .)
    MINUS_MINUS     reduce using rule 104 (Expression -> Expression MODULO Expression .)
    PLUS_EQ         reduce using rule 104 (Expression -> Expression MODULO Expression .)
    MINUS_EQ        reduce using rule 104 (Expression -> Expression MODULO Expression .)
    STAR_EQ         reduce using rule 104 (Expression -> Expression MODULO Expression .)
    DIVIDE_EQ       reduce using rule 104 (Expression -> Expression MODULO Expression .)
    MODULO_EQ       reduce using rule 104 (Expression -> Expression MODULO Expression .)
    AMP_EQ          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    OR_EQ           reduce using rule 104 (Expression -> Expression MODULO Expression .)
    CARET_EQ        reduce using rule 104 (Expression -> Expression MODULO Expression .)
    EQ              reduce using rule 104 (Expression -> Expression MODULO Expression .)
    RROUND          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    ELSE            reduce using rule 104 (Expression -> Expression MODULO Expression .)
    LCURLY          reduce using rule 104 (Expression -> Expression MODULO Expression .)
    RCURLY          reduce using rule 104 (Expression -> Expression MODULO Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 235

    (105) Expression -> Expression LSHIFT Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    AMP_AMP         reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    EQ_EQ           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    NOT_EQ          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    LT              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    LE              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    GT              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    GE              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    PLUS            reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    MINUS           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    OR              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    CARET           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    STAR            reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    DIVIDE          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    MODULO          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    LSHIFT          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    RSHIFT          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    AMP             reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    COMMA           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    SEMICOLON       reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    RSQUARE         reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    PLUS_PLUS       reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    MINUS_MINUS     reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    PLUS_EQ         reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    MINUS_EQ        reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    STAR_EQ         reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    DIVIDE_EQ       reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    MODULO_EQ       reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    AMP_EQ          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    OR_EQ           reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    CARET_EQ        reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    EQ              reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    RROUND          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    ELSE            reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    LCURLY          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)
    RCURLY          reduce using rule 105 (Expression -> Expression LSHIFT Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 236

    (106) Expression -> Expression RSHIFT Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    AMP_AMP         reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    EQ_EQ           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    NOT_EQ          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    LT              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    LE              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    GT              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    GE              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    PLUS            reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    MINUS           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    OR              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    CARET           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    STAR            reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    DIVIDE          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    MODULO          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    LSHIFT          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    RSHIFT          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    AMP             reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    COMMA           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    SEMICOLON       reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    RSQUARE         reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    PLUS_PLUS       reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    MINUS_MINUS     reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    PLUS_EQ         reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    MINUS_EQ        reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    STAR_EQ         reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    DIVIDE_EQ       reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    MODULO_EQ       reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    AMP_EQ          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    OR_EQ           reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    CARET_EQ        reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    EQ              reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    RROUND          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    ELSE            reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    LCURLY          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)
    RCURLY          reduce using rule 106 (Expression -> Expression RSHIFT Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 237

    (107) Expression -> Expression AMP Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 107 (Expression -> Expression AMP Expression .)
    AMP_AMP         reduce using rule 107 (Expression -> Expression AMP Expression .)
    EQ_EQ           reduce using rule 107 (Expression -> Expression AMP Expression .)
    NOT_EQ          reduce using rule 107 (Expression -> Expression AMP Expression .)
    LT              reduce using rule 107 (Expression -> Expression AMP Expression .)
    LE              reduce using rule 107 (Expression -> Expression AMP Expression .)
    GT              reduce using rule 107 (Expression -> Expression AMP Expression .)
    GE              reduce using rule 107 (Expression -> Expression AMP Expression .)
    PLUS            reduce using rule 107 (Expression -> Expression AMP Expression .)
    MINUS           reduce using rule 107 (Expression -> Expression AMP Expression .)
    OR              reduce using rule 107 (Expression -> Expression AMP Expression .)
    CARET           reduce using rule 107 (Expression -> Expression AMP Expression .)
    STAR            reduce using rule 107 (Expression -> Expression AMP Expression .)
    DIVIDE          reduce using rule 107 (Expression -> Expression AMP Expression .)
    MODULO          reduce using rule 107 (Expression -> Expression AMP Expression .)
    LSHIFT          reduce using rule 107 (Expression -> Expression AMP Expression .)
    RSHIFT          reduce using rule 107 (Expression -> Expression AMP Expression .)
    AMP             reduce using rule 107 (Expression -> Expression AMP Expression .)
    COMMA           reduce using rule 107 (Expression -> Expression AMP Expression .)
    SEMICOLON       reduce using rule 107 (Expression -> Expression AMP Expression .)
    RSQUARE         reduce using rule 107 (Expression -> Expression AMP Expression .)
    PLUS_PLUS       reduce using rule 107 (Expression -> Expression AMP Expression .)
    MINUS_MINUS     reduce using rule 107 (Expression -> Expression AMP Expression .)
    PLUS_EQ         reduce using rule 107 (Expression -> Expression AMP Expression .)
    MINUS_EQ        reduce using rule 107 (Expression -> Expression AMP Expression .)
    STAR_EQ         reduce using rule 107 (Expression -> Expression AMP Expression .)
    DIVIDE_EQ       reduce using rule 107 (Expression -> Expression AMP Expression .)
    MODULO_EQ       reduce using rule 107 (Expression -> Expression AMP Expression .)
    AMP_EQ          reduce using rule 107 (Expression -> Expression AMP Expression .)
    OR_EQ           reduce using rule 107 (Expression -> Expression AMP Expression .)
    CARET_EQ        reduce using rule 107 (Expression -> Expression AMP Expression .)
    EQ              reduce using rule 107 (Expression -> Expression AMP Expression .)
    RROUND          reduce using rule 107 (Expression -> Expression AMP Expression .)
    ELSE            reduce using rule 107 (Expression -> Expression AMP Expression .)
    LCURLY          reduce using rule 107 (Expression -> Expression AMP Expression .)
    RCURLY          reduce using rule 107 (Expression -> Expression AMP Expression .)

  ! OR_OR           [ shift and go to state 146 ]
  ! AMP_AMP         [ shift and go to state 147 ]
  ! EQ_EQ           [ shift and go to state 148 ]
  ! NOT_EQ          [ shift and go to state 149 ]
  ! LT              [ shift and go to state 150 ]
  ! LE              [ shift and go to state 151 ]
  ! GT              [ shift and go to state 152 ]
  ! GE              [ shift and go to state 153 ]
  ! PLUS            [ shift and go to state 154 ]
  ! MINUS           [ shift and go to state 155 ]
  ! OR              [ shift and go to state 156 ]
  ! CARET           [ shift and go to state 157 ]
  ! STAR            [ shift and go to state 158 ]
  ! DIVIDE          [ shift and go to state 159 ]
  ! MODULO          [ shift and go to state 160 ]
  ! LSHIFT          [ shift and go to state 161 ]
  ! RSHIFT          [ shift and go to state 162 ]
  ! AMP             [ shift and go to state 163 ]


state 238

    (85) Selector -> DOT ID .

    DOT             reduce using rule 85 (Selector -> DOT ID .)
    LSQUARE         reduce using rule 85 (Selector -> DOT ID .)
    LROUND          reduce using rule 85 (Selector -> DOT ID .)
    OR_OR           reduce using rule 85 (Selector -> DOT ID .)
    AMP_AMP         reduce using rule 85 (Selector -> DOT ID .)
    EQ_EQ           reduce using rule 85 (Selector -> DOT ID .)
    NOT_EQ          reduce using rule 85 (Selector -> DOT ID .)
    LT              reduce using rule 85 (Selector -> DOT ID .)
    LE              reduce using rule 85 (Selector -> DOT ID .)
    GT              reduce using rule 85 (Selector -> DOT ID .)
    GE              reduce using rule 85 (Selector -> DOT ID .)
    PLUS            reduce using rule 85 (Selector -> DOT ID .)
    MINUS           reduce using rule 85 (Selector -> DOT ID .)
    OR              reduce using rule 85 (Selector -> DOT ID .)
    CARET           reduce using rule 85 (Selector -> DOT ID .)
    STAR            reduce using rule 85 (Selector -> DOT ID .)
    DIVIDE          reduce using rule 85 (Selector -> DOT ID .)
    MODULO          reduce using rule 85 (Selector -> DOT ID .)
    LSHIFT          reduce using rule 85 (Selector -> DOT ID .)
    RSHIFT          reduce using rule 85 (Selector -> DOT ID .)
    AMP             reduce using rule 85 (Selector -> DOT ID .)
    COMMA           reduce using rule 85 (Selector -> DOT ID .)
    SEMICOLON       reduce using rule 85 (Selector -> DOT ID .)
    RSQUARE         reduce using rule 85 (Selector -> DOT ID .)
    PLUS_PLUS       reduce using rule 85 (Selector -> DOT ID .)
    MINUS_MINUS     reduce using rule 85 (Selector -> DOT ID .)
    PLUS_EQ         reduce using rule 85 (Selector -> DOT ID .)
    MINUS_EQ        reduce using rule 85 (Selector -> DOT ID .)
    STAR_EQ         reduce using rule 85 (Selector -> DOT ID .)
    DIVIDE_EQ       reduce using rule 85 (Selector -> DOT ID .)
    MODULO_EQ       reduce using rule 85 (Selector -> DOT ID .)
    AMP_EQ          reduce using rule 85 (Selector -> DOT ID .)
    OR_EQ           reduce using rule 85 (Selector -> DOT ID .)
    CARET_EQ        reduce using rule 85 (Selector -> DOT ID .)
    EQ              reduce using rule 85 (Selector -> DOT ID .)
    RROUND          reduce using rule 85 (Selector -> DOT ID .)
    ELSE            reduce using rule 85 (Selector -> DOT ID .)
    LCURLY          reduce using rule 85 (Selector -> DOT ID .)
    RCURLY          reduce using rule 85 (Selector -> DOT ID .)


state 239

    (86) Index -> LSQUARE Expression . RSQUARE
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    RSQUARE         shift and go to state 270
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 240

    (87) Arguments -> LROUND ExpressionList . RROUND
    (35) ExpressionList -> ExpressionList . COMMA Expression

    RROUND          shift and go to state 271
    COMMA           shift and go to state 145


state 241

    (88) Arguments -> LROUND RROUND .

    DOT             reduce using rule 88 (Arguments -> LROUND RROUND .)
    LSQUARE         reduce using rule 88 (Arguments -> LROUND RROUND .)
    LROUND          reduce using rule 88 (Arguments -> LROUND RROUND .)
    OR_OR           reduce using rule 88 (Arguments -> LROUND RROUND .)
    AMP_AMP         reduce using rule 88 (Arguments -> LROUND RROUND .)
    EQ_EQ           reduce using rule 88 (Arguments -> LROUND RROUND .)
    NOT_EQ          reduce using rule 88 (Arguments -> LROUND RROUND .)
    LT              reduce using rule 88 (Arguments -> LROUND RROUND .)
    LE              reduce using rule 88 (Arguments -> LROUND RROUND .)
    GT              reduce using rule 88 (Arguments -> LROUND RROUND .)
    GE              reduce using rule 88 (Arguments -> LROUND RROUND .)
    PLUS            reduce using rule 88 (Arguments -> LROUND RROUND .)
    MINUS           reduce using rule 88 (Arguments -> LROUND RROUND .)
    OR              reduce using rule 88 (Arguments -> LROUND RROUND .)
    CARET           reduce using rule 88 (Arguments -> LROUND RROUND .)
    STAR            reduce using rule 88 (Arguments -> LROUND RROUND .)
    DIVIDE          reduce using rule 88 (Arguments -> LROUND RROUND .)
    MODULO          reduce using rule 88 (Arguments -> LROUND RROUND .)
    LSHIFT          reduce using rule 88 (Arguments -> LROUND RROUND .)
    RSHIFT          reduce using rule 88 (Arguments -> LROUND RROUND .)
    AMP             reduce using rule 88 (Arguments -> LROUND RROUND .)
    COMMA           reduce using rule 88 (Arguments -> LROUND RROUND .)
    SEMICOLON       reduce using rule 88 (Arguments -> LROUND RROUND .)
    RSQUARE         reduce using rule 88 (Arguments -> LROUND RROUND .)
    PLUS_PLUS       reduce using rule 88 (Arguments -> LROUND RROUND .)
    MINUS_MINUS     reduce using rule 88 (Arguments -> LROUND RROUND .)
    PLUS_EQ         reduce using rule 88 (Arguments -> LROUND RROUND .)
    MINUS_EQ        reduce using rule 88 (Arguments -> LROUND RROUND .)
    STAR_EQ         reduce using rule 88 (Arguments -> LROUND RROUND .)
    DIVIDE_EQ       reduce using rule 88 (Arguments -> LROUND RROUND .)
    MODULO_EQ       reduce using rule 88 (Arguments -> LROUND RROUND .)
    AMP_EQ          reduce using rule 88 (Arguments -> LROUND RROUND .)
    OR_EQ           reduce using rule 88 (Arguments -> LROUND RROUND .)
    CARET_EQ        reduce using rule 88 (Arguments -> LROUND RROUND .)
    EQ              reduce using rule 88 (Arguments -> LROUND RROUND .)
    RROUND          reduce using rule 88 (Arguments -> LROUND RROUND .)
    ELSE            reduce using rule 88 (Arguments -> LROUND RROUND .)
    LCURLY          reduce using rule 88 (Arguments -> LROUND RROUND .)
    RCURLY          reduce using rule 88 (Arguments -> LROUND RROUND .)


state 242

    (60) Operand -> LROUND Expression RROUND .

    DOT             reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LSQUARE         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LROUND          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR_OR           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP_AMP         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    EQ_EQ           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    NOT_EQ          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LT              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LE              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    GT              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    GE              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    CARET           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    STAR            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    DIVIDE          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MODULO          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LSHIFT          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RSHIFT          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP             reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    COMMA           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    SEMICOLON       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RSQUARE         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS_PLUS       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS_MINUS     reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS_EQ         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS_EQ        reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    STAR_EQ         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    DIVIDE_EQ       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MODULO_EQ       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP_EQ          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR_EQ           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    CARET_EQ        reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    EQ              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RROUND          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    ELSE            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LCURLY          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RCURLY          reduce using rule 60 (Operand -> LROUND Expression RROUND .)


state 243

    (75) LiteralValue -> lcurly rcurly .

    DOT             reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LSQUARE         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LROUND          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR_OR           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP_AMP         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    EQ_EQ           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    NOT_EQ          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LT              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LE              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    GT              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    GE              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    CARET           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    STAR            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    DIVIDE          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MODULO          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LSHIFT          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RSHIFT          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP             reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    COMMA           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    SEMICOLON       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RSQUARE         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS_PLUS       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS_MINUS     reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS_EQ         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS_EQ        reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    STAR_EQ         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    DIVIDE_EQ       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MODULO_EQ       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP_EQ          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR_EQ           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    CARET_EQ        reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    EQ              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RROUND          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    ELSE            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LCURLY          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RCURLY          reduce using rule 75 (LiteralValue -> lcurly rcurly .)


state 244

    (76) LiteralValue -> lcurly ElementList . rcurly
    (78) ElementList -> ElementList . COMMA Element
    (2) rcurly -> . RCURLY

    COMMA           shift and go to state 273
    RCURLY          shift and go to state 114

    rcurly                         shift and go to state 272

state 245

    (77) ElementList -> Element .

    COMMA           reduce using rule 77 (ElementList -> Element .)
    RCURLY          reduce using rule 77 (ElementList -> Element .)


state 246

    (79) Element -> Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 79 (Element -> Expression .)
    RCURLY          reduce using rule 79 (Element -> Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 247

    (80) Element -> LiteralValue .

    COMMA           reduce using rule 80 (Element -> LiteralValue .)
    RCURLY          reduce using rule 80 (Element -> LiteralValue .)


state 248

    (11) ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .

    SEMICOLON       reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    EQ              reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    LCURLY          reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    FUNC            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    CONST           reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    TYPE            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    VAR             reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    $end            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    RROUND          reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    COMMA           reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)


state 249

    (17) StructType -> STRUCT lcurly FieldDeclList rcurly .

    SEMICOLON       reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    EQ              reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    LCURLY          reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    FUNC            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    CONST           reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    TYPE            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    VAR             reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    $end            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    RROUND          reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    COMMA           reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)


state 250

    (18) FieldDeclList -> FieldDeclList FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 274


state 251

    (19) FieldDeclList -> FieldDecl SEMICOLON .

    RCURLY          reduce using rule 19 (FieldDeclList -> FieldDecl SEMICOLON .)
    ID              reduce using rule 19 (FieldDeclList -> FieldDecl SEMICOLON .)


state 252

    (20) FieldDecl -> IdentifierList Type .

    SEMICOLON       reduce using rule 20 (FieldDecl -> IdentifierList Type .)


state 253

    (23) StatementList -> StatementList Statement SEMICOLON .

    RCURLY          reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    RETURN          reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    BREAK           reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    CONTINUE        reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    GOTO            reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    IF              reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    CONST           reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    TYPE            reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    VAR             reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    ID              reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    LCURLY          reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    FOR             reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    PLUS            reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    MINUS           reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    NOT             reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    CARET           reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    STAR            reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    AMP             reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    LROUND          reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    INT_LIT         reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    FLOAT_LIT       reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    STRING_LIT      reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    BOOL_LIT        reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    CHAR_LIT        reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    NIL             reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    STRUCT          reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)
    LSQUARE         reduce using rule 23 (StatementList -> StatementList Statement SEMICOLON .)


state 254

    (147) LabeledStmt -> Label COLON Statement .

    SEMICOLON       reduce using rule 147 (LabeledStmt -> Label COLON Statement .)


state 255

    (177) ReturnStmt -> RETURN ExpressionList SEMICOLON .

    SEMICOLON       reduce using rule 177 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)


state 256

    (151) Assignment -> ExpressionList assign_op ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 151 (Assignment -> ExpressionList assign_op ExpressionList .)
    LCURLY          reduce using rule 151 (Assignment -> ExpressionList assign_op ExpressionList .)
    COMMA           shift and go to state 145


state 257

    (179) BreakStmt -> BREAK Label SEMICOLON .

    SEMICOLON       reduce using rule 179 (BreakStmt -> BREAK Label SEMICOLON .)


state 258

    (181) ContinueStmt -> CONTINUE Label SEMICOLON .

    SEMICOLON       reduce using rule 181 (ContinueStmt -> CONTINUE Label SEMICOLON .)


state 259

    (182) GotoStmt -> GOTO Label SEMICOLON .

    SEMICOLON       reduce using rule 182 (GotoStmt -> GOTO Label SEMICOLON .)


state 260

    (183) IfStmt -> IF SimpleStmt SEMICOLON . Expression Block
    (185) IfStmt -> IF SimpleStmt SEMICOLON . Expression ElseStmt
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Expression                     shift and go to state 275
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 261

    (184) IfStmt -> IF Expression Block .

    SEMICOLON       reduce using rule 184 (IfStmt -> IF Expression Block .)


state 262

    (186) IfStmt -> IF Expression ElseStmt .

    SEMICOLON       reduce using rule 186 (IfStmt -> IF Expression ElseStmt .)


state 263

    (187) ElseStmt -> ELSE . IfStmt
    (188) ElseStmt -> ELSE . Block
    (183) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (184) IfStmt -> . IF Expression Block
    (185) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (186) IfStmt -> . IF Expression ElseStmt
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    IF              shift and go to state 131
    LCURLY          shift and go to state 66

    IfStmt                         shift and go to state 276
    Block                          shift and go to state 277
    lcurly                         shift and go to state 65

state 264

    (163) ForLoop -> FOR InitStmt SEMICOLON . Condition SEMICOLON PostStmt
    (164) ForLoop -> FOR InitStmt SEMICOLON . Condition SEMICOLON
    (165) ForLoop -> FOR InitStmt SEMICOLON . SEMICOLON PostStmt
    (166) ForLoop -> FOR InitStmt SEMICOLON . SEMICOLON
    (175) Condition -> . Expression
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 278
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Condition                      shift and go to state 279
    Expression                     shift and go to state 267
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 265

    (169) ForLoop -> FOR SEMICOLON SEMICOLON . PostStmt
    (170) ForLoop -> FOR SEMICOLON SEMICOLON .
    (174) PostStmt -> . SimpleStmt
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 170 (ForLoop -> FOR SEMICOLON SEMICOLON .)
    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    PostStmt                       shift and go to state 280
    SimpleStmt                     shift and go to state 281
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    Expression                     shift and go to state 132
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 266

    (167) ForLoop -> FOR SEMICOLON Condition . SEMICOLON PostStmt
    (168) ForLoop -> FOR SEMICOLON Condition . SEMICOLON

    SEMICOLON       shift and go to state 282


state 267

    (175) Condition -> Expression .
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression

    SEMICOLON       reduce using rule 175 (Condition -> Expression .)
    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163


state 268

    (171) WhileLoop -> FOR Condition Block .

    LCURLY          reduce using rule 171 (WhileLoop -> FOR Condition Block .)


state 269

    (41) ShortVarDecl -> IdentifierList ASSIGN ExpressionList . SEMICOLON
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       shift and go to state 283
    COMMA           shift and go to state 145


state 270

    (86) Index -> LSQUARE Expression RSQUARE .

    DOT             reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LSQUARE         reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LROUND          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    OR_OR           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    AMP_AMP         reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    EQ_EQ           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    NOT_EQ          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LT              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LE              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    GT              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    GE              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    PLUS            reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    MINUS           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    OR              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    CARET           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    STAR            reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    DIVIDE          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    MODULO          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LSHIFT          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    RSHIFT          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    AMP             reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    COMMA           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    SEMICOLON       reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    RSQUARE         reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    PLUS_PLUS       reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    MINUS_MINUS     reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    PLUS_EQ         reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    MINUS_EQ        reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    STAR_EQ         reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    DIVIDE_EQ       reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    MODULO_EQ       reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    AMP_EQ          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    OR_EQ           reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    CARET_EQ        reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    EQ              reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    RROUND          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    ELSE            reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    LCURLY          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)
    RCURLY          reduce using rule 86 (Index -> LSQUARE Expression RSQUARE .)


state 271

    (87) Arguments -> LROUND ExpressionList RROUND .

    DOT             reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LSQUARE         reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LROUND          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    OR_OR           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    AMP_AMP         reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    EQ_EQ           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    NOT_EQ          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LT              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LE              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    GT              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    GE              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS            reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    OR              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    CARET           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    STAR            reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    DIVIDE          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    MODULO          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LSHIFT          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    RSHIFT          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    AMP             reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    COMMA           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    SEMICOLON       reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    RSQUARE         reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS_PLUS       reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS_MINUS     reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS_EQ         reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS_EQ        reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    STAR_EQ         reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    DIVIDE_EQ       reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    MODULO_EQ       reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    AMP_EQ          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    OR_EQ           reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    CARET_EQ        reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    EQ              reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    RROUND          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    ELSE            reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    LCURLY          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)
    RCURLY          reduce using rule 87 (Arguments -> LROUND ExpressionList RROUND .)


state 272

    (76) LiteralValue -> lcurly ElementList rcurly .

    DOT             reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LSQUARE         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LROUND          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR_OR           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP_AMP         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    EQ_EQ           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    NOT_EQ          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LT              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LE              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    GT              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    GE              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    CARET           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    STAR            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    DIVIDE          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MODULO          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LSHIFT          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RSHIFT          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP             reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    COMMA           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    SEMICOLON       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RSQUARE         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS_PLUS       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS_MINUS     reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS_EQ         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS_EQ        reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    STAR_EQ         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    DIVIDE_EQ       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MODULO_EQ       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP_EQ          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR_EQ           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    CARET_EQ        reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    EQ              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RROUND          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    ELSE            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LCURLY          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RCURLY          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)


state 273

    (78) ElementList -> ElementList COMMA . Element
    (79) Element -> . Expression
    (80) Element -> . LiteralValue
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (1) lcurly -> . LCURLY
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          shift and go to state 66
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    ID              shift and go to state 92
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    Element                        shift and go to state 284
    Expression                     shift and go to state 246
    LiteralValue                   shift and go to state 247
    UnaryExpr                      shift and go to state 77
    lcurly                         shift and go to state 173
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 274

    (18) FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .

    RCURLY          reduce using rule 18 (FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .)
    ID              reduce using rule 18 (FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .)


state 275

    (183) IfStmt -> IF SimpleStmt SEMICOLON Expression . Block
    (185) IfStmt -> IF SimpleStmt SEMICOLON Expression . ElseStmt
    (90) Expression -> Expression . OR_OR Expression
    (91) Expression -> Expression . AMP_AMP Expression
    (92) Expression -> Expression . EQ_EQ Expression
    (93) Expression -> Expression . NOT_EQ Expression
    (94) Expression -> Expression . LT Expression
    (95) Expression -> Expression . LE Expression
    (96) Expression -> Expression . GT Expression
    (97) Expression -> Expression . GE Expression
    (98) Expression -> Expression . PLUS Expression
    (99) Expression -> Expression . MINUS Expression
    (100) Expression -> Expression . OR Expression
    (101) Expression -> Expression . CARET Expression
    (102) Expression -> Expression . STAR Expression
    (103) Expression -> Expression . DIVIDE Expression
    (104) Expression -> Expression . MODULO Expression
    (105) Expression -> Expression . LSHIFT Expression
    (106) Expression -> Expression . RSHIFT Expression
    (107) Expression -> Expression . AMP Expression
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (187) ElseStmt -> . ELSE IfStmt
    (188) ElseStmt -> . ELSE Block
    (1) lcurly -> . LCURLY

    OR_OR           shift and go to state 146
    AMP_AMP         shift and go to state 147
    EQ_EQ           shift and go to state 148
    NOT_EQ          shift and go to state 149
    LT              shift and go to state 150
    LE              shift and go to state 151
    GT              shift and go to state 152
    GE              shift and go to state 153
    PLUS            shift and go to state 154
    MINUS           shift and go to state 155
    OR              shift and go to state 156
    CARET           shift and go to state 157
    STAR            shift and go to state 158
    DIVIDE          shift and go to state 159
    MODULO          shift and go to state 160
    LSHIFT          shift and go to state 161
    RSHIFT          shift and go to state 162
    AMP             shift and go to state 163
    ELSE            shift and go to state 263
    LCURLY          shift and go to state 66

    Block                          shift and go to state 285
    ElseStmt                       shift and go to state 286
    lcurly                         shift and go to state 65

state 276

    (187) ElseStmt -> ELSE IfStmt .

    SEMICOLON       reduce using rule 187 (ElseStmt -> ELSE IfStmt .)


state 277

    (188) ElseStmt -> ELSE Block .

    SEMICOLON       reduce using rule 188 (ElseStmt -> ELSE Block .)


state 278

    (165) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON . PostStmt
    (166) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON .
    (174) PostStmt -> . SimpleStmt
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 166 (ForLoop -> FOR InitStmt SEMICOLON SEMICOLON .)
    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    PostStmt                       shift and go to state 287
    SimpleStmt                     shift and go to state 281
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    Expression                     shift and go to state 132
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 279

    (163) ForLoop -> FOR InitStmt SEMICOLON Condition . SEMICOLON PostStmt
    (164) ForLoop -> FOR InitStmt SEMICOLON Condition . SEMICOLON

    SEMICOLON       shift and go to state 288


state 280

    (169) ForLoop -> FOR SEMICOLON SEMICOLON PostStmt .

    LCURLY          reduce using rule 169 (ForLoop -> FOR SEMICOLON SEMICOLON PostStmt .)


state 281

    (174) PostStmt -> SimpleStmt .

    LCURLY          reduce using rule 174 (PostStmt -> SimpleStmt .)


state 282

    (167) ForLoop -> FOR SEMICOLON Condition SEMICOLON . PostStmt
    (168) ForLoop -> FOR SEMICOLON Condition SEMICOLON .
    (174) PostStmt -> . SimpleStmt
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 168 (ForLoop -> FOR SEMICOLON Condition SEMICOLON .)
    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    PostStmt                       shift and go to state 289
    SimpleStmt                     shift and go to state 281
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    Expression                     shift and go to state 132
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 283

    (41) ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .

    SEMICOLON       reduce using rule 41 (ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .)
    LCURLY          reduce using rule 41 (ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .)


state 284

    (78) ElementList -> ElementList COMMA Element .

    COMMA           reduce using rule 78 (ElementList -> ElementList COMMA Element .)
    RCURLY          reduce using rule 78 (ElementList -> ElementList COMMA Element .)


state 285

    (183) IfStmt -> IF SimpleStmt SEMICOLON Expression Block .

    SEMICOLON       reduce using rule 183 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)


state 286

    (185) IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .

    SEMICOLON       reduce using rule 185 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)


state 287

    (165) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt .

    LCURLY          reduce using rule 165 (ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt .)


state 288

    (163) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON . PostStmt
    (164) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON .
    (174) PostStmt -> . SimpleStmt
    (142) SimpleStmt -> . ExpressionStmt
    (143) SimpleStmt -> . IncDecStmt
    (144) SimpleStmt -> . Assignment
    (145) SimpleStmt -> . ShortVarDecl
    (146) ExpressionStmt -> . Expression
    (149) IncDecStmt -> . Expression PLUS_PLUS
    (150) IncDecStmt -> . Expression MINUS_MINUS
    (151) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (89) Expression -> . UnaryExpr
    (90) Expression -> . Expression OR_OR Expression
    (91) Expression -> . Expression AMP_AMP Expression
    (92) Expression -> . Expression EQ_EQ Expression
    (93) Expression -> . Expression NOT_EQ Expression
    (94) Expression -> . Expression LT Expression
    (95) Expression -> . Expression LE Expression
    (96) Expression -> . Expression GT Expression
    (97) Expression -> . Expression GE Expression
    (98) Expression -> . Expression PLUS Expression
    (99) Expression -> . Expression MINUS Expression
    (100) Expression -> . Expression OR Expression
    (101) Expression -> . Expression CARET Expression
    (102) Expression -> . Expression STAR Expression
    (103) Expression -> . Expression DIVIDE Expression
    (104) Expression -> . Expression MODULO Expression
    (105) Expression -> . Expression LSHIFT Expression
    (106) Expression -> . Expression RSHIFT Expression
    (107) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (108) UnaryExpr -> . PrimaryExpr
    (109) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (126) unary_op -> . PLUS
    (127) unary_op -> . MINUS
    (128) unary_op -> . NOT
    (129) unary_op -> . CARET
    (130) unary_op -> . STAR
    (131) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 164 (ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON .)
    ID              shift and go to state 206
    PLUS            shift and go to state 78
    MINUS           shift and go to state 79
    NOT             shift and go to state 86
    CARET           shift and go to state 80
    STAR            shift and go to state 81
    AMP             shift and go to state 82
    LROUND          shift and go to state 89
    INT_LIT         shift and go to state 93
    FLOAT_LIT       shift and go to state 94
    STRING_LIT      shift and go to state 95
    BOOL_LIT        shift and go to state 96
    CHAR_LIT        shift and go to state 97
    NIL             shift and go to state 98
    STRUCT          shift and go to state 59
    LSQUARE         shift and go to state 58

    PostStmt                       shift and go to state 290
    SimpleStmt                     shift and go to state 281
    ExpressionStmt                 shift and go to state 135
    IncDecStmt                     shift and go to state 136
    Assignment                     shift and go to state 137
    ShortVarDecl                   shift and go to state 138
    Expression                     shift and go to state 132
    ExpressionList                 shift and go to state 127
    IdentifierList                 shift and go to state 141
    UnaryExpr                      shift and go to state 77
    PrimaryExpr                    shift and go to state 83
    unary_op                       shift and go to state 84
    Operand                        shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 90
    CompositeLit                   shift and go to state 91
    LiteralType                    shift and go to state 99
    StructType                     shift and go to state 100
    ArrayType                      shift and go to state 101
    SliceType                      shift and go to state 102

state 289

    (167) ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt .

    LCURLY          reduce using rule 167 (ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt .)


state 290

    (163) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt .

    LCURLY          reduce using rule 163 (ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 92 resolved using rule (OperandName -> ID)
WARNING: rejected rule (LiteralType -> ID) in state 92
WARNING: reduce/reduce conflict in state 139 resolved using rule (IdentifierList -> ID)
WARNING: rejected rule (OperandName -> ID) in state 139
WARNING: reduce/reduce conflict in state 206 resolved using rule (IdentifierList -> ID)
WARNING: rejected rule (OperandName -> ID) in state 206
WARNING: reduce/reduce conflict in state 206 resolved using rule (OperandName -> ID)
WARNING: rejected rule (LiteralType -> ID) in state 206
