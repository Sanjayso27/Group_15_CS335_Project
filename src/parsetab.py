
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'SourceFileleftOR_ORleftAMP_AMPleftEQ_EQNOT_EQLTLEGTGEleftPLUSMINUSORCARETleftSTARDIVIDEMODULOLSHIFTRSHIFTAMPAMP AMP_AMP AMP_EQ AND_NOT ASSIGN BOOL_LIT BR BREAK CARET CARET_EQ CASE CHAR_LIT COLON COMMA CONST CONTINUE DATA_TYPE DEFAULT DIVIDE DIVIDE_EQ DOT DOUBLE_QUOTES ELSE EQ EQ_EQ FLOAT_LIT FOR FUNC GE GOTO GT ID IF IMPORT INT_LIT LCURLY LE LROUND LSHIFT LSQUARE LT MAKE MINUS MINUS_EQ MINUS_MINUS MODULO MODULO_EQ NIL NOT NOT_EQ OR OR_EQ OR_OR PACKAGE PLUS PLUS_EQ PLUS_PLUS RCURLY RETURN RROUND RSHIFT RSQUARE SEMICOLON SINGLE_QUOTES STAR STAR_EQ STRING_LIT STRUCT SWITCH TYPE VAR\n        lcurly  : LCURLY\n        \n        rcurly  : RCURLY\n        \n        Type    : TypeName\n                | TypeLit\n        \n        TypeName\t: ID\n                    | DATA_TYPE\n        \n        TypeLit\t: ArrayType \n                | StructType \n                | PointerType \n                | SliceType\n        \n        ArrayType : LSQUARE ArrayLength RSQUARE ElementType\n        \n        ArrayLength : Expression\n        \n        SliceType \t: LSQUARE RSQUARE ElementType\n        \n        ElementType : Type\n        \n        PointerType\t: STAR BaseType\n        \n        BaseType\t: Type\n        \n        StructType \t: STRUCT lcurly FieldDeclList rcurly\n        \n        FieldDeclList \t: FieldDeclList FieldDecl SEMICOLON \n                        | FieldDecl SEMICOLON\n        \n        FieldDecl \t: IdentifierList Type\n        \n        Block\t: lcurly StatementList rcurly\n                | lcurly rcurly\n        \n        StatementList \t: StatementList Statement SEMICOLON\n                        | Statement SEMICOLON\n        \n        Declaration\t: ConstDecl SEMICOLON \n                    | TypeDecl SEMICOLON\n                    | VarDecl SEMICOLON\n        \n        TopLevelDecl\t: Declaration \n                        | FunctionDecl \n                        | MethodDecl\n        \n        ConstDecl\t:\tCONST ConstSpec\n        \n        ConstSpec   :\tIdentifierList EQ ExpressionList\n        \n        IdentifierList\t: IdentifierList COMMA ID\n                        | ID\n        \n        ExpressionList\t: ExpressionList COMMA Expression\n                        | Expression\n        \n        TypeDecl\t: TYPE ID Type\n        \n        VarDecl\t: VAR VarSpec\n        \n        VarSpec\t: IdentifierList Type \n                | IdentifierList Type EQ ExpressionList\n        \n        ShortVarDecl : IdentifierList ASSIGN ExpressionList SEMICOLON\n        \n        FunctionDecl \t: FUNC FunctionName Signature FunctionBody\n                        | FUNC FunctionName Signature SEMICOLON\n        \n        FunctionName\t: ID\n        \n        Signature      \t: Parameters\n                        | Parameters Result\n        \n        Parameters \t: LROUND ParameterList RROUND\n                    | LROUND RROUND\n        \n        ParameterList\t: ParameterList COMMA ParameterDecl \n                        | ParameterDecl\n        \n        ParameterDecl\t: IdentifierList Type\n        \n        Result \t: Type\n        \n        FunctionBody\t: Block\n        \n        MethodDecl\t: FUNC Receiver MethodName Signature\n                    | FUNC Receiver MethodName Signature FunctionBody\n        \n        MethodName  : ID\n        \n        Receiver\t: LROUND ParameterDecl RROUND\n        \n        Operand : Literal \n                | OperandName\n                | LROUND Expression RROUND\n        \n        Literal\t: BasicLit \n                | CompositeLit \n        \n        BasicLit\t: INT_LIT\n                    | FLOAT_LIT\n                    | STRING_LIT\n                    | BOOL_LIT\n                    | CHAR_LIT\n                    | NIL\n        \n        OperandName : ID \n        \n        CompositeLit\t: LiteralType LiteralValue\n        \n        LiteralType\t: StructType \n                    | ArrayType \n                    | SliceType \n                    | ID\n        \n        LiteralValue \t: lcurly rcurly\n                        | lcurly ElementList rcurly\n        \n        ElementList\t: Element\n                    | ElementList COMMA Element\n        \n        Element : Expression\n                | LiteralValue\n        \n        PrimaryExpr\t: Operand \n                    | PrimaryExpr Selector \n                    | PrimaryExpr Index \n                    | PrimaryExpr Arguments\n        \n        Selector\t: DOT ID\n        \n        Index\t: LSQUARE Expression RSQUARE\n        \n        Arguments\t: LROUND ExpressionList RROUND\n                    | LROUND RROUND\n        \n        Expression \t: UnaryExpr \n                    | Expression OR_OR Expression\n                    | Expression AMP_AMP Expression\n                    | Expression EQ_EQ Expression\n                    | Expression NOT_EQ Expression\n                    | Expression LT Expression\n                    | Expression LE Expression\n                    | Expression GT Expression\n                    | Expression GE Expression\n                    | Expression PLUS Expression\n                    | Expression MINUS Expression\n                    | Expression OR Expression\n                    | Expression CARET Expression\n                    | Expression STAR Expression\n                    | Expression DIVIDE Expression\n                    | Expression MODULO Expression\n                    | Expression LSHIFT Expression\n                    | Expression RSHIFT Expression\n                    | Expression AMP Expression\n        \n        UnaryExpr  \t: PrimaryExpr \n                    | unary_op UnaryExpr\n        \n        rel_op\t: EQ_EQ \n                | NOT_EQ \n                | LT \n                | LE \n                | GT \n                | GE\n        \n        add_op\t: PLUS \n                | MINUS\n                | OR \n                | CARET\n        \n        mul_op\t: STAR \n                | DIVIDE\n                | MODULO\n                | LSHIFT\n                | RSHIFT\n                | AMP\n        \n        unary_op \t: PLUS\n                    | MINUS\n                    | NOT\n                    | CARET \n                    | STAR\n                    | AMP\n        \n        Statement \t: Declaration \n                    | LabeledStmt  \n                    | ReturnStmt \n                    | BreakStmt \n                    | ContinueStmt \n                    | GotoStmt\n                    | Block \n                    | IfStmt \n                    | ForStmt\n                    | SimpleStmt SEMICOLON\n\n        \n        SimpleStmt\t: ExpressionStmt\n                    | IncDecStmt \n                    | Assignment \n                    | ShortVarDecl\n        \n        ExpressionStmt \t: Expression\n                 \n        LabeledStmt\t: Label COLON Statement\n        \n        Label   : ID\n        \n        IncDecStmt \t: Expression PLUS_PLUS\n                    | Expression MINUS_MINUS\n        \n        Assignment\t: ExpressionList assign_op ExpressionList\n        \n        assign_op\t: PLUS_EQ\n                    | MINUS_EQ\n                    | STAR_EQ\n                    | DIVIDE_EQ\n                    | MODULO_EQ\n                    | AMP_EQ\n                    | OR_EQ\n                    | CARET_EQ\n                    | EQ\n        \n        ForStmt : ForLoop Block\n                | WhileLoop Block\n        \n        ForLoop\t: FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt\n                | FOR InitStmt SEMICOLON Condition SEMICOLON\n                | FOR InitStmt SEMICOLON SEMICOLON PostStmt\n                | FOR InitStmt SEMICOLON SEMICOLON\n                | FOR SEMICOLON Condition SEMICOLON PostStmt\n                | FOR SEMICOLON Condition SEMICOLON\n                | FOR SEMICOLON SEMICOLON PostStmt\n                | FOR SEMICOLON SEMICOLON \n        \n        WhileLoop\t: FOR Condition Block\n                    | FOR Block \n        \n        InitStmt\t: SimpleStmt\n        \n        PostStmt\t: SimpleStmt\n        \n        Condition \t: Expression\n        \n        ReturnStmt\t: RETURN SEMICOLON\n                    | RETURN ExpressionList SEMICOLON\n        \n        BreakStmt\t: BREAK SEMICOLON\n                    | BREAK Label SEMICOLON\n        \n        ContinueStmt \t: CONTINUE SEMICOLON\n                        | CONTINUE Label SEMICOLON\n        \n        GotoStmt\t: GOTO Label SEMICOLON\n        \n        IfStmt \t: IF SimpleStmt SEMICOLON Expression Block\n                | IF Expression Block\n                | IF SimpleStmt SEMICOLON Expression ElseStmt\n                | IF Expression ElseStmt\n        \n        ElseStmt\t: ELSE IfStmt\n                    | ELSE Block\n        \n        SourceFile\t: PackageClause ImportDeclList TopLevelDeclList\n                    | PackageClause ImportDeclList\n                    | PackageClause TopLevelDeclList\n                    | PackageClause\n        \n        PackageClause   : PACKAGE ID\n        \n        ImportDeclList\t: ImportDeclList ImportDecl SEMICOLON\n                        | ImportDecl SEMICOLON\n        \n        ImportDecl \t: IMPORT ImportPath\n        \n        ImportPath\t: STRING_LIT\n        \n        TopLevelDeclList\t: TopLevelDeclList TopLevelDecl\n                            | TopLevelDecl\n        '
    
_lr_action_items = {'PACKAGE':([0,],[3,]),'$end':([1,2,4,5,7,9,10,11,19,20,22,23,26,27,28,39,41,49,51,52,53,54,55,56,57,62,63,64,67,68,70,72,108,109,112,114,142,144,175,176,181,248,249,],[0,-192,-190,-191,-199,-28,-29,-30,-193,-189,-198,-195,-25,-26,-27,-194,-45,-5,-3,-4,-6,-7,-8,-9,-10,-42,-43,-53,-46,-52,-48,-54,-15,-16,-22,-2,-47,-55,-13,-14,-21,-11,-17,]),'IMPORT':([2,4,19,23,39,],[8,8,-193,-195,-194,]),'FUNC':([2,4,5,7,9,10,11,19,20,22,23,26,27,28,39,41,49,51,52,53,54,55,56,57,62,63,64,67,68,70,72,108,109,112,114,142,144,175,176,181,248,249,],[15,15,15,-199,-28,-29,-30,-193,15,-198,-195,-25,-26,-27,-194,-45,-5,-3,-4,-6,-7,-8,-9,-10,-42,-43,-53,-46,-52,-48,-54,-15,-16,-22,-2,-47,-55,-13,-14,-21,-11,-17,]),'CONST':([2,4,5,7,9,10,11,19,20,22,23,26,27,28,39,41,49,51,52,53,54,55,56,57,62,63,64,65,66,67,68,70,72,108,109,111,112,114,142,144,175,176,181,183,185,248,249,253,],[16,16,16,-199,-28,-29,-30,-193,16,-198,-195,-25,-26,-27,-194,-45,-5,-3,-4,-6,-7,-8,-9,-10,-42,-43,-53,16,-1,-46,-52,-48,-54,-15,-16,16,-22,-2,-47,-55,-13,-14,-21,-24,16,-11,-17,-23,]),'TYPE':([2,4,5,7,9,10,11,19,20,22,23,26,27,28,39,41,49,51,52,53,54,55,56,57,62,63,64,65,66,67,68,70,72,108,109,111,112,114,142,144,175,176,181,183,185,248,249,253,],[17,17,17,-199,-28,-29,-30,-193,17,-198,-195,-25,-26,-27,-194,-45,-5,-3,-4,-6,-7,-8,-9,-10,-42,-43,-53,17,-1,-46,-52,-48,-54,-15,-16,17,-22,-2,-47,-55,-13,-14,-21,-24,17,-11,-17,-23,]),'VAR':([2,4,5,7,9,10,11,19,20,22,23,26,27,28,39,41,49,51,52,53,54,55,56,57,62,63,64,65,66,67,68,70,72,108,109,111,112,114,142,144,175,176,181,183,185,248,249,253,],[18,18,18,-199,-28,-29,-30,-193,18,-198,-195,-25,-26,-27,-194,-45,-5,-3,-4,-6,-7,-8,-9,-10,-42,-43,-53,18,-1,-46,-52,-48,-54,-15,-16,18,-22,-2,-47,-55,-13,-14,-21,-24,18,-11,-17,-23,]),'ID':([3,15,16,17,18,30,32,35,36,38,41,42,46,47,48,58,60,65,66,70,73,78,79,80,81,82,84,86,89,103,105,107,110,111,126,128,129,130,131,140,142,143,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,167,168,169,173,174,177,179,183,185,188,189,190,191,192,193,194,195,196,197,212,217,251,253,260,264,265,273,274,278,282,288,],[19,31,35,36,35,44,35,-34,49,49,49,35,49,92,103,92,49,139,-1,-48,-57,-126,-127,-129,-130,-131,92,-128,92,-33,49,35,92,139,92,200,200,200,206,206,-47,35,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,92,238,92,92,92,49,35,49,-24,139,92,-152,-153,-154,-155,-156,-157,-158,-159,-160,92,92,-19,-23,92,92,206,92,-18,206,206,206,]),'SEMICOLON':([6,12,13,14,21,24,25,26,27,28,33,37,40,41,49,50,51,52,53,54,55,56,57,61,67,68,70,75,76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,108,109,112,113,114,115,116,117,118,119,120,121,122,123,124,126,128,129,132,135,136,137,138,139,140,142,164,165,166,170,172,175,176,178,180,181,182,184,186,187,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,215,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,248,249,250,252,254,255,256,257,258,259,261,262,264,266,267,269,270,271,272,276,277,279,283,285,286,],[23,26,27,28,39,-196,-197,-25,-26,-27,-31,-38,63,-45,-5,-37,-3,-4,-6,-7,-8,-9,-10,-39,-46,-52,-48,-32,-36,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-15,-16,-22,183,-2,-132,-133,-134,-135,-136,-137,-138,-139,-140,184,186,198,201,-146,-142,-143,-144,-145,-69,212,-47,-82,-83,-84,-109,-70,-13,-14,251,-40,-21,253,-141,-176,255,-178,257,-148,-180,258,259,260,-146,-69,-149,-150,-161,-162,264,265,-173,-146,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-11,-17,274,-20,-147,-177,-151,-179,-181,-182,-184,-186,278,282,-175,283,-86,-87,-76,-187,-188,288,-41,-183,-185,]),'STRING_LIT':([8,47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[25,95,95,95,-1,-126,-127,-129,-130,-131,95,-128,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,95,-24,95,95,-152,-153,-154,-155,-156,-157,-158,-159,-160,95,95,-23,95,95,95,95,95,95,95,]),'LROUND':([15,29,31,43,44,47,58,65,66,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,110,111,114,126,131,139,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,172,173,183,185,188,189,190,191,192,193,194,195,196,197,206,212,217,238,241,242,243,253,260,264,265,270,271,272,273,278,282,288,],[32,42,-44,42,-56,89,89,89,-1,-126,-127,-129,-130,-131,169,89,-81,-128,-58,-59,89,-61,-62,-69,-63,-64,-65,-66,-67,-68,89,89,-2,89,89,-69,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,89,-82,-83,-84,89,89,-70,89,-24,89,89,-152,-153,-154,-155,-156,-157,-158,-159,-160,-69,89,89,-85,-88,-60,-75,-23,89,89,89,-86,-87,-76,89,89,89,89,]),'EQ':([34,35,49,51,52,53,54,55,56,57,61,77,83,85,87,88,90,91,92,93,94,95,96,97,98,103,108,109,114,127,132,139,164,165,166,170,172,175,176,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,248,249,270,271,272,],[47,-34,-5,-3,-4,-6,-7,-8,-9,-10,110,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-33,-15,-16,-2,197,-36,-69,-82,-83,-84,-109,-70,-13,-14,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-11,-17,-86,-87,-76,]),'COMMA':([34,35,38,46,49,51,52,53,54,55,56,57,69,71,74,75,76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,103,108,109,114,127,132,139,141,164,165,166,170,172,175,176,179,180,187,205,206,216,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,241,242,243,244,245,246,247,248,249,256,269,270,271,272,284,],[48,-34,48,48,-5,-3,-4,-6,-7,-8,-9,-10,143,-50,-51,145,-36,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-33,-15,-16,-2,145,-36,-34,48,-82,-83,-84,-109,-70,-13,-14,48,145,145,-36,-34,-36,-49,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,145,-88,-60,-75,273,-77,-79,-80,-11,-17,145,145,-86,-87,-76,-78,]),'DATA_TYPE':([35,36,38,41,46,60,70,103,105,142,174,179,],[-34,53,53,53,53,53,-48,-33,53,-47,53,53,]),'LSQUARE':([35,36,38,41,46,47,58,60,65,66,70,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,103,105,110,111,114,126,131,139,140,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,172,173,174,179,183,185,188,189,190,191,192,193,194,195,196,197,206,212,217,238,241,242,243,253,260,264,265,270,271,272,273,278,282,288,],[-34,58,58,58,58,58,58,58,58,-1,-48,-126,-127,-129,-130,-131,168,58,-81,-128,-58,-59,58,-61,-62,-69,-63,-64,-65,-66,-67,-68,-33,58,58,58,-2,58,58,-69,58,-47,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-82,-83,-84,58,58,-70,58,58,58,-24,58,58,-152,-153,-154,-155,-156,-157,-158,-159,-160,-69,58,58,-85,-88,-60,-75,-23,58,58,58,-86,-87,-76,58,58,58,58,]),'STRUCT':([35,36,38,41,46,47,58,60,65,66,70,78,79,80,81,82,84,86,89,103,105,110,111,126,131,140,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,174,179,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[-34,59,59,59,59,59,59,59,59,-1,-48,-126,-127,-129,-130,-131,59,-128,59,-33,59,59,59,59,59,59,-47,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-24,59,59,-152,-153,-154,-155,-156,-157,-158,-159,-160,59,59,-23,59,59,59,59,59,59,59,]),'STAR':([35,36,38,41,46,47,58,60,65,66,70,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,103,105,106,110,111,114,126,131,132,139,140,142,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,179,183,185,188,189,190,191,192,193,194,195,196,197,205,206,212,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,253,260,264,265,267,270,271,272,273,275,278,282,288,],[-34,60,60,60,60,81,81,60,81,-1,-48,158,-89,-126,-127,-129,-130,-131,-108,81,-81,-128,-58,-59,81,-61,-62,-69,-63,-64,-65,-66,-67,-68,-33,60,158,81,81,-2,81,81,158,-69,81,-47,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,81,-82,-83,-84,81,81,-109,158,-70,81,60,60,-24,81,81,-152,-153,-154,-155,-156,-157,-158,-159,-160,158,-69,81,158,81,158,158,158,158,158,158,158,158,158,158,158,158,158,-102,-103,-104,-105,-106,-107,-85,158,-88,-60,-75,158,-23,81,81,81,158,-86,-87,-76,81,158,81,81,81,]),'LCURLY':([40,41,49,51,52,53,54,55,56,57,59,65,66,67,68,70,72,76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,99,100,101,102,108,109,111,112,114,132,133,134,135,136,137,138,139,140,142,164,165,166,170,172,173,175,176,181,183,185,205,206,207,208,213,214,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,248,249,253,256,263,265,268,270,271,272,273,275,278,280,281,282,283,287,288,289,290,],[66,-45,-5,-3,-4,-6,-7,-8,-9,-10,66,66,-1,-46,-52,-48,66,-36,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,66,-71,-72,-73,-15,-16,66,-22,-2,-146,66,66,-142,-143,-144,-145,-74,66,-47,-82,-83,-84,-109,-70,66,-13,-14,-21,-24,66,66,-69,-149,-150,66,-172,-175,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-11,-17,-23,-151,66,-170,-171,-86,-87,-76,66,66,-166,-169,-174,-168,-41,-165,-164,-167,-163,]),'RROUND':([42,45,49,51,52,53,54,55,56,57,69,71,74,76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,108,109,114,164,165,166,169,170,171,172,175,176,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,240,241,242,243,248,249,270,271,272,],[70,73,-5,-3,-4,-6,-7,-8,-9,-10,142,-50,-51,-36,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-15,-16,-2,-82,-83,-84,241,-109,242,-70,-13,-14,-49,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,271,-88,-60,-75,-11,-17,-86,-87,-76,]),'PLUS':([47,58,65,66,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,106,110,111,114,126,131,132,139,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,183,185,188,189,190,191,192,193,194,195,196,197,205,206,212,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,253,260,264,265,267,270,271,272,273,275,278,282,288,],[78,78,78,-1,154,-89,-126,-127,-129,-130,-131,-108,78,-81,-128,-58,-59,78,-61,-62,-69,-63,-64,-65,-66,-67,-68,154,78,78,-2,78,78,154,-69,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,78,-82,-83,-84,78,78,-109,154,-70,78,-24,78,78,-152,-153,-154,-155,-156,-157,-158,-159,-160,154,-69,78,154,78,154,154,154,154,154,154,154,154,154,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,154,-88,-60,-75,154,-23,78,78,78,154,-86,-87,-76,78,154,78,78,78,]),'MINUS':([47,58,65,66,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,106,110,111,114,126,131,132,139,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,183,185,188,189,190,191,192,193,194,195,196,197,205,206,212,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,253,260,264,265,267,270,271,272,273,275,278,282,288,],[79,79,79,-1,155,-89,-126,-127,-129,-130,-131,-108,79,-81,-128,-58,-59,79,-61,-62,-69,-63,-64,-65,-66,-67,-68,155,79,79,-2,79,79,155,-69,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,-82,-83,-84,79,79,-109,155,-70,79,-24,79,79,-152,-153,-154,-155,-156,-157,-158,-159,-160,155,-69,79,155,79,155,155,155,155,155,155,155,155,155,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,155,-88,-60,-75,155,-23,79,79,79,155,-86,-87,-76,79,155,79,79,79,]),'NOT':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[86,86,86,-1,-126,-127,-129,-130,-131,86,-128,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,86,-24,86,86,-152,-153,-154,-155,-156,-157,-158,-159,-160,86,86,-23,86,86,86,86,86,86,86,]),'CARET':([47,58,65,66,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,106,110,111,114,126,131,132,139,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,183,185,188,189,190,191,192,193,194,195,196,197,205,206,212,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,253,260,264,265,267,270,271,272,273,275,278,282,288,],[80,80,80,-1,157,-89,-126,-127,-129,-130,-131,-108,80,-81,-128,-58,-59,80,-61,-62,-69,-63,-64,-65,-66,-67,-68,157,80,80,-2,80,80,157,-69,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,80,-82,-83,-84,80,80,-109,157,-70,80,-24,80,80,-152,-153,-154,-155,-156,-157,-158,-159,-160,157,-69,80,157,80,157,157,157,157,157,157,157,157,157,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,157,-88,-60,-75,157,-23,80,80,80,157,-86,-87,-76,80,157,80,80,80,]),'AMP':([47,58,65,66,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,106,110,111,114,126,131,132,139,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,183,185,188,189,190,191,192,193,194,195,196,197,205,206,212,216,217,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,253,260,264,265,267,270,271,272,273,275,278,282,288,],[82,82,82,-1,163,-89,-126,-127,-129,-130,-131,-108,82,-81,-128,-58,-59,82,-61,-62,-69,-63,-64,-65,-66,-67,-68,163,82,82,-2,82,82,163,-69,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,-82,-83,-84,82,82,-109,163,-70,82,-24,82,82,-152,-153,-154,-155,-156,-157,-158,-159,-160,163,-69,82,163,82,163,163,163,163,163,163,163,163,163,163,163,163,163,-102,-103,-104,-105,-106,-107,-85,163,-88,-60,-75,163,-23,82,82,82,163,-86,-87,-76,82,163,82,82,82,]),'INT_LIT':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[93,93,93,-1,-126,-127,-129,-130,-131,93,-128,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,93,-24,93,93,-152,-153,-154,-155,-156,-157,-158,-159,-160,93,93,-23,93,93,93,93,93,93,93,]),'FLOAT_LIT':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[94,94,94,-1,-126,-127,-129,-130,-131,94,-128,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,94,-24,94,94,-152,-153,-154,-155,-156,-157,-158,-159,-160,94,94,-23,94,94,94,94,94,94,94,]),'BOOL_LIT':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[96,96,96,-1,-126,-127,-129,-130,-131,96,-128,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,96,-24,96,96,-152,-153,-154,-155,-156,-157,-158,-159,-160,96,96,-23,96,96,96,96,96,96,96,]),'CHAR_LIT':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[97,97,97,-1,-126,-127,-129,-130,-131,97,-128,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,97,-24,97,97,-152,-153,-154,-155,-156,-157,-158,-159,-160,97,97,-23,97,97,97,97,97,97,97,]),'NIL':([47,58,65,66,78,79,80,81,82,84,86,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,183,185,188,189,190,191,192,193,194,195,196,197,212,217,253,260,264,265,273,278,282,288,],[98,98,98,-1,-126,-127,-129,-130,-131,98,-128,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,98,-24,98,98,-152,-153,-154,-155,-156,-157,-158,-159,-160,98,98,-23,98,98,98,98,98,98,98,]),'RSQUARE':([58,77,83,85,87,88,90,91,92,93,94,95,96,97,98,104,106,114,164,165,166,170,172,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,270,271,272,],[105,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,174,-12,-2,-82,-83,-84,-109,-70,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,270,-88,-60,-75,-86,-87,-76,]),'RCURLY':([65,66,77,83,85,87,88,90,91,92,93,94,95,96,97,98,111,114,164,165,166,170,172,173,177,183,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,244,245,246,247,251,253,270,271,272,274,284,],[114,-1,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,114,-2,-82,-83,-84,-109,-70,114,114,-24,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,114,-77,-79,-80,-19,-23,-86,-87,-76,-18,-78,]),'RETURN':([65,66,111,183,185,253,],[126,-1,126,-24,126,-23,]),'BREAK':([65,66,111,183,185,253,],[128,-1,128,-24,128,-23,]),'CONTINUE':([65,66,111,183,185,253,],[129,-1,129,-24,129,-23,]),'GOTO':([65,66,111,183,185,253,],[130,-1,130,-24,130,-23,]),'IF':([65,66,111,183,185,253,263,],[131,-1,131,-24,131,-23,131,]),'FOR':([65,66,111,183,185,253,],[140,-1,140,-24,140,-23,]),'OR_OR':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[146,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,146,-2,146,-69,-82,-83,-84,-109,146,-70,146,-69,146,146,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,146,-88,-60,-75,146,146,-86,-87,-76,146,]),'AMP_AMP':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[147,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,147,-2,147,-69,-82,-83,-84,-109,147,-70,147,-69,147,147,147,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,147,-88,-60,-75,147,147,-86,-87,-76,147,]),'EQ_EQ':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[148,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,148,-2,148,-69,-82,-83,-84,-109,148,-70,148,-69,148,148,148,148,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,148,-88,-60,-75,148,148,-86,-87,-76,148,]),'NOT_EQ':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[149,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,149,-2,149,-69,-82,-83,-84,-109,149,-70,149,-69,149,149,149,149,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,149,-88,-60,-75,149,149,-86,-87,-76,149,]),'LT':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[150,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,150,-2,150,-69,-82,-83,-84,-109,150,-70,150,-69,150,150,150,150,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,150,-88,-60,-75,150,150,-86,-87,-76,150,]),'LE':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[151,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,151,-2,151,-69,-82,-83,-84,-109,151,-70,151,-69,151,151,151,151,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,151,-88,-60,-75,151,151,-86,-87,-76,151,]),'GT':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[152,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,152,-2,152,-69,-82,-83,-84,-109,152,-70,152,-69,152,152,152,152,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,152,-88,-60,-75,152,152,-86,-87,-76,152,]),'GE':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[153,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,153,-2,153,-69,-82,-83,-84,-109,153,-70,153,-69,153,153,153,153,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,153,-88,-60,-75,153,153,-86,-87,-76,153,]),'OR':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[156,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,156,-2,156,-69,-82,-83,-84,-109,156,-70,156,-69,156,156,156,156,156,156,156,156,156,156,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,156,-88,-60,-75,156,156,-86,-87,-76,156,]),'DIVIDE':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[159,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,159,-2,159,-69,-82,-83,-84,-109,159,-70,159,-69,159,159,159,159,159,159,159,159,159,159,159,159,159,159,-102,-103,-104,-105,-106,-107,-85,159,-88,-60,-75,159,159,-86,-87,-76,159,]),'MODULO':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[160,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,160,-2,160,-69,-82,-83,-84,-109,160,-70,160,-69,160,160,160,160,160,160,160,160,160,160,160,160,160,160,-102,-103,-104,-105,-106,-107,-85,160,-88,-60,-75,160,160,-86,-87,-76,160,]),'LSHIFT':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[161,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,161,-2,161,-69,-82,-83,-84,-109,161,-70,161,-69,161,161,161,161,161,161,161,161,161,161,161,161,161,161,-102,-103,-104,-105,-106,-107,-85,161,-88,-60,-75,161,161,-86,-87,-76,161,]),'RSHIFT':([76,77,83,85,87,88,90,91,92,93,94,95,96,97,98,106,114,132,139,164,165,166,170,171,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,241,242,243,246,267,270,271,272,275,],[162,-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,162,-2,162,-69,-82,-83,-84,-109,162,-70,162,-69,162,162,162,162,162,162,162,162,162,162,162,162,162,162,-102,-103,-104,-105,-106,-107,-85,162,-88,-60,-75,162,162,-86,-87,-76,162,]),'PLUS_PLUS':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,132,139,164,165,166,170,172,205,206,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,207,-69,-82,-83,-84,-109,-70,207,-69,207,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'MINUS_MINUS':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,132,139,164,165,166,170,172,205,206,216,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,208,-69,-82,-83,-84,-109,-70,208,-69,208,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'PLUS_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,189,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'MINUS_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,190,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'STAR_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,191,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'DIVIDE_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,192,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'MODULO_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,193,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'AMP_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,194,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'OR_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,195,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'CARET_EQ':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,127,132,139,164,165,166,170,172,205,206,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,196,-36,-69,-82,-83,-84,-109,-70,-36,-69,-36,-35,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,]),'ELSE':([77,83,85,87,88,90,91,92,93,94,95,96,97,98,114,164,165,166,170,172,205,206,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,241,242,243,270,271,272,275,],[-89,-108,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,-82,-83,-84,-109,-70,263,-69,-90,-91,-92,-93,-94,-95,-96,-97,-98,-99,-100,-101,-102,-103,-104,-105,-106,-107,-85,-88,-60,-75,-86,-87,-76,263,]),'DOT':([83,85,87,88,90,91,92,93,94,95,96,97,98,114,139,164,165,166,172,206,238,241,242,243,270,271,272,],[167,-81,-58,-59,-61,-62,-69,-63,-64,-65,-66,-67,-68,-2,-69,-82,-83,-84,-70,-69,-85,-88,-60,-75,-86,-87,-76,]),'ASSIGN':([103,139,141,206,],[-33,-34,217,-34,]),'COLON':([125,139,],[185,-148,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'SourceFile':([0,],[1,]),'PackageClause':([0,],[2,]),'ImportDeclList':([2,],[4,]),'TopLevelDeclList':([2,4,],[5,20,]),'ImportDecl':([2,4,],[6,21,]),'TopLevelDecl':([2,4,5,20,],[7,7,22,22,]),'Declaration':([2,4,5,20,65,111,185,],[9,9,9,9,115,115,115,]),'FunctionDecl':([2,4,5,20,],[10,10,10,10,]),'MethodDecl':([2,4,5,20,],[11,11,11,11,]),'ConstDecl':([2,4,5,20,65,111,185,],[12,12,12,12,12,12,12,]),'TypeDecl':([2,4,5,20,65,111,185,],[13,13,13,13,13,13,13,]),'VarDecl':([2,4,5,20,65,111,185,],[14,14,14,14,14,14,14,]),'ImportPath':([8,],[24,]),'FunctionName':([15,],[29,]),'Receiver':([15,],[30,]),'ConstSpec':([16,],[33,]),'IdentifierList':([16,18,32,42,65,107,111,131,140,143,177,185,265,278,282,288,],[34,38,46,46,141,179,141,141,141,46,179,141,141,141,141,141,]),'VarSpec':([18,],[37,]),'Signature':([29,43,],[40,72,]),'Parameters':([29,43,],[41,41,]),'MethodName':([30,],[43,]),'ParameterDecl':([32,42,143,],[45,71,218,]),'Type':([36,38,41,46,60,105,174,179,],[50,61,68,74,109,176,176,252,]),'TypeName':([36,38,41,46,60,105,174,179,],[51,51,51,51,51,51,51,51,]),'TypeLit':([36,38,41,46,60,105,174,179,],[52,52,52,52,52,52,52,52,]),'ArrayType':([36,38,41,46,47,58,60,65,84,89,105,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,174,179,185,188,212,217,260,264,265,273,278,282,288,],[54,54,54,54,101,101,54,101,101,101,54,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,101,54,54,101,101,101,101,101,101,101,101,101,101,101,]),'StructType':([36,38,41,46,47,58,60,65,84,89,105,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,174,179,185,188,212,217,260,264,265,273,278,282,288,],[55,55,55,55,100,100,55,100,100,100,55,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,100,55,55,100,100,100,100,100,100,100,100,100,100,100,]),'PointerType':([36,38,41,46,60,105,174,179,],[56,56,56,56,56,56,56,56,]),'SliceType':([36,38,41,46,47,58,60,65,84,89,105,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,174,179,185,188,212,217,260,264,265,273,278,282,288,],[57,57,57,57,102,102,57,102,102,102,57,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,102,57,57,102,102,102,102,102,102,102,102,102,102,102,]),'FunctionBody':([40,72,],[62,144,]),'Block':([40,65,72,111,133,134,140,185,205,213,263,275,],[64,121,64,121,209,210,214,121,261,268,277,285,]),'lcurly':([40,59,65,72,99,111,133,134,140,173,185,205,213,263,273,275,],[65,107,65,65,173,65,65,65,65,173,65,65,65,65,173,65,]),'Result':([41,],[67,]),'ParameterList':([42,],[69,]),'ExpressionList':([47,65,110,111,126,131,140,169,185,188,217,265,278,282,288,],[75,127,180,127,187,127,127,240,127,256,269,127,127,127,127,]),'Expression':([47,58,65,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[76,106,132,171,76,132,76,205,216,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,239,76,246,132,76,267,76,275,267,132,246,132,132,132,]),'UnaryExpr':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[77,77,77,170,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'PrimaryExpr':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,]),'unary_op':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,]),'Operand':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,85,]),'Literal':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,87,]),'OperandName':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,88,]),'BasicLit':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,90,]),'CompositeLit':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,91,]),'LiteralType':([47,58,65,84,89,110,111,126,131,140,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,168,169,173,185,188,212,217,260,264,265,273,278,282,288,],[99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,]),'ArrayLength':([58,],[104,]),'BaseType':([60,],[108,]),'StatementList':([65,],[111,]),'rcurly':([65,111,173,177,244,],[112,181,243,249,272,]),'Statement':([65,111,185,],[113,182,254,]),'LabeledStmt':([65,111,185,],[116,116,116,]),'ReturnStmt':([65,111,185,],[117,117,117,]),'BreakStmt':([65,111,185,],[118,118,118,]),'ContinueStmt':([65,111,185,],[119,119,119,]),'GotoStmt':([65,111,185,],[120,120,120,]),'IfStmt':([65,111,185,263,],[122,122,122,276,]),'ForStmt':([65,111,185,],[123,123,123,]),'SimpleStmt':([65,111,131,140,185,265,278,282,288,],[124,124,204,215,124,281,281,281,281,]),'Label':([65,111,128,129,130,185,],[125,125,199,202,203,125,]),'ForLoop':([65,111,185,],[133,133,133,]),'WhileLoop':([65,111,185,],[134,134,134,]),'ExpressionStmt':([65,111,131,140,185,265,278,282,288,],[135,135,135,135,135,135,135,135,135,]),'IncDecStmt':([65,111,131,140,185,265,278,282,288,],[136,136,136,136,136,136,136,136,136,]),'Assignment':([65,111,131,140,185,265,278,282,288,],[137,137,137,137,137,137,137,137,137,]),'ShortVarDecl':([65,111,131,140,185,265,278,282,288,],[138,138,138,138,138,138,138,138,138,]),'Selector':([83,],[164,]),'Index':([83,],[165,]),'Arguments':([83,],[166,]),'LiteralValue':([99,173,273,],[172,247,247,]),'ElementType':([105,174,],[175,248,]),'FieldDeclList':([107,],[177,]),'FieldDecl':([107,177,],[178,250,]),'assign_op':([127,],[188,]),'InitStmt':([140,],[211,]),'Condition':([140,212,264,],[213,266,279,]),'ElementList':([173,],[244,]),'Element':([173,273,],[245,284,]),'ElseStmt':([205,275,],[262,286,]),'PostStmt':([265,278,282,288,],[280,287,289,290,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> SourceFile","S'",1,None,None,None),
  ('lcurly -> LCURLY','lcurly',1,'p_lcurly','parser1.py',27),
  ('rcurly -> RCURLY','rcurly',1,'p_rcurly','parser1.py',32),
  ('Type -> TypeName','Type',1,'p_Type','parser1.py',37),
  ('Type -> TypeLit','Type',1,'p_Type','parser1.py',38),
  ('TypeName -> ID','TypeName',1,'p_TypeName','parser1.py',43),
  ('TypeName -> DATA_TYPE','TypeName',1,'p_TypeName','parser1.py',44),
  ('TypeLit -> ArrayType','TypeLit',1,'p_TypeLit','parser1.py',49),
  ('TypeLit -> StructType','TypeLit',1,'p_TypeLit','parser1.py',50),
  ('TypeLit -> PointerType','TypeLit',1,'p_TypeLit','parser1.py',51),
  ('TypeLit -> SliceType','TypeLit',1,'p_TypeLit','parser1.py',52),
  ('ArrayType -> LSQUARE ArrayLength RSQUARE ElementType','ArrayType',4,'p_ArrayType','parser1.py',56),
  ('ArrayLength -> Expression','ArrayLength',1,'p_ArrayLength','parser1.py',61),
  ('SliceType -> LSQUARE RSQUARE ElementType','SliceType',3,'p_SliceType','parser1.py',66),
  ('ElementType -> Type','ElementType',1,'p_ElementType','parser1.py',71),
  ('PointerType -> STAR BaseType','PointerType',2,'p_PointerType','parser1.py',76),
  ('BaseType -> Type','BaseType',1,'p_BaseType','parser1.py',81),
  ('StructType -> STRUCT lcurly FieldDeclList rcurly','StructType',4,'p_StructType','parser1.py',86),
  ('FieldDeclList -> FieldDeclList FieldDecl SEMICOLON','FieldDeclList',3,'p_FieldDeclList','parser1.py',91),
  ('FieldDeclList -> FieldDecl SEMICOLON','FieldDeclList',2,'p_FieldDeclList','parser1.py',92),
  ('FieldDecl -> IdentifierList Type','FieldDecl',2,'p_FieldDecl','parser1.py',97),
  ('Block -> lcurly StatementList rcurly','Block',3,'p_Block','parser1.py',102),
  ('Block -> lcurly rcurly','Block',2,'p_Block','parser1.py',103),
  ('StatementList -> StatementList Statement SEMICOLON','StatementList',3,'p_StatementList','parser1.py',108),
  ('StatementList -> Statement SEMICOLON','StatementList',2,'p_StatementList','parser1.py',109),
  ('Declaration -> ConstDecl SEMICOLON','Declaration',2,'p_Declaration','parser1.py',114),
  ('Declaration -> TypeDecl SEMICOLON','Declaration',2,'p_Declaration','parser1.py',115),
  ('Declaration -> VarDecl SEMICOLON','Declaration',2,'p_Declaration','parser1.py',116),
  ('TopLevelDecl -> Declaration','TopLevelDecl',1,'p_TopLevelDecl','parser1.py',121),
  ('TopLevelDecl -> FunctionDecl','TopLevelDecl',1,'p_TopLevelDecl','parser1.py',122),
  ('TopLevelDecl -> MethodDecl','TopLevelDecl',1,'p_TopLevelDecl','parser1.py',123),
  ('ConstDecl -> CONST ConstSpec','ConstDecl',2,'p_ConstDecl','parser1.py',128),
  ('ConstSpec -> IdentifierList EQ ExpressionList','ConstSpec',3,'p_ConstSpec','parser1.py',133),
  ('IdentifierList -> IdentifierList COMMA ID','IdentifierList',3,'p_IdentifierList','parser1.py',138),
  ('IdentifierList -> ID','IdentifierList',1,'p_IdentifierList','parser1.py',139),
  ('ExpressionList -> ExpressionList COMMA Expression','ExpressionList',3,'p_ExpressionList','parser1.py',144),
  ('ExpressionList -> Expression','ExpressionList',1,'p_ExpressionList','parser1.py',145),
  ('TypeDecl -> TYPE ID Type','TypeDecl',3,'p_TypeDecl','parser1.py',150),
  ('VarDecl -> VAR VarSpec','VarDecl',2,'p_VarDecl','parser1.py',155),
  ('VarSpec -> IdentifierList Type','VarSpec',2,'p_VarSpec','parser1.py',160),
  ('VarSpec -> IdentifierList Type EQ ExpressionList','VarSpec',4,'p_VarSpec','parser1.py',161),
  ('ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON','ShortVarDecl',4,'p_ShortVarDecl','parser1.py',166),
  ('FunctionDecl -> FUNC FunctionName Signature FunctionBody','FunctionDecl',4,'p_FunctionDecl','parser1.py',171),
  ('FunctionDecl -> FUNC FunctionName Signature SEMICOLON','FunctionDecl',4,'p_FunctionDecl','parser1.py',172),
  ('FunctionName -> ID','FunctionName',1,'p_FunctionName','parser1.py',177),
  ('Signature -> Parameters','Signature',1,'p_Signature','parser1.py',182),
  ('Signature -> Parameters Result','Signature',2,'p_Signature','parser1.py',183),
  ('Parameters -> LROUND ParameterList RROUND','Parameters',3,'p_Parameters','parser1.py',188),
  ('Parameters -> LROUND RROUND','Parameters',2,'p_Parameters','parser1.py',189),
  ('ParameterList -> ParameterList COMMA ParameterDecl','ParameterList',3,'p_ParameterList','parser1.py',194),
  ('ParameterList -> ParameterDecl','ParameterList',1,'p_ParameterList','parser1.py',195),
  ('ParameterDecl -> IdentifierList Type','ParameterDecl',2,'p_ParameterDecl','parser1.py',200),
  ('Result -> Type','Result',1,'p_Result','parser1.py',205),
  ('FunctionBody -> Block','FunctionBody',1,'p_FunctionBody','parser1.py',210),
  ('MethodDecl -> FUNC Receiver MethodName Signature','MethodDecl',4,'p_MethodDecl','parser1.py',215),
  ('MethodDecl -> FUNC Receiver MethodName Signature FunctionBody','MethodDecl',5,'p_MethodDecl','parser1.py',216),
  ('MethodName -> ID','MethodName',1,'p_MethodName','parser1.py',221),
  ('Receiver -> LROUND ParameterDecl RROUND','Receiver',3,'p_Receiver','parser1.py',226),
  ('Operand -> Literal','Operand',1,'p_Operand','parser1.py',231),
  ('Operand -> OperandName','Operand',1,'p_Operand','parser1.py',232),
  ('Operand -> LROUND Expression RROUND','Operand',3,'p_Operand','parser1.py',233),
  ('Literal -> BasicLit','Literal',1,'p_Literal','parser1.py',238),
  ('Literal -> CompositeLit','Literal',1,'p_Literal','parser1.py',239),
  ('BasicLit -> INT_LIT','BasicLit',1,'p_BasicLit','parser1.py',245),
  ('BasicLit -> FLOAT_LIT','BasicLit',1,'p_BasicLit','parser1.py',246),
  ('BasicLit -> STRING_LIT','BasicLit',1,'p_BasicLit','parser1.py',247),
  ('BasicLit -> BOOL_LIT','BasicLit',1,'p_BasicLit','parser1.py',248),
  ('BasicLit -> CHAR_LIT','BasicLit',1,'p_BasicLit','parser1.py',249),
  ('BasicLit -> NIL','BasicLit',1,'p_BasicLit','parser1.py',250),
  ('OperandName -> ID','OperandName',1,'p_OperandName','parser1.py',255),
  ('CompositeLit -> LiteralType LiteralValue','CompositeLit',2,'p_CompositeLit','parser1.py',271),
  ('LiteralType -> StructType','LiteralType',1,'p_LiteralType','parser1.py',276),
  ('LiteralType -> ArrayType','LiteralType',1,'p_LiteralType','parser1.py',277),
  ('LiteralType -> SliceType','LiteralType',1,'p_LiteralType','parser1.py',278),
  ('LiteralType -> ID','LiteralType',1,'p_LiteralType','parser1.py',279),
  ('LiteralValue -> lcurly rcurly','LiteralValue',2,'p_LiteralValue','parser1.py',285),
  ('LiteralValue -> lcurly ElementList rcurly','LiteralValue',3,'p_LiteralValue','parser1.py',286),
  ('ElementList -> Element','ElementList',1,'p_ElementList','parser1.py',291),
  ('ElementList -> ElementList COMMA Element','ElementList',3,'p_ElementList','parser1.py',292),
  ('Element -> Expression','Element',1,'p_Element','parser1.py',297),
  ('Element -> LiteralValue','Element',1,'p_Element','parser1.py',298),
  ('PrimaryExpr -> Operand','PrimaryExpr',1,'p_PrimaryExpr','parser1.py',303),
  ('PrimaryExpr -> PrimaryExpr Selector','PrimaryExpr',2,'p_PrimaryExpr','parser1.py',304),
  ('PrimaryExpr -> PrimaryExpr Index','PrimaryExpr',2,'p_PrimaryExpr','parser1.py',305),
  ('PrimaryExpr -> PrimaryExpr Arguments','PrimaryExpr',2,'p_PrimaryExpr','parser1.py',306),
  ('Selector -> DOT ID','Selector',2,'p_Selector','parser1.py',312),
  ('Index -> LSQUARE Expression RSQUARE','Index',3,'p_Index','parser1.py',322),
  ('Arguments -> LROUND ExpressionList RROUND','Arguments',3,'p_Arguments','parser1.py',327),
  ('Arguments -> LROUND RROUND','Arguments',2,'p_Arguments','parser1.py',328),
  ('Expression -> UnaryExpr','Expression',1,'p_Expression','parser1.py',333),
  ('Expression -> Expression OR_OR Expression','Expression',3,'p_Expression','parser1.py',334),
  ('Expression -> Expression AMP_AMP Expression','Expression',3,'p_Expression','parser1.py',335),
  ('Expression -> Expression EQ_EQ Expression','Expression',3,'p_Expression','parser1.py',336),
  ('Expression -> Expression NOT_EQ Expression','Expression',3,'p_Expression','parser1.py',337),
  ('Expression -> Expression LT Expression','Expression',3,'p_Expression','parser1.py',338),
  ('Expression -> Expression LE Expression','Expression',3,'p_Expression','parser1.py',339),
  ('Expression -> Expression GT Expression','Expression',3,'p_Expression','parser1.py',340),
  ('Expression -> Expression GE Expression','Expression',3,'p_Expression','parser1.py',341),
  ('Expression -> Expression PLUS Expression','Expression',3,'p_Expression','parser1.py',342),
  ('Expression -> Expression MINUS Expression','Expression',3,'p_Expression','parser1.py',343),
  ('Expression -> Expression OR Expression','Expression',3,'p_Expression','parser1.py',344),
  ('Expression -> Expression CARET Expression','Expression',3,'p_Expression','parser1.py',345),
  ('Expression -> Expression STAR Expression','Expression',3,'p_Expression','parser1.py',346),
  ('Expression -> Expression DIVIDE Expression','Expression',3,'p_Expression','parser1.py',347),
  ('Expression -> Expression MODULO Expression','Expression',3,'p_Expression','parser1.py',348),
  ('Expression -> Expression LSHIFT Expression','Expression',3,'p_Expression','parser1.py',349),
  ('Expression -> Expression RSHIFT Expression','Expression',3,'p_Expression','parser1.py',350),
  ('Expression -> Expression AMP Expression','Expression',3,'p_Expression','parser1.py',351),
  ('UnaryExpr -> PrimaryExpr','UnaryExpr',1,'p_UnaryExpr','parser1.py',356),
  ('UnaryExpr -> unary_op UnaryExpr','UnaryExpr',2,'p_UnaryExpr','parser1.py',357),
  ('rel_op -> EQ_EQ','rel_op',1,'p_rel_op','parser1.py',370),
  ('rel_op -> NOT_EQ','rel_op',1,'p_rel_op','parser1.py',371),
  ('rel_op -> LT','rel_op',1,'p_rel_op','parser1.py',372),
  ('rel_op -> LE','rel_op',1,'p_rel_op','parser1.py',373),
  ('rel_op -> GT','rel_op',1,'p_rel_op','parser1.py',374),
  ('rel_op -> GE','rel_op',1,'p_rel_op','parser1.py',375),
  ('add_op -> PLUS','add_op',1,'p_add_op','parser1.py',380),
  ('add_op -> MINUS','add_op',1,'p_add_op','parser1.py',381),
  ('add_op -> OR','add_op',1,'p_add_op','parser1.py',382),
  ('add_op -> CARET','add_op',1,'p_add_op','parser1.py',383),
  ('mul_op -> STAR','mul_op',1,'p_mul_op','parser1.py',388),
  ('mul_op -> DIVIDE','mul_op',1,'p_mul_op','parser1.py',389),
  ('mul_op -> MODULO','mul_op',1,'p_mul_op','parser1.py',390),
  ('mul_op -> LSHIFT','mul_op',1,'p_mul_op','parser1.py',391),
  ('mul_op -> RSHIFT','mul_op',1,'p_mul_op','parser1.py',392),
  ('mul_op -> AMP','mul_op',1,'p_mul_op','parser1.py',393),
  ('unary_op -> PLUS','unary_op',1,'p_unary_op','parser1.py',398),
  ('unary_op -> MINUS','unary_op',1,'p_unary_op','parser1.py',399),
  ('unary_op -> NOT','unary_op',1,'p_unary_op','parser1.py',400),
  ('unary_op -> CARET','unary_op',1,'p_unary_op','parser1.py',401),
  ('unary_op -> STAR','unary_op',1,'p_unary_op','parser1.py',402),
  ('unary_op -> AMP','unary_op',1,'p_unary_op','parser1.py',403),
  ('Statement -> Declaration','Statement',1,'p_Statement','parser1.py',408),
  ('Statement -> LabeledStmt','Statement',1,'p_Statement','parser1.py',409),
  ('Statement -> ReturnStmt','Statement',1,'p_Statement','parser1.py',410),
  ('Statement -> BreakStmt','Statement',1,'p_Statement','parser1.py',411),
  ('Statement -> ContinueStmt','Statement',1,'p_Statement','parser1.py',412),
  ('Statement -> GotoStmt','Statement',1,'p_Statement','parser1.py',413),
  ('Statement -> Block','Statement',1,'p_Statement','parser1.py',414),
  ('Statement -> IfStmt','Statement',1,'p_Statement','parser1.py',415),
  ('Statement -> ForStmt','Statement',1,'p_Statement','parser1.py',416),
  ('Statement -> SimpleStmt SEMICOLON','Statement',2,'p_Statement','parser1.py',417),
  ('SimpleStmt -> ExpressionStmt','SimpleStmt',1,'p_SimpleStmt','parser1.py',423),
  ('SimpleStmt -> IncDecStmt','SimpleStmt',1,'p_SimpleStmt','parser1.py',424),
  ('SimpleStmt -> Assignment','SimpleStmt',1,'p_SimpleStmt','parser1.py',425),
  ('SimpleStmt -> ShortVarDecl','SimpleStmt',1,'p_SimpleStmt','parser1.py',426),
  ('ExpressionStmt -> Expression','ExpressionStmt',1,'p_ExpressionStmt','parser1.py',437),
  ('LabeledStmt -> Label COLON Statement','LabeledStmt',3,'p_LabeledStmt','parser1.py',442),
  ('Label -> ID','Label',1,'p_Label','parser1.py',447),
  ('IncDecStmt -> Expression PLUS_PLUS','IncDecStmt',2,'p_IncDecStmt','parser1.py',452),
  ('IncDecStmt -> Expression MINUS_MINUS','IncDecStmt',2,'p_IncDecStmt','parser1.py',453),
  ('Assignment -> ExpressionList assign_op ExpressionList','Assignment',3,'p_Assignment','parser1.py',458),
  ('assign_op -> PLUS_EQ','assign_op',1,'p_assign_op','parser1.py',463),
  ('assign_op -> MINUS_EQ','assign_op',1,'p_assign_op','parser1.py',464),
  ('assign_op -> STAR_EQ','assign_op',1,'p_assign_op','parser1.py',465),
  ('assign_op -> DIVIDE_EQ','assign_op',1,'p_assign_op','parser1.py',466),
  ('assign_op -> MODULO_EQ','assign_op',1,'p_assign_op','parser1.py',467),
  ('assign_op -> AMP_EQ','assign_op',1,'p_assign_op','parser1.py',468),
  ('assign_op -> OR_EQ','assign_op',1,'p_assign_op','parser1.py',469),
  ('assign_op -> CARET_EQ','assign_op',1,'p_assign_op','parser1.py',470),
  ('assign_op -> EQ','assign_op',1,'p_assign_op','parser1.py',471),
  ('ForStmt -> ForLoop Block','ForStmt',2,'p_ForStmt','parser1.py',476),
  ('ForStmt -> WhileLoop Block','ForStmt',2,'p_ForStmt','parser1.py',477),
  ('ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt','ForLoop',6,'p_ForLoop','parser1.py',482),
  ('ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON','ForLoop',5,'p_ForLoop','parser1.py',483),
  ('ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt','ForLoop',5,'p_ForLoop','parser1.py',484),
  ('ForLoop -> FOR InitStmt SEMICOLON SEMICOLON','ForLoop',4,'p_ForLoop','parser1.py',485),
  ('ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt','ForLoop',5,'p_ForLoop','parser1.py',486),
  ('ForLoop -> FOR SEMICOLON Condition SEMICOLON','ForLoop',4,'p_ForLoop','parser1.py',487),
  ('ForLoop -> FOR SEMICOLON SEMICOLON PostStmt','ForLoop',4,'p_ForLoop','parser1.py',488),
  ('ForLoop -> FOR SEMICOLON SEMICOLON','ForLoop',3,'p_ForLoop','parser1.py',489),
  ('WhileLoop -> FOR Condition Block','WhileLoop',3,'p_WhileLoop','parser1.py',494),
  ('WhileLoop -> FOR Block','WhileLoop',2,'p_WhileLoop','parser1.py',495),
  ('InitStmt -> SimpleStmt','InitStmt',1,'p_InitStmt','parser1.py',500),
  ('PostStmt -> SimpleStmt','PostStmt',1,'p_PostStmt','parser1.py',505),
  ('Condition -> Expression','Condition',1,'p_Condition','parser1.py',510),
  ('ReturnStmt -> RETURN SEMICOLON','ReturnStmt',2,'p_ReturnStmt','parser1.py',515),
  ('ReturnStmt -> RETURN ExpressionList SEMICOLON','ReturnStmt',3,'p_ReturnStmt','parser1.py',516),
  ('BreakStmt -> BREAK SEMICOLON','BreakStmt',2,'p_BreakStmt','parser1.py',521),
  ('BreakStmt -> BREAK Label SEMICOLON','BreakStmt',3,'p_BreakStmt','parser1.py',522),
  ('ContinueStmt -> CONTINUE SEMICOLON','ContinueStmt',2,'p_ContinueStmt','parser1.py',527),
  ('ContinueStmt -> CONTINUE Label SEMICOLON','ContinueStmt',3,'p_ContinueStmt','parser1.py',528),
  ('GotoStmt -> GOTO Label SEMICOLON','GotoStmt',3,'p_GotoStmt','parser1.py',533),
  ('IfStmt -> IF SimpleStmt SEMICOLON Expression Block','IfStmt',5,'p_IfStmt','parser1.py',538),
  ('IfStmt -> IF Expression Block','IfStmt',3,'p_IfStmt','parser1.py',539),
  ('IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt','IfStmt',5,'p_IfStmt','parser1.py',540),
  ('IfStmt -> IF Expression ElseStmt','IfStmt',3,'p_IfStmt','parser1.py',541),
  ('ElseStmt -> ELSE IfStmt','ElseStmt',2,'p_ElseStmt','parser1.py',545),
  ('ElseStmt -> ELSE Block','ElseStmt',2,'p_ElseStmt','parser1.py',546),
  ('SourceFile -> PackageClause ImportDeclList TopLevelDeclList','SourceFile',3,'p_SourceFile','parser1.py',551),
  ('SourceFile -> PackageClause ImportDeclList','SourceFile',2,'p_SourceFile','parser1.py',552),
  ('SourceFile -> PackageClause TopLevelDeclList','SourceFile',2,'p_SourceFile','parser1.py',553),
  ('SourceFile -> PackageClause','SourceFile',1,'p_SourceFile','parser1.py',554),
  ('PackageClause -> PACKAGE ID','PackageClause',2,'p_PackageClause','parser1.py',559),
  ('ImportDeclList -> ImportDeclList ImportDecl SEMICOLON','ImportDeclList',3,'p_ImportDeclList','parser1.py',564),
  ('ImportDeclList -> ImportDecl SEMICOLON','ImportDeclList',2,'p_ImportDeclList','parser1.py',565),
  ('ImportDecl -> IMPORT ImportPath','ImportDecl',2,'p_ImportDecl','parser1.py',570),
  ('ImportPath -> STRING_LIT','ImportPath',1,'p_ImportPath','parser1.py',575),
  ('TopLevelDeclList -> TopLevelDeclList TopLevelDecl','TopLevelDeclList',2,'p_TopLevelDeclList','parser1.py',580),
  ('TopLevelDeclList -> TopLevelDecl','TopLevelDeclList',1,'p_TopLevelDeclList','parser1.py',581),
]
