Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_NOT
    BR
    CASE
    DEFAULT
    DOUBLE_QUOTES
    SINGLE_QUOTES
    SWITCH

Grammar

Rule 0     S' -> SourceFile
Rule 1     lcurly -> LCURLY
Rule 2     rcurly -> RCURLY
Rule 3     Type -> TypeName
Rule 4     Type -> TypeLit
Rule 5     TypeName -> ID
Rule 6     TypeName -> DATA_TYPE
Rule 7     TypeLit -> ArrayType
Rule 8     TypeLit -> StructType
Rule 9     TypeLit -> PointerType
Rule 10    TypeLit -> SliceType
Rule 11    ArrayType -> LSQUARE ArrayLength RSQUARE ElementType
Rule 12    ArrayLength -> Expression
Rule 13    SliceType -> LSQUARE RSQUARE ElementType
Rule 14    ElementType -> Type
Rule 15    PointerType -> STAR BaseType
Rule 16    BaseType -> Type
Rule 17    StructType -> STRUCT lcurly FieldDeclList rcurly
Rule 18    FieldDeclList -> FieldDeclList FieldDecl SEMICOLON
Rule 19    FieldDeclList -> FieldDecl SEMICOLON
Rule 20    FieldDecl -> IdentifierList Type
Rule 21    Block -> lcurly StatementList rcurly
Rule 22    Block -> lcurly rcurly
Rule 23    StatementList -> StatementList Statement
Rule 24    StatementList -> Statement
Rule 25    Declaration -> ConstDecl
Rule 26    Declaration -> TypeDecl
Rule 27    Declaration -> VarDecl
Rule 28    TopLevelDecl -> Declaration
Rule 29    TopLevelDecl -> FunctionDecl
Rule 30    TopLevelDecl -> MethodDecl
Rule 31    ConstDecl -> CONST ConstSpec SEMICOLON
Rule 32    ConstSpec -> IdentifierList EQ ExpressionList
Rule 33    IdentifierList -> IdentifierList COMMA ID
Rule 34    IdentifierList -> ID
Rule 35    ExpressionList -> ExpressionList COMMA Expression
Rule 36    ExpressionList -> Expression
Rule 37    TypeDecl -> TYPE ID Type SEMICOLON
Rule 38    VarDecl -> VAR VarSpec SEMICOLON
Rule 39    VarSpec -> IdentifierList Type
Rule 40    VarSpec -> IdentifierList Type EQ ExpressionList
Rule 41    ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON
Rule 42    FunctionDecl -> FUNC FunctionName Signature FunctionBody
Rule 43    FunctionDecl -> FUNC FunctionName Signature SEMICOLON
Rule 44    FunctionName -> ID
Rule 45    Signature -> Parameters
Rule 46    Signature -> Parameters Result
Rule 47    Parameters -> LROUND ParameterList RROUND
Rule 48    Parameters -> LROUND RROUND
Rule 49    ParameterList -> ParameterList COMMA ParameterDecl
Rule 50    ParameterList -> ParameterDecl
Rule 51    ParameterDecl -> IdentifierList Type
Rule 52    Result -> Type
Rule 53    FunctionBody -> Block
Rule 54    MethodDecl -> FUNC Receiver MethodName Signature
Rule 55    MethodDecl -> FUNC Receiver MethodName Signature FunctionBody
Rule 56    MethodName -> ID
Rule 57    Receiver -> LROUND ParameterDecl RROUND
Rule 58    Operand -> Literal
Rule 59    Operand -> OperandName
Rule 60    Operand -> LROUND Expression RROUND
Rule 61    Literal -> BasicLit
Rule 62    Literal -> CompositeLit
Rule 63    BasicLit -> INT_LIT
Rule 64    BasicLit -> FLOAT_LIT
Rule 65    BasicLit -> STRING_LIT
Rule 66    BasicLit -> BOOL_LIT
Rule 67    BasicLit -> CHAR_LIT
Rule 68    BasicLit -> NIL
Rule 69    OperandName -> ID
Rule 70    CompositeLit -> LiteralType LiteralValue
Rule 71    LiteralType -> StructType
Rule 72    LiteralType -> ArrayType
Rule 73    LiteralType -> SliceType
Rule 74    LiteralType -> ID
Rule 75    LiteralValue -> lcurly rcurly
Rule 76    LiteralValue -> lcurly ElementList rcurly
Rule 77    ElementList -> Element
Rule 78    ElementList -> ElementList COMMA Element
Rule 79    Element -> Expression
Rule 80    Element -> LiteralValue
Rule 81    PrimaryExpr -> Operand
Rule 82    PrimaryExpr -> PrimaryExpr Selector
Rule 83    PrimaryExpr -> PrimaryExpr Index
Rule 84    PrimaryExpr -> PrimaryExpr Arguments
Rule 85    PrimaryExpr -> MakeExpr
Rule 86    MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
Rule 87    MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND
Rule 88    Selector -> DOT ID
Rule 89    Index -> LSQUARE Expression RSQUARE
Rule 90    Arguments -> LROUND ExpressionList RROUND
Rule 91    Arguments -> LROUND RROUND
Rule 92    Expression -> UnaryExpr
Rule 93    Expression -> Expression OR_OR Expression
Rule 94    Expression -> Expression AMP_AMP Expression
Rule 95    Expression -> Expression EQ_EQ Expression
Rule 96    Expression -> Expression NOT_EQ Expression
Rule 97    Expression -> Expression LT Expression
Rule 98    Expression -> Expression LE Expression
Rule 99    Expression -> Expression GT Expression
Rule 100   Expression -> Expression GE Expression
Rule 101   Expression -> Expression PLUS Expression
Rule 102   Expression -> Expression MINUS Expression
Rule 103   Expression -> Expression OR Expression
Rule 104   Expression -> Expression CARET Expression
Rule 105   Expression -> Expression STAR Expression
Rule 106   Expression -> Expression DIVIDE Expression
Rule 107   Expression -> Expression MODULO Expression
Rule 108   Expression -> Expression LSHIFT Expression
Rule 109   Expression -> Expression RSHIFT Expression
Rule 110   Expression -> Expression AMP Expression
Rule 111   UnaryExpr -> PrimaryExpr
Rule 112   UnaryExpr -> unary_op UnaryExpr
Rule 113   rel_op -> EQ_EQ
Rule 114   rel_op -> NOT_EQ
Rule 115   rel_op -> LT
Rule 116   rel_op -> LE
Rule 117   rel_op -> GT
Rule 118   rel_op -> GE
Rule 119   add_op -> PLUS
Rule 120   add_op -> MINUS
Rule 121   add_op -> OR
Rule 122   add_op -> CARET
Rule 123   mul_op -> STAR
Rule 124   mul_op -> DIVIDE
Rule 125   mul_op -> MODULO
Rule 126   mul_op -> LSHIFT
Rule 127   mul_op -> RSHIFT
Rule 128   mul_op -> AMP
Rule 129   unary_op -> PLUS
Rule 130   unary_op -> MINUS
Rule 131   unary_op -> NOT
Rule 132   unary_op -> CARET
Rule 133   unary_op -> STAR
Rule 134   unary_op -> AMP
Rule 135   Statement -> Declaration
Rule 136   Statement -> LabeledStmt
Rule 137   Statement -> ReturnStmt
Rule 138   Statement -> BreakStmt
Rule 139   Statement -> ContinueStmt
Rule 140   Statement -> GotoStmt
Rule 141   Statement -> Block
Rule 142   Statement -> IfStmt
Rule 143   Statement -> ForStmt
Rule 144   Statement -> SimpleStmt SEMICOLON
Rule 145   Statement -> SEMICOLON
Rule 146   SimpleStmt -> ExpressionStmt
Rule 147   SimpleStmt -> IncDecStmt
Rule 148   SimpleStmt -> Assignment
Rule 149   SimpleStmt -> ShortVarDecl
Rule 150   ExpressionStmt -> Expression
Rule 151   LabeledStmt -> Label COLON Statement
Rule 152   Label -> ID
Rule 153   IncDecStmt -> Expression PLUS_PLUS
Rule 154   IncDecStmt -> Expression MINUS_MINUS
Rule 155   Assignment -> ExpressionList assign_op ExpressionList
Rule 156   assign_op -> PLUS_EQ
Rule 157   assign_op -> MINUS_EQ
Rule 158   assign_op -> STAR_EQ
Rule 159   assign_op -> DIVIDE_EQ
Rule 160   assign_op -> MODULO_EQ
Rule 161   assign_op -> AMP_EQ
Rule 162   assign_op -> OR_EQ
Rule 163   assign_op -> CARET_EQ
Rule 164   assign_op -> EQ
Rule 165   ForStmt -> ForLoop Block
Rule 166   ForStmt -> WhileLoop Block
Rule 167   ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
Rule 168   ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON
Rule 169   ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt
Rule 170   ForLoop -> FOR InitStmt SEMICOLON SEMICOLON
Rule 171   ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt
Rule 172   ForLoop -> FOR SEMICOLON Condition SEMICOLON
Rule 173   ForLoop -> FOR SEMICOLON SEMICOLON PostStmt
Rule 174   ForLoop -> FOR SEMICOLON SEMICOLON
Rule 175   WhileLoop -> FOR Condition Block
Rule 176   WhileLoop -> FOR Block
Rule 177   InitStmt -> SimpleStmt
Rule 178   PostStmt -> SimpleStmt
Rule 179   Condition -> Expression
Rule 180   ReturnStmt -> RETURN SEMICOLON
Rule 181   ReturnStmt -> RETURN ExpressionList SEMICOLON
Rule 182   BreakStmt -> BREAK SEMICOLON
Rule 183   BreakStmt -> BREAK Label SEMICOLON
Rule 184   ContinueStmt -> CONTINUE SEMICOLON
Rule 185   ContinueStmt -> CONTINUE Label SEMICOLON
Rule 186   GotoStmt -> GOTO Label SEMICOLON
Rule 187   IfStmt -> IF SimpleStmt SEMICOLON Expression Block
Rule 188   IfStmt -> IF Expression Block
Rule 189   IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt
Rule 190   IfStmt -> IF Expression ElseStmt
Rule 191   ElseStmt -> ELSE IfStmt
Rule 192   ElseStmt -> ELSE Block
Rule 193   SourceFile -> PackageClause ImportDeclList TopLevelDeclList
Rule 194   SourceFile -> PackageClause ImportDeclList
Rule 195   SourceFile -> PackageClause TopLevelDeclList
Rule 196   SourceFile -> PackageClause
Rule 197   PackageClause -> PACKAGE ID
Rule 198   ImportDeclList -> ImportDeclList ImportDecl SEMICOLON
Rule 199   ImportDeclList -> ImportDecl SEMICOLON
Rule 200   ImportDecl -> IMPORT ImportPath
Rule 201   ImportPath -> STRING_LIT
Rule 202   TopLevelDeclList -> TopLevelDeclList TopLevelDecl
Rule 203   TopLevelDeclList -> TopLevelDecl

Terminals, with rules where they appear

AMP                  : 110 128 134
AMP_AMP              : 94
AMP_EQ               : 161
AND_NOT              : 
ASSIGN               : 41
BOOL_LIT             : 66
BR                   : 
BREAK                : 182 183
CARET                : 104 122 132
CARET_EQ             : 163
CASE                 : 
CHAR_LIT             : 67
COLON                : 151
COMMA                : 33 35 49 78 86 86 87
CONST                : 31
CONTINUE             : 184 185
DATA_TYPE            : 6
DEFAULT              : 
DIVIDE               : 106 124
DIVIDE_EQ            : 159
DOT                  : 88
DOUBLE_QUOTES        : 
ELSE                 : 191 192
EQ                   : 32 40 164
EQ_EQ                : 95 113
FLOAT_LIT            : 64
FOR                  : 167 168 169 170 171 172 173 174 175 176
FUNC                 : 42 43 54 55
GE                   : 100 118
GOTO                 : 186
GT                   : 99 117
ID                   : 5 33 34 37 44 56 69 74 88 152 197
IF                   : 187 188 189 190
IMPORT               : 200
INT_LIT              : 63
LCURLY               : 1
LE                   : 98 116
LROUND               : 47 48 57 60 86 87 90 91
LSHIFT               : 108 126
LSQUARE              : 11 13 89
LT                   : 97 115
MAKE                 : 86 87
MINUS                : 102 120 130
MINUS_EQ             : 157
MINUS_MINUS          : 154
MODULO               : 107 125
MODULO_EQ            : 160
NIL                  : 68
NOT                  : 131
NOT_EQ               : 96 114
OR                   : 103 121
OR_EQ                : 162
OR_OR                : 93
PACKAGE              : 197
PLUS                 : 101 119 129
PLUS_EQ              : 156
PLUS_PLUS            : 153
RCURLY               : 2
RETURN               : 180 181
RROUND               : 47 48 57 60 86 87 90 91
RSHIFT               : 109 127
RSQUARE              : 11 13 89
SEMICOLON            : 18 19 31 37 38 41 43 144 145 167 167 168 168 169 169 170 170 171 171 172 172 173 173 174 174 180 181 182 183 184 185 186 187 189 198 199
SINGLE_QUOTES        : 
STAR                 : 15 105 123 133
STAR_EQ              : 158
STRING_LIT           : 65 201
STRUCT               : 17
SWITCH               : 
TYPE                 : 37
VAR                  : 38
error                : 

Nonterminals, with rules where they appear

Arguments            : 84
ArrayLength          : 11
ArrayType            : 7 72
Assignment           : 148
BaseType             : 15
BasicLit             : 61
Block                : 53 141 165 166 175 176 187 188 192
BreakStmt            : 138
CompositeLit         : 62
Condition            : 167 168 171 172 175
ConstDecl            : 25
ConstSpec            : 31
ContinueStmt         : 139
Declaration          : 28 135
Element              : 77 78
ElementList          : 76 78
ElementType          : 11 13
ElseStmt             : 189 190
Expression           : 12 35 36 60 79 86 86 87 89 93 93 94 94 95 95 96 96 97 97 98 98 99 99 100 100 101 101 102 102 103 103 104 104 105 105 106 106 107 107 108 108 109 109 110 110 150 153 154 179 187 188 189 190
ExpressionList       : 32 35 40 41 90 155 155 181
ExpressionStmt       : 146
FieldDecl            : 18 19
FieldDeclList        : 17 18
ForLoop              : 165
ForStmt              : 143
FunctionBody         : 42 55
FunctionDecl         : 29
FunctionName         : 42 43
GotoStmt             : 140
IdentifierList       : 20 32 33 39 40 41 51
IfStmt               : 142 191
ImportDecl           : 198 199
ImportDeclList       : 193 194 198
ImportPath           : 200
IncDecStmt           : 147
Index                : 83
InitStmt             : 167 168 169 170
Label                : 151 183 185 186
LabeledStmt          : 136
Literal              : 58
LiteralType          : 70
LiteralValue         : 70 80
MakeExpr             : 85
MethodDecl           : 30
MethodName           : 54 55
Operand              : 81
OperandName          : 59
PackageClause        : 193 194 195 196
ParameterDecl        : 49 50 57
ParameterList        : 47 49
Parameters           : 45 46
PointerType          : 9
PostStmt             : 167 169 171 173
PrimaryExpr          : 82 83 84 111
Receiver             : 54 55
Result               : 46
ReturnStmt           : 137
Selector             : 82
ShortVarDecl         : 149
Signature            : 42 43 54 55
SimpleStmt           : 144 177 178 187 189
SliceType            : 10 73 86 87
SourceFile           : 0
Statement            : 23 24 151
StatementList        : 21 23
StructType           : 8 71
TopLevelDecl         : 202 203
TopLevelDeclList     : 193 195 202
Type                 : 14 16 20 37 39 40 51 52
TypeDecl             : 26
TypeLit              : 4
TypeName             : 3
UnaryExpr            : 92 112
VarDecl              : 27
VarSpec              : 38
WhileLoop            : 166
add_op               : 
assign_op            : 155
lcurly               : 17 21 22 75 76
mul_op               : 
rcurly               : 17 21 22 75 76
rel_op               : 
unary_op             : 112

Parsing method: LALR

state 0

    (0) S' -> . SourceFile
    (193) SourceFile -> . PackageClause ImportDeclList TopLevelDeclList
    (194) SourceFile -> . PackageClause ImportDeclList
    (195) SourceFile -> . PackageClause TopLevelDeclList
    (196) SourceFile -> . PackageClause
    (197) PackageClause -> . PACKAGE ID

    PACKAGE         shift and go to state 3

    SourceFile                     shift and go to state 1
    PackageClause                  shift and go to state 2

state 1

    (0) S' -> SourceFile .



state 2

    (193) SourceFile -> PackageClause . ImportDeclList TopLevelDeclList
    (194) SourceFile -> PackageClause . ImportDeclList
    (195) SourceFile -> PackageClause . TopLevelDeclList
    (196) SourceFile -> PackageClause .
    (198) ImportDeclList -> . ImportDeclList ImportDecl SEMICOLON
    (199) ImportDeclList -> . ImportDecl SEMICOLON
    (202) TopLevelDeclList -> . TopLevelDeclList TopLevelDecl
    (203) TopLevelDeclList -> . TopLevelDecl
    (200) ImportDecl -> . IMPORT ImportPath
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON

    $end            reduce using rule 196 (SourceFile -> PackageClause .)
    IMPORT          shift and go to state 8
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    ImportDeclList                 shift and go to state 4
    TopLevelDeclList               shift and go to state 5
    ImportDecl                     shift and go to state 6
    TopLevelDecl                   shift and go to state 7
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 3

    (197) PackageClause -> PACKAGE . ID

    ID              shift and go to state 19


state 4

    (193) SourceFile -> PackageClause ImportDeclList . TopLevelDeclList
    (194) SourceFile -> PackageClause ImportDeclList .
    (198) ImportDeclList -> ImportDeclList . ImportDecl SEMICOLON
    (202) TopLevelDeclList -> . TopLevelDeclList TopLevelDecl
    (203) TopLevelDeclList -> . TopLevelDecl
    (200) ImportDecl -> . IMPORT ImportPath
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON

    $end            reduce using rule 194 (SourceFile -> PackageClause ImportDeclList .)
    IMPORT          shift and go to state 8
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDeclList               shift and go to state 20
    ImportDecl                     shift and go to state 21
    TopLevelDecl                   shift and go to state 7
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 5

    (195) SourceFile -> PackageClause TopLevelDeclList .
    (202) TopLevelDeclList -> TopLevelDeclList . TopLevelDecl
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON

    $end            reduce using rule 195 (SourceFile -> PackageClause TopLevelDeclList .)
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDecl                   shift and go to state 22
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 6

    (199) ImportDeclList -> ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 23


state 7

    (203) TopLevelDeclList -> TopLevelDecl .

    FUNC            reduce using rule 203 (TopLevelDeclList -> TopLevelDecl .)
    CONST           reduce using rule 203 (TopLevelDeclList -> TopLevelDecl .)
    TYPE            reduce using rule 203 (TopLevelDeclList -> TopLevelDecl .)
    VAR             reduce using rule 203 (TopLevelDeclList -> TopLevelDecl .)
    $end            reduce using rule 203 (TopLevelDeclList -> TopLevelDecl .)


state 8

    (200) ImportDecl -> IMPORT . ImportPath
    (201) ImportPath -> . STRING_LIT

    STRING_LIT      shift and go to state 25

    ImportPath                     shift and go to state 24

state 9

    (28) TopLevelDecl -> Declaration .

    FUNC            reduce using rule 28 (TopLevelDecl -> Declaration .)
    CONST           reduce using rule 28 (TopLevelDecl -> Declaration .)
    TYPE            reduce using rule 28 (TopLevelDecl -> Declaration .)
    VAR             reduce using rule 28 (TopLevelDecl -> Declaration .)
    $end            reduce using rule 28 (TopLevelDecl -> Declaration .)


state 10

    (29) TopLevelDecl -> FunctionDecl .

    FUNC            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    CONST           reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    TYPE            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    VAR             reduce using rule 29 (TopLevelDecl -> FunctionDecl .)
    $end            reduce using rule 29 (TopLevelDecl -> FunctionDecl .)


state 11

    (30) TopLevelDecl -> MethodDecl .

    FUNC            reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    CONST           reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    TYPE            reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    VAR             reduce using rule 30 (TopLevelDecl -> MethodDecl .)
    $end            reduce using rule 30 (TopLevelDecl -> MethodDecl .)


state 12

    (25) Declaration -> ConstDecl .

    FUNC            reduce using rule 25 (Declaration -> ConstDecl .)
    CONST           reduce using rule 25 (Declaration -> ConstDecl .)
    TYPE            reduce using rule 25 (Declaration -> ConstDecl .)
    VAR             reduce using rule 25 (Declaration -> ConstDecl .)
    $end            reduce using rule 25 (Declaration -> ConstDecl .)
    RCURLY          reduce using rule 25 (Declaration -> ConstDecl .)
    SEMICOLON       reduce using rule 25 (Declaration -> ConstDecl .)
    RETURN          reduce using rule 25 (Declaration -> ConstDecl .)
    BREAK           reduce using rule 25 (Declaration -> ConstDecl .)
    CONTINUE        reduce using rule 25 (Declaration -> ConstDecl .)
    GOTO            reduce using rule 25 (Declaration -> ConstDecl .)
    IF              reduce using rule 25 (Declaration -> ConstDecl .)
    ID              reduce using rule 25 (Declaration -> ConstDecl .)
    LCURLY          reduce using rule 25 (Declaration -> ConstDecl .)
    FOR             reduce using rule 25 (Declaration -> ConstDecl .)
    PLUS            reduce using rule 25 (Declaration -> ConstDecl .)
    MINUS           reduce using rule 25 (Declaration -> ConstDecl .)
    NOT             reduce using rule 25 (Declaration -> ConstDecl .)
    CARET           reduce using rule 25 (Declaration -> ConstDecl .)
    STAR            reduce using rule 25 (Declaration -> ConstDecl .)
    AMP             reduce using rule 25 (Declaration -> ConstDecl .)
    LROUND          reduce using rule 25 (Declaration -> ConstDecl .)
    MAKE            reduce using rule 25 (Declaration -> ConstDecl .)
    INT_LIT         reduce using rule 25 (Declaration -> ConstDecl .)
    FLOAT_LIT       reduce using rule 25 (Declaration -> ConstDecl .)
    STRING_LIT      reduce using rule 25 (Declaration -> ConstDecl .)
    BOOL_LIT        reduce using rule 25 (Declaration -> ConstDecl .)
    CHAR_LIT        reduce using rule 25 (Declaration -> ConstDecl .)
    NIL             reduce using rule 25 (Declaration -> ConstDecl .)
    STRUCT          reduce using rule 25 (Declaration -> ConstDecl .)
    LSQUARE         reduce using rule 25 (Declaration -> ConstDecl .)


state 13

    (26) Declaration -> TypeDecl .

    FUNC            reduce using rule 26 (Declaration -> TypeDecl .)
    CONST           reduce using rule 26 (Declaration -> TypeDecl .)
    TYPE            reduce using rule 26 (Declaration -> TypeDecl .)
    VAR             reduce using rule 26 (Declaration -> TypeDecl .)
    $end            reduce using rule 26 (Declaration -> TypeDecl .)
    RCURLY          reduce using rule 26 (Declaration -> TypeDecl .)
    SEMICOLON       reduce using rule 26 (Declaration -> TypeDecl .)
    RETURN          reduce using rule 26 (Declaration -> TypeDecl .)
    BREAK           reduce using rule 26 (Declaration -> TypeDecl .)
    CONTINUE        reduce using rule 26 (Declaration -> TypeDecl .)
    GOTO            reduce using rule 26 (Declaration -> TypeDecl .)
    IF              reduce using rule 26 (Declaration -> TypeDecl .)
    ID              reduce using rule 26 (Declaration -> TypeDecl .)
    LCURLY          reduce using rule 26 (Declaration -> TypeDecl .)
    FOR             reduce using rule 26 (Declaration -> TypeDecl .)
    PLUS            reduce using rule 26 (Declaration -> TypeDecl .)
    MINUS           reduce using rule 26 (Declaration -> TypeDecl .)
    NOT             reduce using rule 26 (Declaration -> TypeDecl .)
    CARET           reduce using rule 26 (Declaration -> TypeDecl .)
    STAR            reduce using rule 26 (Declaration -> TypeDecl .)
    AMP             reduce using rule 26 (Declaration -> TypeDecl .)
    LROUND          reduce using rule 26 (Declaration -> TypeDecl .)
    MAKE            reduce using rule 26 (Declaration -> TypeDecl .)
    INT_LIT         reduce using rule 26 (Declaration -> TypeDecl .)
    FLOAT_LIT       reduce using rule 26 (Declaration -> TypeDecl .)
    STRING_LIT      reduce using rule 26 (Declaration -> TypeDecl .)
    BOOL_LIT        reduce using rule 26 (Declaration -> TypeDecl .)
    CHAR_LIT        reduce using rule 26 (Declaration -> TypeDecl .)
    NIL             reduce using rule 26 (Declaration -> TypeDecl .)
    STRUCT          reduce using rule 26 (Declaration -> TypeDecl .)
    LSQUARE         reduce using rule 26 (Declaration -> TypeDecl .)


state 14

    (27) Declaration -> VarDecl .

    FUNC            reduce using rule 27 (Declaration -> VarDecl .)
    CONST           reduce using rule 27 (Declaration -> VarDecl .)
    TYPE            reduce using rule 27 (Declaration -> VarDecl .)
    VAR             reduce using rule 27 (Declaration -> VarDecl .)
    $end            reduce using rule 27 (Declaration -> VarDecl .)
    RCURLY          reduce using rule 27 (Declaration -> VarDecl .)
    SEMICOLON       reduce using rule 27 (Declaration -> VarDecl .)
    RETURN          reduce using rule 27 (Declaration -> VarDecl .)
    BREAK           reduce using rule 27 (Declaration -> VarDecl .)
    CONTINUE        reduce using rule 27 (Declaration -> VarDecl .)
    GOTO            reduce using rule 27 (Declaration -> VarDecl .)
    IF              reduce using rule 27 (Declaration -> VarDecl .)
    ID              reduce using rule 27 (Declaration -> VarDecl .)
    LCURLY          reduce using rule 27 (Declaration -> VarDecl .)
    FOR             reduce using rule 27 (Declaration -> VarDecl .)
    PLUS            reduce using rule 27 (Declaration -> VarDecl .)
    MINUS           reduce using rule 27 (Declaration -> VarDecl .)
    NOT             reduce using rule 27 (Declaration -> VarDecl .)
    CARET           reduce using rule 27 (Declaration -> VarDecl .)
    STAR            reduce using rule 27 (Declaration -> VarDecl .)
    AMP             reduce using rule 27 (Declaration -> VarDecl .)
    LROUND          reduce using rule 27 (Declaration -> VarDecl .)
    MAKE            reduce using rule 27 (Declaration -> VarDecl .)
    INT_LIT         reduce using rule 27 (Declaration -> VarDecl .)
    FLOAT_LIT       reduce using rule 27 (Declaration -> VarDecl .)
    STRING_LIT      reduce using rule 27 (Declaration -> VarDecl .)
    BOOL_LIT        reduce using rule 27 (Declaration -> VarDecl .)
    CHAR_LIT        reduce using rule 27 (Declaration -> VarDecl .)
    NIL             reduce using rule 27 (Declaration -> VarDecl .)
    STRUCT          reduce using rule 27 (Declaration -> VarDecl .)
    LSQUARE         reduce using rule 27 (Declaration -> VarDecl .)


state 15

    (42) FunctionDecl -> FUNC . FunctionName Signature FunctionBody
    (43) FunctionDecl -> FUNC . FunctionName Signature SEMICOLON
    (54) MethodDecl -> FUNC . Receiver MethodName Signature
    (55) MethodDecl -> FUNC . Receiver MethodName Signature FunctionBody
    (44) FunctionName -> . ID
    (57) Receiver -> . LROUND ParameterDecl RROUND

    ID              shift and go to state 28
    LROUND          shift and go to state 29

    FunctionName                   shift and go to state 26
    Receiver                       shift and go to state 27

state 16

    (31) ConstDecl -> CONST . ConstSpec SEMICOLON
    (32) ConstSpec -> . IdentifierList EQ ExpressionList
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 32

    ConstSpec                      shift and go to state 30
    IdentifierList                 shift and go to state 31

state 17

    (37) TypeDecl -> TYPE . ID Type SEMICOLON

    ID              shift and go to state 33


state 18

    (38) VarDecl -> VAR . VarSpec SEMICOLON
    (39) VarSpec -> . IdentifierList Type
    (40) VarSpec -> . IdentifierList Type EQ ExpressionList
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 32

    VarSpec                        shift and go to state 34
    IdentifierList                 shift and go to state 35

state 19

    (197) PackageClause -> PACKAGE ID .

    IMPORT          reduce using rule 197 (PackageClause -> PACKAGE ID .)
    FUNC            reduce using rule 197 (PackageClause -> PACKAGE ID .)
    CONST           reduce using rule 197 (PackageClause -> PACKAGE ID .)
    TYPE            reduce using rule 197 (PackageClause -> PACKAGE ID .)
    VAR             reduce using rule 197 (PackageClause -> PACKAGE ID .)
    $end            reduce using rule 197 (PackageClause -> PACKAGE ID .)


state 20

    (193) SourceFile -> PackageClause ImportDeclList TopLevelDeclList .
    (202) TopLevelDeclList -> TopLevelDeclList . TopLevelDecl
    (28) TopLevelDecl -> . Declaration
    (29) TopLevelDecl -> . FunctionDecl
    (30) TopLevelDecl -> . MethodDecl
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (42) FunctionDecl -> . FUNC FunctionName Signature FunctionBody
    (43) FunctionDecl -> . FUNC FunctionName Signature SEMICOLON
    (54) MethodDecl -> . FUNC Receiver MethodName Signature
    (55) MethodDecl -> . FUNC Receiver MethodName Signature FunctionBody
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON

    $end            reduce using rule 193 (SourceFile -> PackageClause ImportDeclList TopLevelDeclList .)
    FUNC            shift and go to state 15
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18

    TopLevelDecl                   shift and go to state 22
    Declaration                    shift and go to state 9
    FunctionDecl                   shift and go to state 10
    MethodDecl                     shift and go to state 11
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14

state 21

    (198) ImportDeclList -> ImportDeclList ImportDecl . SEMICOLON

    SEMICOLON       shift and go to state 36


state 22

    (202) TopLevelDeclList -> TopLevelDeclList TopLevelDecl .

    FUNC            reduce using rule 202 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    CONST           reduce using rule 202 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    TYPE            reduce using rule 202 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    VAR             reduce using rule 202 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)
    $end            reduce using rule 202 (TopLevelDeclList -> TopLevelDeclList TopLevelDecl .)


state 23

    (199) ImportDeclList -> ImportDecl SEMICOLON .

    IMPORT          reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)
    FUNC            reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)
    CONST           reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)
    TYPE            reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)
    VAR             reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)
    $end            reduce using rule 199 (ImportDeclList -> ImportDecl SEMICOLON .)


state 24

    (200) ImportDecl -> IMPORT ImportPath .

    SEMICOLON       reduce using rule 200 (ImportDecl -> IMPORT ImportPath .)


state 25

    (201) ImportPath -> STRING_LIT .

    SEMICOLON       reduce using rule 201 (ImportPath -> STRING_LIT .)


state 26

    (42) FunctionDecl -> FUNC FunctionName . Signature FunctionBody
    (43) FunctionDecl -> FUNC FunctionName . Signature SEMICOLON
    (45) Signature -> . Parameters
    (46) Signature -> . Parameters Result
    (47) Parameters -> . LROUND ParameterList RROUND
    (48) Parameters -> . LROUND RROUND

    LROUND          shift and go to state 39

    Signature                      shift and go to state 37
    Parameters                     shift and go to state 38

state 27

    (54) MethodDecl -> FUNC Receiver . MethodName Signature
    (55) MethodDecl -> FUNC Receiver . MethodName Signature FunctionBody
    (56) MethodName -> . ID

    ID              shift and go to state 41

    MethodName                     shift and go to state 40

state 28

    (44) FunctionName -> ID .

    LROUND          reduce using rule 44 (FunctionName -> ID .)


state 29

    (57) Receiver -> LROUND . ParameterDecl RROUND
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 32

    ParameterDecl                  shift and go to state 42
    IdentifierList                 shift and go to state 43

state 30

    (31) ConstDecl -> CONST ConstSpec . SEMICOLON

    SEMICOLON       shift and go to state 44


state 31

    (32) ConstSpec -> IdentifierList . EQ ExpressionList
    (33) IdentifierList -> IdentifierList . COMMA ID

    EQ              shift and go to state 45
    COMMA           shift and go to state 46


state 32

    (34) IdentifierList -> ID .

    EQ              reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    ID              reduce using rule 34 (IdentifierList -> ID .)
    DATA_TYPE       reduce using rule 34 (IdentifierList -> ID .)
    LSQUARE         reduce using rule 34 (IdentifierList -> ID .)
    STRUCT          reduce using rule 34 (IdentifierList -> ID .)
    STAR            reduce using rule 34 (IdentifierList -> ID .)


state 33

    (37) TypeDecl -> TYPE ID . Type SEMICOLON
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    Type                           shift and go to state 48
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 34

    (38) VarDecl -> VAR VarSpec . SEMICOLON

    SEMICOLON       shift and go to state 59


state 35

    (39) VarSpec -> IdentifierList . Type
    (40) VarSpec -> IdentifierList . Type EQ ExpressionList
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 46
    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    Type                           shift and go to state 60
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 36

    (198) ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .

    IMPORT          reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    FUNC            reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    CONST           reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    TYPE            reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    VAR             reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)
    $end            reduce using rule 198 (ImportDeclList -> ImportDeclList ImportDecl SEMICOLON .)


state 37

    (42) FunctionDecl -> FUNC FunctionName Signature . FunctionBody
    (43) FunctionDecl -> FUNC FunctionName Signature . SEMICOLON
    (53) FunctionBody -> . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    SEMICOLON       shift and go to state 62
    LCURLY          shift and go to state 65

    FunctionBody                   shift and go to state 61
    Block                          shift and go to state 63
    lcurly                         shift and go to state 64

state 38

    (45) Signature -> Parameters .
    (46) Signature -> Parameters . Result
    (52) Result -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       reduce using rule 45 (Signature -> Parameters .)
    LCURLY          reduce using rule 45 (Signature -> Parameters .)
    FUNC            reduce using rule 45 (Signature -> Parameters .)
    CONST           reduce using rule 45 (Signature -> Parameters .)
    TYPE            reduce using rule 45 (Signature -> Parameters .)
    VAR             reduce using rule 45 (Signature -> Parameters .)
    $end            reduce using rule 45 (Signature -> Parameters .)
    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    Result                         shift and go to state 66
    Type                           shift and go to state 67
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 39

    (47) Parameters -> LROUND . ParameterList RROUND
    (48) Parameters -> LROUND . RROUND
    (49) ParameterList -> . ParameterList COMMA ParameterDecl
    (50) ParameterList -> . ParameterDecl
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    RROUND          shift and go to state 69
    ID              shift and go to state 32

    ParameterList                  shift and go to state 68
    ParameterDecl                  shift and go to state 70
    IdentifierList                 shift and go to state 43

state 40

    (54) MethodDecl -> FUNC Receiver MethodName . Signature
    (55) MethodDecl -> FUNC Receiver MethodName . Signature FunctionBody
    (45) Signature -> . Parameters
    (46) Signature -> . Parameters Result
    (47) Parameters -> . LROUND ParameterList RROUND
    (48) Parameters -> . LROUND RROUND

    LROUND          shift and go to state 39

    Signature                      shift and go to state 71
    Parameters                     shift and go to state 38

state 41

    (56) MethodName -> ID .

    LROUND          reduce using rule 56 (MethodName -> ID .)


state 42

    (57) Receiver -> LROUND ParameterDecl . RROUND

    RROUND          shift and go to state 72


state 43

    (51) ParameterDecl -> IdentifierList . Type
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 46
    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    Type                           shift and go to state 73
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 44

    (31) ConstDecl -> CONST ConstSpec SEMICOLON .

    FUNC            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    CONST           reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    TYPE            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    VAR             reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    $end            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    RCURLY          reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    SEMICOLON       reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    RETURN          reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    BREAK           reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    CONTINUE        reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    GOTO            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    IF              reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    ID              reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    LCURLY          reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    FOR             reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    PLUS            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    MINUS           reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    NOT             reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    CARET           reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    STAR            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    AMP             reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    LROUND          reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    MAKE            reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    INT_LIT         reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    FLOAT_LIT       reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    STRING_LIT      reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    BOOL_LIT        reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    CHAR_LIT        reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    NIL             reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    STRUCT          reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)
    LSQUARE         reduce using rule 31 (ConstDecl -> CONST ConstSpec SEMICOLON .)


state 45

    (32) ConstSpec -> IdentifierList EQ . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 74
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 46

    (33) IdentifierList -> IdentifierList COMMA . ID

    ID              shift and go to state 104


state 47

    (5) TypeName -> ID .

    SEMICOLON       reduce using rule 5 (TypeName -> ID .)
    EQ              reduce using rule 5 (TypeName -> ID .)
    LCURLY          reduce using rule 5 (TypeName -> ID .)
    FUNC            reduce using rule 5 (TypeName -> ID .)
    CONST           reduce using rule 5 (TypeName -> ID .)
    TYPE            reduce using rule 5 (TypeName -> ID .)
    VAR             reduce using rule 5 (TypeName -> ID .)
    $end            reduce using rule 5 (TypeName -> ID .)
    RROUND          reduce using rule 5 (TypeName -> ID .)
    COMMA           reduce using rule 5 (TypeName -> ID .)


state 48

    (37) TypeDecl -> TYPE ID Type . SEMICOLON

    SEMICOLON       shift and go to state 105


state 49

    (3) Type -> TypeName .

    SEMICOLON       reduce using rule 3 (Type -> TypeName .)
    EQ              reduce using rule 3 (Type -> TypeName .)
    LCURLY          reduce using rule 3 (Type -> TypeName .)
    FUNC            reduce using rule 3 (Type -> TypeName .)
    CONST           reduce using rule 3 (Type -> TypeName .)
    TYPE            reduce using rule 3 (Type -> TypeName .)
    VAR             reduce using rule 3 (Type -> TypeName .)
    $end            reduce using rule 3 (Type -> TypeName .)
    RROUND          reduce using rule 3 (Type -> TypeName .)
    COMMA           reduce using rule 3 (Type -> TypeName .)


state 50

    (4) Type -> TypeLit .

    SEMICOLON       reduce using rule 4 (Type -> TypeLit .)
    EQ              reduce using rule 4 (Type -> TypeLit .)
    LCURLY          reduce using rule 4 (Type -> TypeLit .)
    FUNC            reduce using rule 4 (Type -> TypeLit .)
    CONST           reduce using rule 4 (Type -> TypeLit .)
    TYPE            reduce using rule 4 (Type -> TypeLit .)
    VAR             reduce using rule 4 (Type -> TypeLit .)
    $end            reduce using rule 4 (Type -> TypeLit .)
    RROUND          reduce using rule 4 (Type -> TypeLit .)
    COMMA           reduce using rule 4 (Type -> TypeLit .)


state 51

    (6) TypeName -> DATA_TYPE .

    SEMICOLON       reduce using rule 6 (TypeName -> DATA_TYPE .)
    EQ              reduce using rule 6 (TypeName -> DATA_TYPE .)
    LCURLY          reduce using rule 6 (TypeName -> DATA_TYPE .)
    FUNC            reduce using rule 6 (TypeName -> DATA_TYPE .)
    CONST           reduce using rule 6 (TypeName -> DATA_TYPE .)
    TYPE            reduce using rule 6 (TypeName -> DATA_TYPE .)
    VAR             reduce using rule 6 (TypeName -> DATA_TYPE .)
    $end            reduce using rule 6 (TypeName -> DATA_TYPE .)
    RROUND          reduce using rule 6 (TypeName -> DATA_TYPE .)
    COMMA           reduce using rule 6 (TypeName -> DATA_TYPE .)


state 52

    (7) TypeLit -> ArrayType .

    SEMICOLON       reduce using rule 7 (TypeLit -> ArrayType .)
    EQ              reduce using rule 7 (TypeLit -> ArrayType .)
    LCURLY          reduce using rule 7 (TypeLit -> ArrayType .)
    FUNC            reduce using rule 7 (TypeLit -> ArrayType .)
    CONST           reduce using rule 7 (TypeLit -> ArrayType .)
    TYPE            reduce using rule 7 (TypeLit -> ArrayType .)
    VAR             reduce using rule 7 (TypeLit -> ArrayType .)
    $end            reduce using rule 7 (TypeLit -> ArrayType .)
    RROUND          reduce using rule 7 (TypeLit -> ArrayType .)
    COMMA           reduce using rule 7 (TypeLit -> ArrayType .)


state 53

    (8) TypeLit -> StructType .

    SEMICOLON       reduce using rule 8 (TypeLit -> StructType .)
    EQ              reduce using rule 8 (TypeLit -> StructType .)
    LCURLY          reduce using rule 8 (TypeLit -> StructType .)
    FUNC            reduce using rule 8 (TypeLit -> StructType .)
    CONST           reduce using rule 8 (TypeLit -> StructType .)
    TYPE            reduce using rule 8 (TypeLit -> StructType .)
    VAR             reduce using rule 8 (TypeLit -> StructType .)
    $end            reduce using rule 8 (TypeLit -> StructType .)
    RROUND          reduce using rule 8 (TypeLit -> StructType .)
    COMMA           reduce using rule 8 (TypeLit -> StructType .)


state 54

    (9) TypeLit -> PointerType .

    SEMICOLON       reduce using rule 9 (TypeLit -> PointerType .)
    EQ              reduce using rule 9 (TypeLit -> PointerType .)
    LCURLY          reduce using rule 9 (TypeLit -> PointerType .)
    FUNC            reduce using rule 9 (TypeLit -> PointerType .)
    CONST           reduce using rule 9 (TypeLit -> PointerType .)
    TYPE            reduce using rule 9 (TypeLit -> PointerType .)
    VAR             reduce using rule 9 (TypeLit -> PointerType .)
    $end            reduce using rule 9 (TypeLit -> PointerType .)
    RROUND          reduce using rule 9 (TypeLit -> PointerType .)
    COMMA           reduce using rule 9 (TypeLit -> PointerType .)


state 55

    (10) TypeLit -> SliceType .

    SEMICOLON       reduce using rule 10 (TypeLit -> SliceType .)
    EQ              reduce using rule 10 (TypeLit -> SliceType .)
    LCURLY          reduce using rule 10 (TypeLit -> SliceType .)
    FUNC            reduce using rule 10 (TypeLit -> SliceType .)
    CONST           reduce using rule 10 (TypeLit -> SliceType .)
    TYPE            reduce using rule 10 (TypeLit -> SliceType .)
    VAR             reduce using rule 10 (TypeLit -> SliceType .)
    $end            reduce using rule 10 (TypeLit -> SliceType .)
    RROUND          reduce using rule 10 (TypeLit -> SliceType .)
    COMMA           reduce using rule 10 (TypeLit -> SliceType .)


state 56

    (11) ArrayType -> LSQUARE . ArrayLength RSQUARE ElementType
    (13) SliceType -> LSQUARE . RSQUARE ElementType
    (12) ArrayLength -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RSQUARE         shift and go to state 107
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ArrayLength                    shift and go to state 106
    Expression                     shift and go to state 108
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 57

    (17) StructType -> STRUCT . lcurly FieldDeclList rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 65

    lcurly                         shift and go to state 109

state 58

    (15) PointerType -> STAR . BaseType
    (16) BaseType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    BaseType                       shift and go to state 110
    Type                           shift and go to state 111
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 59

    (38) VarDecl -> VAR VarSpec SEMICOLON .

    FUNC            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    CONST           reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    TYPE            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    VAR             reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    $end            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    RCURLY          reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    SEMICOLON       reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    RETURN          reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    BREAK           reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    CONTINUE        reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    GOTO            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    IF              reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    ID              reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    LCURLY          reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    FOR             reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    PLUS            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    MINUS           reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    NOT             reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    CARET           reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    STAR            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    AMP             reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    LROUND          reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    MAKE            reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    INT_LIT         reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    FLOAT_LIT       reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    STRING_LIT      reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    BOOL_LIT        reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    CHAR_LIT        reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    NIL             reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    STRUCT          reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)
    LSQUARE         reduce using rule 38 (VarDecl -> VAR VarSpec SEMICOLON .)


state 60

    (39) VarSpec -> IdentifierList Type .
    (40) VarSpec -> IdentifierList Type . EQ ExpressionList

    SEMICOLON       reduce using rule 39 (VarSpec -> IdentifierList Type .)
    EQ              shift and go to state 112


state 61

    (42) FunctionDecl -> FUNC FunctionName Signature FunctionBody .

    FUNC            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    CONST           reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    TYPE            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    VAR             reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)
    $end            reduce using rule 42 (FunctionDecl -> FUNC FunctionName Signature FunctionBody .)


state 62

    (43) FunctionDecl -> FUNC FunctionName Signature SEMICOLON .

    FUNC            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    CONST           reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    TYPE            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    VAR             reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)
    $end            reduce using rule 43 (FunctionDecl -> FUNC FunctionName Signature SEMICOLON .)


state 63

    (53) FunctionBody -> Block .

    FUNC            reduce using rule 53 (FunctionBody -> Block .)
    CONST           reduce using rule 53 (FunctionBody -> Block .)
    TYPE            reduce using rule 53 (FunctionBody -> Block .)
    VAR             reduce using rule 53 (FunctionBody -> Block .)
    $end            reduce using rule 53 (FunctionBody -> Block .)


state 64

    (21) Block -> lcurly . StatementList rcurly
    (22) Block -> lcurly . rcurly
    (23) StatementList -> . StatementList Statement
    (24) StatementList -> . Statement
    (2) rcurly -> . RCURLY
    (135) Statement -> . Declaration
    (136) Statement -> . LabeledStmt
    (137) Statement -> . ReturnStmt
    (138) Statement -> . BreakStmt
    (139) Statement -> . ContinueStmt
    (140) Statement -> . GotoStmt
    (141) Statement -> . Block
    (142) Statement -> . IfStmt
    (143) Statement -> . ForStmt
    (144) Statement -> . SimpleStmt SEMICOLON
    (145) Statement -> . SEMICOLON
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (151) LabeledStmt -> . Label COLON Statement
    (180) ReturnStmt -> . RETURN SEMICOLON
    (181) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (182) BreakStmt -> . BREAK SEMICOLON
    (183) BreakStmt -> . BREAK Label SEMICOLON
    (184) ContinueStmt -> . CONTINUE SEMICOLON
    (185) ContinueStmt -> . CONTINUE Label SEMICOLON
    (186) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (187) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (188) IfStmt -> . IF Expression Block
    (189) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (190) IfStmt -> . IF Expression ElseStmt
    (165) ForStmt -> . ForLoop Block
    (166) ForStmt -> . WhileLoop Block
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON
    (152) Label -> . ID
    (1) lcurly -> . LCURLY
    (167) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (171) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (172) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (173) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (174) ForLoop -> . FOR SEMICOLON SEMICOLON
    (175) WhileLoop -> . FOR Condition Block
    (176) WhileLoop -> . FOR Block
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 116
    SEMICOLON       shift and go to state 127
    RETURN          shift and go to state 129
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 132
    GOTO            shift and go to state 133
    IF              shift and go to state 134
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 142
    LCURLY          shift and go to state 65
    FOR             shift and go to state 143
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    lcurly                         shift and go to state 64
    StatementList                  shift and go to state 113
    rcurly                         shift and go to state 114
    Statement                      shift and go to state 115
    Declaration                    shift and go to state 117
    LabeledStmt                    shift and go to state 118
    ReturnStmt                     shift and go to state 119
    BreakStmt                      shift and go to state 120
    ContinueStmt                   shift and go to state 121
    GotoStmt                       shift and go to state 122
    Block                          shift and go to state 123
    IfStmt                         shift and go to state 124
    ForStmt                        shift and go to state 125
    SimpleStmt                     shift and go to state 126
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    Label                          shift and go to state 128
    ExpressionList                 shift and go to state 130
    Expression                     shift and go to state 135
    ForLoop                        shift and go to state 136
    WhileLoop                      shift and go to state 137
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 65

    (1) lcurly -> LCURLY .

    RCURLY          reduce using rule 1 (lcurly -> LCURLY .)
    SEMICOLON       reduce using rule 1 (lcurly -> LCURLY .)
    RETURN          reduce using rule 1 (lcurly -> LCURLY .)
    BREAK           reduce using rule 1 (lcurly -> LCURLY .)
    CONTINUE        reduce using rule 1 (lcurly -> LCURLY .)
    GOTO            reduce using rule 1 (lcurly -> LCURLY .)
    IF              reduce using rule 1 (lcurly -> LCURLY .)
    CONST           reduce using rule 1 (lcurly -> LCURLY .)
    TYPE            reduce using rule 1 (lcurly -> LCURLY .)
    VAR             reduce using rule 1 (lcurly -> LCURLY .)
    ID              reduce using rule 1 (lcurly -> LCURLY .)
    LCURLY          reduce using rule 1 (lcurly -> LCURLY .)
    FOR             reduce using rule 1 (lcurly -> LCURLY .)
    PLUS            reduce using rule 1 (lcurly -> LCURLY .)
    MINUS           reduce using rule 1 (lcurly -> LCURLY .)
    NOT             reduce using rule 1 (lcurly -> LCURLY .)
    CARET           reduce using rule 1 (lcurly -> LCURLY .)
    STAR            reduce using rule 1 (lcurly -> LCURLY .)
    AMP             reduce using rule 1 (lcurly -> LCURLY .)
    LROUND          reduce using rule 1 (lcurly -> LCURLY .)
    MAKE            reduce using rule 1 (lcurly -> LCURLY .)
    INT_LIT         reduce using rule 1 (lcurly -> LCURLY .)
    FLOAT_LIT       reduce using rule 1 (lcurly -> LCURLY .)
    STRING_LIT      reduce using rule 1 (lcurly -> LCURLY .)
    BOOL_LIT        reduce using rule 1 (lcurly -> LCURLY .)
    CHAR_LIT        reduce using rule 1 (lcurly -> LCURLY .)
    NIL             reduce using rule 1 (lcurly -> LCURLY .)
    STRUCT          reduce using rule 1 (lcurly -> LCURLY .)
    LSQUARE         reduce using rule 1 (lcurly -> LCURLY .)


state 66

    (46) Signature -> Parameters Result .

    SEMICOLON       reduce using rule 46 (Signature -> Parameters Result .)
    LCURLY          reduce using rule 46 (Signature -> Parameters Result .)
    FUNC            reduce using rule 46 (Signature -> Parameters Result .)
    CONST           reduce using rule 46 (Signature -> Parameters Result .)
    TYPE            reduce using rule 46 (Signature -> Parameters Result .)
    VAR             reduce using rule 46 (Signature -> Parameters Result .)
    $end            reduce using rule 46 (Signature -> Parameters Result .)


state 67

    (52) Result -> Type .

    SEMICOLON       reduce using rule 52 (Result -> Type .)
    LCURLY          reduce using rule 52 (Result -> Type .)
    FUNC            reduce using rule 52 (Result -> Type .)
    CONST           reduce using rule 52 (Result -> Type .)
    TYPE            reduce using rule 52 (Result -> Type .)
    VAR             reduce using rule 52 (Result -> Type .)
    $end            reduce using rule 52 (Result -> Type .)


state 68

    (47) Parameters -> LROUND ParameterList . RROUND
    (49) ParameterList -> ParameterList . COMMA ParameterDecl

    RROUND          shift and go to state 145
    COMMA           shift and go to state 146


state 69

    (48) Parameters -> LROUND RROUND .

    ID              reduce using rule 48 (Parameters -> LROUND RROUND .)
    DATA_TYPE       reduce using rule 48 (Parameters -> LROUND RROUND .)
    LSQUARE         reduce using rule 48 (Parameters -> LROUND RROUND .)
    STRUCT          reduce using rule 48 (Parameters -> LROUND RROUND .)
    STAR            reduce using rule 48 (Parameters -> LROUND RROUND .)
    SEMICOLON       reduce using rule 48 (Parameters -> LROUND RROUND .)
    LCURLY          reduce using rule 48 (Parameters -> LROUND RROUND .)
    FUNC            reduce using rule 48 (Parameters -> LROUND RROUND .)
    CONST           reduce using rule 48 (Parameters -> LROUND RROUND .)
    TYPE            reduce using rule 48 (Parameters -> LROUND RROUND .)
    VAR             reduce using rule 48 (Parameters -> LROUND RROUND .)
    $end            reduce using rule 48 (Parameters -> LROUND RROUND .)


state 70

    (50) ParameterList -> ParameterDecl .

    RROUND          reduce using rule 50 (ParameterList -> ParameterDecl .)
    COMMA           reduce using rule 50 (ParameterList -> ParameterDecl .)


state 71

    (54) MethodDecl -> FUNC Receiver MethodName Signature .
    (55) MethodDecl -> FUNC Receiver MethodName Signature . FunctionBody
    (53) FunctionBody -> . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    FUNC            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    CONST           reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    TYPE            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    VAR             reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    $end            reduce using rule 54 (MethodDecl -> FUNC Receiver MethodName Signature .)
    LCURLY          shift and go to state 65

    FunctionBody                   shift and go to state 147
    Block                          shift and go to state 63
    lcurly                         shift and go to state 64

state 72

    (57) Receiver -> LROUND ParameterDecl RROUND .

    ID              reduce using rule 57 (Receiver -> LROUND ParameterDecl RROUND .)


state 73

    (51) ParameterDecl -> IdentifierList Type .

    RROUND          reduce using rule 51 (ParameterDecl -> IdentifierList Type .)
    COMMA           reduce using rule 51 (ParameterDecl -> IdentifierList Type .)


state 74

    (32) ConstSpec -> IdentifierList EQ ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 32 (ConstSpec -> IdentifierList EQ ExpressionList .)
    COMMA           shift and go to state 148


state 75

    (36) ExpressionList -> Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    SEMICOLON       reduce using rule 36 (ExpressionList -> Expression .)
    RROUND          reduce using rule 36 (ExpressionList -> Expression .)
    LCURLY          reduce using rule 36 (ExpressionList -> Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 76

    (92) Expression -> UnaryExpr .

    OR_OR           reduce using rule 92 (Expression -> UnaryExpr .)
    AMP_AMP         reduce using rule 92 (Expression -> UnaryExpr .)
    EQ_EQ           reduce using rule 92 (Expression -> UnaryExpr .)
    NOT_EQ          reduce using rule 92 (Expression -> UnaryExpr .)
    LT              reduce using rule 92 (Expression -> UnaryExpr .)
    LE              reduce using rule 92 (Expression -> UnaryExpr .)
    GT              reduce using rule 92 (Expression -> UnaryExpr .)
    GE              reduce using rule 92 (Expression -> UnaryExpr .)
    PLUS            reduce using rule 92 (Expression -> UnaryExpr .)
    MINUS           reduce using rule 92 (Expression -> UnaryExpr .)
    OR              reduce using rule 92 (Expression -> UnaryExpr .)
    CARET           reduce using rule 92 (Expression -> UnaryExpr .)
    STAR            reduce using rule 92 (Expression -> UnaryExpr .)
    DIVIDE          reduce using rule 92 (Expression -> UnaryExpr .)
    MODULO          reduce using rule 92 (Expression -> UnaryExpr .)
    LSHIFT          reduce using rule 92 (Expression -> UnaryExpr .)
    RSHIFT          reduce using rule 92 (Expression -> UnaryExpr .)
    AMP             reduce using rule 92 (Expression -> UnaryExpr .)
    COMMA           reduce using rule 92 (Expression -> UnaryExpr .)
    SEMICOLON       reduce using rule 92 (Expression -> UnaryExpr .)
    RSQUARE         reduce using rule 92 (Expression -> UnaryExpr .)
    PLUS_PLUS       reduce using rule 92 (Expression -> UnaryExpr .)
    MINUS_MINUS     reduce using rule 92 (Expression -> UnaryExpr .)
    PLUS_EQ         reduce using rule 92 (Expression -> UnaryExpr .)
    MINUS_EQ        reduce using rule 92 (Expression -> UnaryExpr .)
    STAR_EQ         reduce using rule 92 (Expression -> UnaryExpr .)
    DIVIDE_EQ       reduce using rule 92 (Expression -> UnaryExpr .)
    MODULO_EQ       reduce using rule 92 (Expression -> UnaryExpr .)
    AMP_EQ          reduce using rule 92 (Expression -> UnaryExpr .)
    OR_EQ           reduce using rule 92 (Expression -> UnaryExpr .)
    CARET_EQ        reduce using rule 92 (Expression -> UnaryExpr .)
    EQ              reduce using rule 92 (Expression -> UnaryExpr .)
    RROUND          reduce using rule 92 (Expression -> UnaryExpr .)
    ELSE            reduce using rule 92 (Expression -> UnaryExpr .)
    LCURLY          reduce using rule 92 (Expression -> UnaryExpr .)
    RCURLY          reduce using rule 92 (Expression -> UnaryExpr .)


state 77

    (129) unary_op -> PLUS .

    PLUS            reduce using rule 129 (unary_op -> PLUS .)
    MINUS           reduce using rule 129 (unary_op -> PLUS .)
    NOT             reduce using rule 129 (unary_op -> PLUS .)
    CARET           reduce using rule 129 (unary_op -> PLUS .)
    STAR            reduce using rule 129 (unary_op -> PLUS .)
    AMP             reduce using rule 129 (unary_op -> PLUS .)
    LROUND          reduce using rule 129 (unary_op -> PLUS .)
    MAKE            reduce using rule 129 (unary_op -> PLUS .)
    ID              reduce using rule 129 (unary_op -> PLUS .)
    INT_LIT         reduce using rule 129 (unary_op -> PLUS .)
    FLOAT_LIT       reduce using rule 129 (unary_op -> PLUS .)
    STRING_LIT      reduce using rule 129 (unary_op -> PLUS .)
    BOOL_LIT        reduce using rule 129 (unary_op -> PLUS .)
    CHAR_LIT        reduce using rule 129 (unary_op -> PLUS .)
    NIL             reduce using rule 129 (unary_op -> PLUS .)
    STRUCT          reduce using rule 129 (unary_op -> PLUS .)
    LSQUARE         reduce using rule 129 (unary_op -> PLUS .)


state 78

    (130) unary_op -> MINUS .

    PLUS            reduce using rule 130 (unary_op -> MINUS .)
    MINUS           reduce using rule 130 (unary_op -> MINUS .)
    NOT             reduce using rule 130 (unary_op -> MINUS .)
    CARET           reduce using rule 130 (unary_op -> MINUS .)
    STAR            reduce using rule 130 (unary_op -> MINUS .)
    AMP             reduce using rule 130 (unary_op -> MINUS .)
    LROUND          reduce using rule 130 (unary_op -> MINUS .)
    MAKE            reduce using rule 130 (unary_op -> MINUS .)
    ID              reduce using rule 130 (unary_op -> MINUS .)
    INT_LIT         reduce using rule 130 (unary_op -> MINUS .)
    FLOAT_LIT       reduce using rule 130 (unary_op -> MINUS .)
    STRING_LIT      reduce using rule 130 (unary_op -> MINUS .)
    BOOL_LIT        reduce using rule 130 (unary_op -> MINUS .)
    CHAR_LIT        reduce using rule 130 (unary_op -> MINUS .)
    NIL             reduce using rule 130 (unary_op -> MINUS .)
    STRUCT          reduce using rule 130 (unary_op -> MINUS .)
    LSQUARE         reduce using rule 130 (unary_op -> MINUS .)


state 79

    (132) unary_op -> CARET .

    PLUS            reduce using rule 132 (unary_op -> CARET .)
    MINUS           reduce using rule 132 (unary_op -> CARET .)
    NOT             reduce using rule 132 (unary_op -> CARET .)
    CARET           reduce using rule 132 (unary_op -> CARET .)
    STAR            reduce using rule 132 (unary_op -> CARET .)
    AMP             reduce using rule 132 (unary_op -> CARET .)
    LROUND          reduce using rule 132 (unary_op -> CARET .)
    MAKE            reduce using rule 132 (unary_op -> CARET .)
    ID              reduce using rule 132 (unary_op -> CARET .)
    INT_LIT         reduce using rule 132 (unary_op -> CARET .)
    FLOAT_LIT       reduce using rule 132 (unary_op -> CARET .)
    STRING_LIT      reduce using rule 132 (unary_op -> CARET .)
    BOOL_LIT        reduce using rule 132 (unary_op -> CARET .)
    CHAR_LIT        reduce using rule 132 (unary_op -> CARET .)
    NIL             reduce using rule 132 (unary_op -> CARET .)
    STRUCT          reduce using rule 132 (unary_op -> CARET .)
    LSQUARE         reduce using rule 132 (unary_op -> CARET .)


state 80

    (133) unary_op -> STAR .

    PLUS            reduce using rule 133 (unary_op -> STAR .)
    MINUS           reduce using rule 133 (unary_op -> STAR .)
    NOT             reduce using rule 133 (unary_op -> STAR .)
    CARET           reduce using rule 133 (unary_op -> STAR .)
    STAR            reduce using rule 133 (unary_op -> STAR .)
    AMP             reduce using rule 133 (unary_op -> STAR .)
    LROUND          reduce using rule 133 (unary_op -> STAR .)
    MAKE            reduce using rule 133 (unary_op -> STAR .)
    ID              reduce using rule 133 (unary_op -> STAR .)
    INT_LIT         reduce using rule 133 (unary_op -> STAR .)
    FLOAT_LIT       reduce using rule 133 (unary_op -> STAR .)
    STRING_LIT      reduce using rule 133 (unary_op -> STAR .)
    BOOL_LIT        reduce using rule 133 (unary_op -> STAR .)
    CHAR_LIT        reduce using rule 133 (unary_op -> STAR .)
    NIL             reduce using rule 133 (unary_op -> STAR .)
    STRUCT          reduce using rule 133 (unary_op -> STAR .)
    LSQUARE         reduce using rule 133 (unary_op -> STAR .)


state 81

    (134) unary_op -> AMP .

    PLUS            reduce using rule 134 (unary_op -> AMP .)
    MINUS           reduce using rule 134 (unary_op -> AMP .)
    NOT             reduce using rule 134 (unary_op -> AMP .)
    CARET           reduce using rule 134 (unary_op -> AMP .)
    STAR            reduce using rule 134 (unary_op -> AMP .)
    AMP             reduce using rule 134 (unary_op -> AMP .)
    LROUND          reduce using rule 134 (unary_op -> AMP .)
    MAKE            reduce using rule 134 (unary_op -> AMP .)
    ID              reduce using rule 134 (unary_op -> AMP .)
    INT_LIT         reduce using rule 134 (unary_op -> AMP .)
    FLOAT_LIT       reduce using rule 134 (unary_op -> AMP .)
    STRING_LIT      reduce using rule 134 (unary_op -> AMP .)
    BOOL_LIT        reduce using rule 134 (unary_op -> AMP .)
    CHAR_LIT        reduce using rule 134 (unary_op -> AMP .)
    NIL             reduce using rule 134 (unary_op -> AMP .)
    STRUCT          reduce using rule 134 (unary_op -> AMP .)
    LSQUARE         reduce using rule 134 (unary_op -> AMP .)


state 82

    (111) UnaryExpr -> PrimaryExpr .
    (82) PrimaryExpr -> PrimaryExpr . Selector
    (83) PrimaryExpr -> PrimaryExpr . Index
    (84) PrimaryExpr -> PrimaryExpr . Arguments
    (88) Selector -> . DOT ID
    (89) Index -> . LSQUARE Expression RSQUARE
    (90) Arguments -> . LROUND ExpressionList RROUND
    (91) Arguments -> . LROUND RROUND

    OR_OR           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    AMP_AMP         reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    EQ_EQ           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    NOT_EQ          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    LT              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    LE              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    GT              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    GE              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    PLUS            reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    MINUS           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    OR              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    CARET           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    STAR            reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    DIVIDE          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    MODULO          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    LSHIFT          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    RSHIFT          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    AMP             reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    COMMA           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    SEMICOLON       reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    RSQUARE         reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    PLUS_PLUS       reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    MINUS_MINUS     reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    PLUS_EQ         reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    MINUS_EQ        reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    STAR_EQ         reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    DIVIDE_EQ       reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    MODULO_EQ       reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    AMP_EQ          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    OR_EQ           reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    CARET_EQ        reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    EQ              reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    RROUND          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    ELSE            reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    LCURLY          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    RCURLY          reduce using rule 111 (UnaryExpr -> PrimaryExpr .)
    DOT             shift and go to state 170
    LSQUARE         shift and go to state 171
    LROUND          shift and go to state 172

    Selector                       shift and go to state 167
    Index                          shift and go to state 168
    Arguments                      shift and go to state 169

state 83

    (112) UnaryExpr -> unary_op . UnaryExpr
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    unary_op                       shift and go to state 83
    UnaryExpr                      shift and go to state 173
    PrimaryExpr                    shift and go to state 82
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 84

    (81) PrimaryExpr -> Operand .

    DOT             reduce using rule 81 (PrimaryExpr -> Operand .)
    LSQUARE         reduce using rule 81 (PrimaryExpr -> Operand .)
    LROUND          reduce using rule 81 (PrimaryExpr -> Operand .)
    OR_OR           reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP_AMP         reduce using rule 81 (PrimaryExpr -> Operand .)
    EQ_EQ           reduce using rule 81 (PrimaryExpr -> Operand .)
    NOT_EQ          reduce using rule 81 (PrimaryExpr -> Operand .)
    LT              reduce using rule 81 (PrimaryExpr -> Operand .)
    LE              reduce using rule 81 (PrimaryExpr -> Operand .)
    GT              reduce using rule 81 (PrimaryExpr -> Operand .)
    GE              reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS            reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS           reduce using rule 81 (PrimaryExpr -> Operand .)
    OR              reduce using rule 81 (PrimaryExpr -> Operand .)
    CARET           reduce using rule 81 (PrimaryExpr -> Operand .)
    STAR            reduce using rule 81 (PrimaryExpr -> Operand .)
    DIVIDE          reduce using rule 81 (PrimaryExpr -> Operand .)
    MODULO          reduce using rule 81 (PrimaryExpr -> Operand .)
    LSHIFT          reduce using rule 81 (PrimaryExpr -> Operand .)
    RSHIFT          reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP             reduce using rule 81 (PrimaryExpr -> Operand .)
    COMMA           reduce using rule 81 (PrimaryExpr -> Operand .)
    SEMICOLON       reduce using rule 81 (PrimaryExpr -> Operand .)
    RSQUARE         reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS_PLUS       reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS_MINUS     reduce using rule 81 (PrimaryExpr -> Operand .)
    PLUS_EQ         reduce using rule 81 (PrimaryExpr -> Operand .)
    MINUS_EQ        reduce using rule 81 (PrimaryExpr -> Operand .)
    STAR_EQ         reduce using rule 81 (PrimaryExpr -> Operand .)
    DIVIDE_EQ       reduce using rule 81 (PrimaryExpr -> Operand .)
    MODULO_EQ       reduce using rule 81 (PrimaryExpr -> Operand .)
    AMP_EQ          reduce using rule 81 (PrimaryExpr -> Operand .)
    OR_EQ           reduce using rule 81 (PrimaryExpr -> Operand .)
    CARET_EQ        reduce using rule 81 (PrimaryExpr -> Operand .)
    EQ              reduce using rule 81 (PrimaryExpr -> Operand .)
    RROUND          reduce using rule 81 (PrimaryExpr -> Operand .)
    ELSE            reduce using rule 81 (PrimaryExpr -> Operand .)
    LCURLY          reduce using rule 81 (PrimaryExpr -> Operand .)
    RCURLY          reduce using rule 81 (PrimaryExpr -> Operand .)


state 85

    (85) PrimaryExpr -> MakeExpr .

    DOT             reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LSQUARE         reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LROUND          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    OR_OR           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    AMP_AMP         reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    EQ_EQ           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    NOT_EQ          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LT              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LE              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    GT              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    GE              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    PLUS            reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    MINUS           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    OR              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    CARET           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    STAR            reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    DIVIDE          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    MODULO          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LSHIFT          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    RSHIFT          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    AMP             reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    COMMA           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    SEMICOLON       reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    RSQUARE         reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    PLUS_PLUS       reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    MINUS_MINUS     reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    PLUS_EQ         reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    MINUS_EQ        reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    STAR_EQ         reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    DIVIDE_EQ       reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    MODULO_EQ       reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    AMP_EQ          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    OR_EQ           reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    CARET_EQ        reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    EQ              reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    RROUND          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    ELSE            reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    LCURLY          reduce using rule 85 (PrimaryExpr -> MakeExpr .)
    RCURLY          reduce using rule 85 (PrimaryExpr -> MakeExpr .)


state 86

    (131) unary_op -> NOT .

    PLUS            reduce using rule 131 (unary_op -> NOT .)
    MINUS           reduce using rule 131 (unary_op -> NOT .)
    NOT             reduce using rule 131 (unary_op -> NOT .)
    CARET           reduce using rule 131 (unary_op -> NOT .)
    STAR            reduce using rule 131 (unary_op -> NOT .)
    AMP             reduce using rule 131 (unary_op -> NOT .)
    LROUND          reduce using rule 131 (unary_op -> NOT .)
    MAKE            reduce using rule 131 (unary_op -> NOT .)
    ID              reduce using rule 131 (unary_op -> NOT .)
    INT_LIT         reduce using rule 131 (unary_op -> NOT .)
    FLOAT_LIT       reduce using rule 131 (unary_op -> NOT .)
    STRING_LIT      reduce using rule 131 (unary_op -> NOT .)
    BOOL_LIT        reduce using rule 131 (unary_op -> NOT .)
    CHAR_LIT        reduce using rule 131 (unary_op -> NOT .)
    NIL             reduce using rule 131 (unary_op -> NOT .)
    STRUCT          reduce using rule 131 (unary_op -> NOT .)
    LSQUARE         reduce using rule 131 (unary_op -> NOT .)


state 87

    (58) Operand -> Literal .

    DOT             reduce using rule 58 (Operand -> Literal .)
    LSQUARE         reduce using rule 58 (Operand -> Literal .)
    LROUND          reduce using rule 58 (Operand -> Literal .)
    OR_OR           reduce using rule 58 (Operand -> Literal .)
    AMP_AMP         reduce using rule 58 (Operand -> Literal .)
    EQ_EQ           reduce using rule 58 (Operand -> Literal .)
    NOT_EQ          reduce using rule 58 (Operand -> Literal .)
    LT              reduce using rule 58 (Operand -> Literal .)
    LE              reduce using rule 58 (Operand -> Literal .)
    GT              reduce using rule 58 (Operand -> Literal .)
    GE              reduce using rule 58 (Operand -> Literal .)
    PLUS            reduce using rule 58 (Operand -> Literal .)
    MINUS           reduce using rule 58 (Operand -> Literal .)
    OR              reduce using rule 58 (Operand -> Literal .)
    CARET           reduce using rule 58 (Operand -> Literal .)
    STAR            reduce using rule 58 (Operand -> Literal .)
    DIVIDE          reduce using rule 58 (Operand -> Literal .)
    MODULO          reduce using rule 58 (Operand -> Literal .)
    LSHIFT          reduce using rule 58 (Operand -> Literal .)
    RSHIFT          reduce using rule 58 (Operand -> Literal .)
    AMP             reduce using rule 58 (Operand -> Literal .)
    COMMA           reduce using rule 58 (Operand -> Literal .)
    SEMICOLON       reduce using rule 58 (Operand -> Literal .)
    RSQUARE         reduce using rule 58 (Operand -> Literal .)
    PLUS_PLUS       reduce using rule 58 (Operand -> Literal .)
    MINUS_MINUS     reduce using rule 58 (Operand -> Literal .)
    PLUS_EQ         reduce using rule 58 (Operand -> Literal .)
    MINUS_EQ        reduce using rule 58 (Operand -> Literal .)
    STAR_EQ         reduce using rule 58 (Operand -> Literal .)
    DIVIDE_EQ       reduce using rule 58 (Operand -> Literal .)
    MODULO_EQ       reduce using rule 58 (Operand -> Literal .)
    AMP_EQ          reduce using rule 58 (Operand -> Literal .)
    OR_EQ           reduce using rule 58 (Operand -> Literal .)
    CARET_EQ        reduce using rule 58 (Operand -> Literal .)
    EQ              reduce using rule 58 (Operand -> Literal .)
    RROUND          reduce using rule 58 (Operand -> Literal .)
    ELSE            reduce using rule 58 (Operand -> Literal .)
    LCURLY          reduce using rule 58 (Operand -> Literal .)
    RCURLY          reduce using rule 58 (Operand -> Literal .)


state 88

    (59) Operand -> OperandName .

    DOT             reduce using rule 59 (Operand -> OperandName .)
    LSQUARE         reduce using rule 59 (Operand -> OperandName .)
    LROUND          reduce using rule 59 (Operand -> OperandName .)
    OR_OR           reduce using rule 59 (Operand -> OperandName .)
    AMP_AMP         reduce using rule 59 (Operand -> OperandName .)
    EQ_EQ           reduce using rule 59 (Operand -> OperandName .)
    NOT_EQ          reduce using rule 59 (Operand -> OperandName .)
    LT              reduce using rule 59 (Operand -> OperandName .)
    LE              reduce using rule 59 (Operand -> OperandName .)
    GT              reduce using rule 59 (Operand -> OperandName .)
    GE              reduce using rule 59 (Operand -> OperandName .)
    PLUS            reduce using rule 59 (Operand -> OperandName .)
    MINUS           reduce using rule 59 (Operand -> OperandName .)
    OR              reduce using rule 59 (Operand -> OperandName .)
    CARET           reduce using rule 59 (Operand -> OperandName .)
    STAR            reduce using rule 59 (Operand -> OperandName .)
    DIVIDE          reduce using rule 59 (Operand -> OperandName .)
    MODULO          reduce using rule 59 (Operand -> OperandName .)
    LSHIFT          reduce using rule 59 (Operand -> OperandName .)
    RSHIFT          reduce using rule 59 (Operand -> OperandName .)
    AMP             reduce using rule 59 (Operand -> OperandName .)
    COMMA           reduce using rule 59 (Operand -> OperandName .)
    SEMICOLON       reduce using rule 59 (Operand -> OperandName .)
    RSQUARE         reduce using rule 59 (Operand -> OperandName .)
    PLUS_PLUS       reduce using rule 59 (Operand -> OperandName .)
    MINUS_MINUS     reduce using rule 59 (Operand -> OperandName .)
    PLUS_EQ         reduce using rule 59 (Operand -> OperandName .)
    MINUS_EQ        reduce using rule 59 (Operand -> OperandName .)
    STAR_EQ         reduce using rule 59 (Operand -> OperandName .)
    DIVIDE_EQ       reduce using rule 59 (Operand -> OperandName .)
    MODULO_EQ       reduce using rule 59 (Operand -> OperandName .)
    AMP_EQ          reduce using rule 59 (Operand -> OperandName .)
    OR_EQ           reduce using rule 59 (Operand -> OperandName .)
    CARET_EQ        reduce using rule 59 (Operand -> OperandName .)
    EQ              reduce using rule 59 (Operand -> OperandName .)
    RROUND          reduce using rule 59 (Operand -> OperandName .)
    ELSE            reduce using rule 59 (Operand -> OperandName .)
    LCURLY          reduce using rule 59 (Operand -> OperandName .)
    RCURLY          reduce using rule 59 (Operand -> OperandName .)


state 89

    (60) Operand -> LROUND . Expression RROUND
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 174
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 90

    (86) MakeExpr -> MAKE . LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> MAKE . LROUND SliceType COMMA Expression RROUND

    LROUND          shift and go to state 175


state 91

    (73) LiteralType -> SliceType .

    LCURLY          reduce using rule 73 (LiteralType -> SliceType .)


state 92

    (61) Literal -> BasicLit .

    DOT             reduce using rule 61 (Literal -> BasicLit .)
    LSQUARE         reduce using rule 61 (Literal -> BasicLit .)
    LROUND          reduce using rule 61 (Literal -> BasicLit .)
    OR_OR           reduce using rule 61 (Literal -> BasicLit .)
    AMP_AMP         reduce using rule 61 (Literal -> BasicLit .)
    EQ_EQ           reduce using rule 61 (Literal -> BasicLit .)
    NOT_EQ          reduce using rule 61 (Literal -> BasicLit .)
    LT              reduce using rule 61 (Literal -> BasicLit .)
    LE              reduce using rule 61 (Literal -> BasicLit .)
    GT              reduce using rule 61 (Literal -> BasicLit .)
    GE              reduce using rule 61 (Literal -> BasicLit .)
    PLUS            reduce using rule 61 (Literal -> BasicLit .)
    MINUS           reduce using rule 61 (Literal -> BasicLit .)
    OR              reduce using rule 61 (Literal -> BasicLit .)
    CARET           reduce using rule 61 (Literal -> BasicLit .)
    STAR            reduce using rule 61 (Literal -> BasicLit .)
    DIVIDE          reduce using rule 61 (Literal -> BasicLit .)
    MODULO          reduce using rule 61 (Literal -> BasicLit .)
    LSHIFT          reduce using rule 61 (Literal -> BasicLit .)
    RSHIFT          reduce using rule 61 (Literal -> BasicLit .)
    AMP             reduce using rule 61 (Literal -> BasicLit .)
    COMMA           reduce using rule 61 (Literal -> BasicLit .)
    SEMICOLON       reduce using rule 61 (Literal -> BasicLit .)
    RSQUARE         reduce using rule 61 (Literal -> BasicLit .)
    PLUS_PLUS       reduce using rule 61 (Literal -> BasicLit .)
    MINUS_MINUS     reduce using rule 61 (Literal -> BasicLit .)
    PLUS_EQ         reduce using rule 61 (Literal -> BasicLit .)
    MINUS_EQ        reduce using rule 61 (Literal -> BasicLit .)
    STAR_EQ         reduce using rule 61 (Literal -> BasicLit .)
    DIVIDE_EQ       reduce using rule 61 (Literal -> BasicLit .)
    MODULO_EQ       reduce using rule 61 (Literal -> BasicLit .)
    AMP_EQ          reduce using rule 61 (Literal -> BasicLit .)
    OR_EQ           reduce using rule 61 (Literal -> BasicLit .)
    CARET_EQ        reduce using rule 61 (Literal -> BasicLit .)
    EQ              reduce using rule 61 (Literal -> BasicLit .)
    RROUND          reduce using rule 61 (Literal -> BasicLit .)
    ELSE            reduce using rule 61 (Literal -> BasicLit .)
    LCURLY          reduce using rule 61 (Literal -> BasicLit .)
    RCURLY          reduce using rule 61 (Literal -> BasicLit .)


state 93

    (62) Literal -> CompositeLit .

    DOT             reduce using rule 62 (Literal -> CompositeLit .)
    LSQUARE         reduce using rule 62 (Literal -> CompositeLit .)
    LROUND          reduce using rule 62 (Literal -> CompositeLit .)
    OR_OR           reduce using rule 62 (Literal -> CompositeLit .)
    AMP_AMP         reduce using rule 62 (Literal -> CompositeLit .)
    EQ_EQ           reduce using rule 62 (Literal -> CompositeLit .)
    NOT_EQ          reduce using rule 62 (Literal -> CompositeLit .)
    LT              reduce using rule 62 (Literal -> CompositeLit .)
    LE              reduce using rule 62 (Literal -> CompositeLit .)
    GT              reduce using rule 62 (Literal -> CompositeLit .)
    GE              reduce using rule 62 (Literal -> CompositeLit .)
    PLUS            reduce using rule 62 (Literal -> CompositeLit .)
    MINUS           reduce using rule 62 (Literal -> CompositeLit .)
    OR              reduce using rule 62 (Literal -> CompositeLit .)
    CARET           reduce using rule 62 (Literal -> CompositeLit .)
    STAR            reduce using rule 62 (Literal -> CompositeLit .)
    DIVIDE          reduce using rule 62 (Literal -> CompositeLit .)
    MODULO          reduce using rule 62 (Literal -> CompositeLit .)
    LSHIFT          reduce using rule 62 (Literal -> CompositeLit .)
    RSHIFT          reduce using rule 62 (Literal -> CompositeLit .)
    AMP             reduce using rule 62 (Literal -> CompositeLit .)
    COMMA           reduce using rule 62 (Literal -> CompositeLit .)
    SEMICOLON       reduce using rule 62 (Literal -> CompositeLit .)
    RSQUARE         reduce using rule 62 (Literal -> CompositeLit .)
    PLUS_PLUS       reduce using rule 62 (Literal -> CompositeLit .)
    MINUS_MINUS     reduce using rule 62 (Literal -> CompositeLit .)
    PLUS_EQ         reduce using rule 62 (Literal -> CompositeLit .)
    MINUS_EQ        reduce using rule 62 (Literal -> CompositeLit .)
    STAR_EQ         reduce using rule 62 (Literal -> CompositeLit .)
    DIVIDE_EQ       reduce using rule 62 (Literal -> CompositeLit .)
    MODULO_EQ       reduce using rule 62 (Literal -> CompositeLit .)
    AMP_EQ          reduce using rule 62 (Literal -> CompositeLit .)
    OR_EQ           reduce using rule 62 (Literal -> CompositeLit .)
    CARET_EQ        reduce using rule 62 (Literal -> CompositeLit .)
    EQ              reduce using rule 62 (Literal -> CompositeLit .)
    RROUND          reduce using rule 62 (Literal -> CompositeLit .)
    ELSE            reduce using rule 62 (Literal -> CompositeLit .)
    LCURLY          reduce using rule 62 (Literal -> CompositeLit .)
    RCURLY          reduce using rule 62 (Literal -> CompositeLit .)


state 94

    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for LCURLY resolved using rule 69 (OperandName -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    COMMA           reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    RSQUARE         reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)
    RROUND          reduce using rule 69 (OperandName -> ID .)
    ELSE            reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 69 (OperandName -> ID .)
    RCURLY          reduce using rule 69 (OperandName -> ID .)

  ! LCURLY          [ reduce using rule 74 (LiteralType -> ID .) ]


state 95

    (63) BasicLit -> INT_LIT .

    DOT             reduce using rule 63 (BasicLit -> INT_LIT .)
    LSQUARE         reduce using rule 63 (BasicLit -> INT_LIT .)
    LROUND          reduce using rule 63 (BasicLit -> INT_LIT .)
    OR_OR           reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP_AMP         reduce using rule 63 (BasicLit -> INT_LIT .)
    EQ_EQ           reduce using rule 63 (BasicLit -> INT_LIT .)
    NOT_EQ          reduce using rule 63 (BasicLit -> INT_LIT .)
    LT              reduce using rule 63 (BasicLit -> INT_LIT .)
    LE              reduce using rule 63 (BasicLit -> INT_LIT .)
    GT              reduce using rule 63 (BasicLit -> INT_LIT .)
    GE              reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS            reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS           reduce using rule 63 (BasicLit -> INT_LIT .)
    OR              reduce using rule 63 (BasicLit -> INT_LIT .)
    CARET           reduce using rule 63 (BasicLit -> INT_LIT .)
    STAR            reduce using rule 63 (BasicLit -> INT_LIT .)
    DIVIDE          reduce using rule 63 (BasicLit -> INT_LIT .)
    MODULO          reduce using rule 63 (BasicLit -> INT_LIT .)
    LSHIFT          reduce using rule 63 (BasicLit -> INT_LIT .)
    RSHIFT          reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP             reduce using rule 63 (BasicLit -> INT_LIT .)
    COMMA           reduce using rule 63 (BasicLit -> INT_LIT .)
    SEMICOLON       reduce using rule 63 (BasicLit -> INT_LIT .)
    RSQUARE         reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS_PLUS       reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS_MINUS     reduce using rule 63 (BasicLit -> INT_LIT .)
    PLUS_EQ         reduce using rule 63 (BasicLit -> INT_LIT .)
    MINUS_EQ        reduce using rule 63 (BasicLit -> INT_LIT .)
    STAR_EQ         reduce using rule 63 (BasicLit -> INT_LIT .)
    DIVIDE_EQ       reduce using rule 63 (BasicLit -> INT_LIT .)
    MODULO_EQ       reduce using rule 63 (BasicLit -> INT_LIT .)
    AMP_EQ          reduce using rule 63 (BasicLit -> INT_LIT .)
    OR_EQ           reduce using rule 63 (BasicLit -> INT_LIT .)
    CARET_EQ        reduce using rule 63 (BasicLit -> INT_LIT .)
    EQ              reduce using rule 63 (BasicLit -> INT_LIT .)
    RROUND          reduce using rule 63 (BasicLit -> INT_LIT .)
    ELSE            reduce using rule 63 (BasicLit -> INT_LIT .)
    LCURLY          reduce using rule 63 (BasicLit -> INT_LIT .)
    RCURLY          reduce using rule 63 (BasicLit -> INT_LIT .)


state 96

    (64) BasicLit -> FLOAT_LIT .

    DOT             reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LSQUARE         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LROUND          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR_OR           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP_AMP         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    EQ_EQ           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    NOT_EQ          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LT              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LE              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    GT              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    GE              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    CARET           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    STAR            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    DIVIDE          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MODULO          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LSHIFT          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RSHIFT          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP             reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    COMMA           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    SEMICOLON       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RSQUARE         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS_PLUS       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS_MINUS     reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    PLUS_EQ         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MINUS_EQ        reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    STAR_EQ         reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    DIVIDE_EQ       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    MODULO_EQ       reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    AMP_EQ          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    OR_EQ           reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    CARET_EQ        reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    EQ              reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RROUND          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    ELSE            reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    LCURLY          reduce using rule 64 (BasicLit -> FLOAT_LIT .)
    RCURLY          reduce using rule 64 (BasicLit -> FLOAT_LIT .)


state 97

    (65) BasicLit -> STRING_LIT .

    DOT             reduce using rule 65 (BasicLit -> STRING_LIT .)
    LSQUARE         reduce using rule 65 (BasicLit -> STRING_LIT .)
    LROUND          reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR_OR           reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP_AMP         reduce using rule 65 (BasicLit -> STRING_LIT .)
    EQ_EQ           reduce using rule 65 (BasicLit -> STRING_LIT .)
    NOT_EQ          reduce using rule 65 (BasicLit -> STRING_LIT .)
    LT              reduce using rule 65 (BasicLit -> STRING_LIT .)
    LE              reduce using rule 65 (BasicLit -> STRING_LIT .)
    GT              reduce using rule 65 (BasicLit -> STRING_LIT .)
    GE              reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS            reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS           reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR              reduce using rule 65 (BasicLit -> STRING_LIT .)
    CARET           reduce using rule 65 (BasicLit -> STRING_LIT .)
    STAR            reduce using rule 65 (BasicLit -> STRING_LIT .)
    DIVIDE          reduce using rule 65 (BasicLit -> STRING_LIT .)
    MODULO          reduce using rule 65 (BasicLit -> STRING_LIT .)
    LSHIFT          reduce using rule 65 (BasicLit -> STRING_LIT .)
    RSHIFT          reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP             reduce using rule 65 (BasicLit -> STRING_LIT .)
    COMMA           reduce using rule 65 (BasicLit -> STRING_LIT .)
    SEMICOLON       reduce using rule 65 (BasicLit -> STRING_LIT .)
    RSQUARE         reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS_PLUS       reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS_MINUS     reduce using rule 65 (BasicLit -> STRING_LIT .)
    PLUS_EQ         reduce using rule 65 (BasicLit -> STRING_LIT .)
    MINUS_EQ        reduce using rule 65 (BasicLit -> STRING_LIT .)
    STAR_EQ         reduce using rule 65 (BasicLit -> STRING_LIT .)
    DIVIDE_EQ       reduce using rule 65 (BasicLit -> STRING_LIT .)
    MODULO_EQ       reduce using rule 65 (BasicLit -> STRING_LIT .)
    AMP_EQ          reduce using rule 65 (BasicLit -> STRING_LIT .)
    OR_EQ           reduce using rule 65 (BasicLit -> STRING_LIT .)
    CARET_EQ        reduce using rule 65 (BasicLit -> STRING_LIT .)
    EQ              reduce using rule 65 (BasicLit -> STRING_LIT .)
    RROUND          reduce using rule 65 (BasicLit -> STRING_LIT .)
    ELSE            reduce using rule 65 (BasicLit -> STRING_LIT .)
    LCURLY          reduce using rule 65 (BasicLit -> STRING_LIT .)
    RCURLY          reduce using rule 65 (BasicLit -> STRING_LIT .)


state 98

    (66) BasicLit -> BOOL_LIT .

    DOT             reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LSQUARE         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LROUND          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR_OR           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP_AMP         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    EQ_EQ           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    NOT_EQ          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LT              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LE              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    GT              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    GE              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    CARET           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    STAR            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    DIVIDE          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MODULO          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LSHIFT          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RSHIFT          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP             reduce using rule 66 (BasicLit -> BOOL_LIT .)
    COMMA           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    SEMICOLON       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RSQUARE         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS_PLUS       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS_MINUS     reduce using rule 66 (BasicLit -> BOOL_LIT .)
    PLUS_EQ         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MINUS_EQ        reduce using rule 66 (BasicLit -> BOOL_LIT .)
    STAR_EQ         reduce using rule 66 (BasicLit -> BOOL_LIT .)
    DIVIDE_EQ       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    MODULO_EQ       reduce using rule 66 (BasicLit -> BOOL_LIT .)
    AMP_EQ          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    OR_EQ           reduce using rule 66 (BasicLit -> BOOL_LIT .)
    CARET_EQ        reduce using rule 66 (BasicLit -> BOOL_LIT .)
    EQ              reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RROUND          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    ELSE            reduce using rule 66 (BasicLit -> BOOL_LIT .)
    LCURLY          reduce using rule 66 (BasicLit -> BOOL_LIT .)
    RCURLY          reduce using rule 66 (BasicLit -> BOOL_LIT .)


state 99

    (67) BasicLit -> CHAR_LIT .

    DOT             reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LSQUARE         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LROUND          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR_OR           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP_AMP         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    EQ_EQ           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    NOT_EQ          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LT              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LE              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    GT              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    GE              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    CARET           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    STAR            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    DIVIDE          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MODULO          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LSHIFT          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RSHIFT          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP             reduce using rule 67 (BasicLit -> CHAR_LIT .)
    COMMA           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    SEMICOLON       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RSQUARE         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS_PLUS       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS_MINUS     reduce using rule 67 (BasicLit -> CHAR_LIT .)
    PLUS_EQ         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MINUS_EQ        reduce using rule 67 (BasicLit -> CHAR_LIT .)
    STAR_EQ         reduce using rule 67 (BasicLit -> CHAR_LIT .)
    DIVIDE_EQ       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    MODULO_EQ       reduce using rule 67 (BasicLit -> CHAR_LIT .)
    AMP_EQ          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    OR_EQ           reduce using rule 67 (BasicLit -> CHAR_LIT .)
    CARET_EQ        reduce using rule 67 (BasicLit -> CHAR_LIT .)
    EQ              reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RROUND          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    ELSE            reduce using rule 67 (BasicLit -> CHAR_LIT .)
    LCURLY          reduce using rule 67 (BasicLit -> CHAR_LIT .)
    RCURLY          reduce using rule 67 (BasicLit -> CHAR_LIT .)


state 100

    (68) BasicLit -> NIL .

    DOT             reduce using rule 68 (BasicLit -> NIL .)
    LSQUARE         reduce using rule 68 (BasicLit -> NIL .)
    LROUND          reduce using rule 68 (BasicLit -> NIL .)
    OR_OR           reduce using rule 68 (BasicLit -> NIL .)
    AMP_AMP         reduce using rule 68 (BasicLit -> NIL .)
    EQ_EQ           reduce using rule 68 (BasicLit -> NIL .)
    NOT_EQ          reduce using rule 68 (BasicLit -> NIL .)
    LT              reduce using rule 68 (BasicLit -> NIL .)
    LE              reduce using rule 68 (BasicLit -> NIL .)
    GT              reduce using rule 68 (BasicLit -> NIL .)
    GE              reduce using rule 68 (BasicLit -> NIL .)
    PLUS            reduce using rule 68 (BasicLit -> NIL .)
    MINUS           reduce using rule 68 (BasicLit -> NIL .)
    OR              reduce using rule 68 (BasicLit -> NIL .)
    CARET           reduce using rule 68 (BasicLit -> NIL .)
    STAR            reduce using rule 68 (BasicLit -> NIL .)
    DIVIDE          reduce using rule 68 (BasicLit -> NIL .)
    MODULO          reduce using rule 68 (BasicLit -> NIL .)
    LSHIFT          reduce using rule 68 (BasicLit -> NIL .)
    RSHIFT          reduce using rule 68 (BasicLit -> NIL .)
    AMP             reduce using rule 68 (BasicLit -> NIL .)
    COMMA           reduce using rule 68 (BasicLit -> NIL .)
    SEMICOLON       reduce using rule 68 (BasicLit -> NIL .)
    RSQUARE         reduce using rule 68 (BasicLit -> NIL .)
    PLUS_PLUS       reduce using rule 68 (BasicLit -> NIL .)
    MINUS_MINUS     reduce using rule 68 (BasicLit -> NIL .)
    PLUS_EQ         reduce using rule 68 (BasicLit -> NIL .)
    MINUS_EQ        reduce using rule 68 (BasicLit -> NIL .)
    STAR_EQ         reduce using rule 68 (BasicLit -> NIL .)
    DIVIDE_EQ       reduce using rule 68 (BasicLit -> NIL .)
    MODULO_EQ       reduce using rule 68 (BasicLit -> NIL .)
    AMP_EQ          reduce using rule 68 (BasicLit -> NIL .)
    OR_EQ           reduce using rule 68 (BasicLit -> NIL .)
    CARET_EQ        reduce using rule 68 (BasicLit -> NIL .)
    EQ              reduce using rule 68 (BasicLit -> NIL .)
    RROUND          reduce using rule 68 (BasicLit -> NIL .)
    ELSE            reduce using rule 68 (BasicLit -> NIL .)
    LCURLY          reduce using rule 68 (BasicLit -> NIL .)
    RCURLY          reduce using rule 68 (BasicLit -> NIL .)


state 101

    (70) CompositeLit -> LiteralType . LiteralValue
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 65

    LiteralValue                   shift and go to state 176
    lcurly                         shift and go to state 177

state 102

    (71) LiteralType -> StructType .

    LCURLY          reduce using rule 71 (LiteralType -> StructType .)


state 103

    (72) LiteralType -> ArrayType .

    LCURLY          reduce using rule 72 (LiteralType -> ArrayType .)


state 104

    (33) IdentifierList -> IdentifierList COMMA ID .

    EQ              reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    COMMA           reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    ID              reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    DATA_TYPE       reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    LSQUARE         reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    STRUCT          reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    STAR            reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)
    ASSIGN          reduce using rule 33 (IdentifierList -> IdentifierList COMMA ID .)


state 105

    (37) TypeDecl -> TYPE ID Type SEMICOLON .

    FUNC            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    CONST           reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    TYPE            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    VAR             reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    $end            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    RCURLY          reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    SEMICOLON       reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    RETURN          reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    BREAK           reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    CONTINUE        reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    GOTO            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    IF              reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    ID              reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    LCURLY          reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    FOR             reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    PLUS            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    MINUS           reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    NOT             reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    CARET           reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    STAR            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    AMP             reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    LROUND          reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    MAKE            reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    INT_LIT         reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    FLOAT_LIT       reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    STRING_LIT      reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    BOOL_LIT        reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    CHAR_LIT        reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    NIL             reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    STRUCT          reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)
    LSQUARE         reduce using rule 37 (TypeDecl -> TYPE ID Type SEMICOLON .)


state 106

    (11) ArrayType -> LSQUARE ArrayLength . RSQUARE ElementType

    RSQUARE         shift and go to state 178


state 107

    (13) SliceType -> LSQUARE RSQUARE . ElementType
    (14) ElementType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    ElementType                    shift and go to state 179
    Type                           shift and go to state 180
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 108

    (12) ArrayLength -> Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    RSQUARE         reduce using rule 12 (ArrayLength -> Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 109

    (17) StructType -> STRUCT lcurly . FieldDeclList rcurly
    (18) FieldDeclList -> . FieldDeclList FieldDecl SEMICOLON
    (19) FieldDeclList -> . FieldDecl SEMICOLON
    (20) FieldDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 32

    FieldDeclList                  shift and go to state 181
    FieldDecl                      shift and go to state 182
    IdentifierList                 shift and go to state 183

state 110

    (15) PointerType -> STAR BaseType .

    SEMICOLON       reduce using rule 15 (PointerType -> STAR BaseType .)
    EQ              reduce using rule 15 (PointerType -> STAR BaseType .)
    LCURLY          reduce using rule 15 (PointerType -> STAR BaseType .)
    FUNC            reduce using rule 15 (PointerType -> STAR BaseType .)
    CONST           reduce using rule 15 (PointerType -> STAR BaseType .)
    TYPE            reduce using rule 15 (PointerType -> STAR BaseType .)
    VAR             reduce using rule 15 (PointerType -> STAR BaseType .)
    $end            reduce using rule 15 (PointerType -> STAR BaseType .)
    RROUND          reduce using rule 15 (PointerType -> STAR BaseType .)
    COMMA           reduce using rule 15 (PointerType -> STAR BaseType .)


state 111

    (16) BaseType -> Type .

    SEMICOLON       reduce using rule 16 (BaseType -> Type .)
    EQ              reduce using rule 16 (BaseType -> Type .)
    LCURLY          reduce using rule 16 (BaseType -> Type .)
    FUNC            reduce using rule 16 (BaseType -> Type .)
    CONST           reduce using rule 16 (BaseType -> Type .)
    TYPE            reduce using rule 16 (BaseType -> Type .)
    VAR             reduce using rule 16 (BaseType -> Type .)
    $end            reduce using rule 16 (BaseType -> Type .)
    RROUND          reduce using rule 16 (BaseType -> Type .)
    COMMA           reduce using rule 16 (BaseType -> Type .)


state 112

    (40) VarSpec -> IdentifierList Type EQ . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 184
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 113

    (21) Block -> lcurly StatementList . rcurly
    (23) StatementList -> StatementList . Statement
    (2) rcurly -> . RCURLY
    (135) Statement -> . Declaration
    (136) Statement -> . LabeledStmt
    (137) Statement -> . ReturnStmt
    (138) Statement -> . BreakStmt
    (139) Statement -> . ContinueStmt
    (140) Statement -> . GotoStmt
    (141) Statement -> . Block
    (142) Statement -> . IfStmt
    (143) Statement -> . ForStmt
    (144) Statement -> . SimpleStmt SEMICOLON
    (145) Statement -> . SEMICOLON
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (151) LabeledStmt -> . Label COLON Statement
    (180) ReturnStmt -> . RETURN SEMICOLON
    (181) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (182) BreakStmt -> . BREAK SEMICOLON
    (183) BreakStmt -> . BREAK Label SEMICOLON
    (184) ContinueStmt -> . CONTINUE SEMICOLON
    (185) ContinueStmt -> . CONTINUE Label SEMICOLON
    (186) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (187) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (188) IfStmt -> . IF Expression Block
    (189) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (190) IfStmt -> . IF Expression ElseStmt
    (165) ForStmt -> . ForLoop Block
    (166) ForStmt -> . WhileLoop Block
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON
    (152) Label -> . ID
    (1) lcurly -> . LCURLY
    (167) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (171) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (172) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (173) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (174) ForLoop -> . FOR SEMICOLON SEMICOLON
    (175) WhileLoop -> . FOR Condition Block
    (176) WhileLoop -> . FOR Block
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 116
    SEMICOLON       shift and go to state 127
    RETURN          shift and go to state 129
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 132
    GOTO            shift and go to state 133
    IF              shift and go to state 134
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 142
    LCURLY          shift and go to state 65
    FOR             shift and go to state 143
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    lcurly                         shift and go to state 64
    rcurly                         shift and go to state 185
    Statement                      shift and go to state 186
    Declaration                    shift and go to state 117
    LabeledStmt                    shift and go to state 118
    ReturnStmt                     shift and go to state 119
    BreakStmt                      shift and go to state 120
    ContinueStmt                   shift and go to state 121
    GotoStmt                       shift and go to state 122
    Block                          shift and go to state 123
    IfStmt                         shift and go to state 124
    ForStmt                        shift and go to state 125
    SimpleStmt                     shift and go to state 126
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    Label                          shift and go to state 128
    ExpressionList                 shift and go to state 130
    Expression                     shift and go to state 135
    ForLoop                        shift and go to state 136
    WhileLoop                      shift and go to state 137
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 114

    (22) Block -> lcurly rcurly .

    FUNC            reduce using rule 22 (Block -> lcurly rcurly .)
    CONST           reduce using rule 22 (Block -> lcurly rcurly .)
    TYPE            reduce using rule 22 (Block -> lcurly rcurly .)
    VAR             reduce using rule 22 (Block -> lcurly rcurly .)
    $end            reduce using rule 22 (Block -> lcurly rcurly .)
    RCURLY          reduce using rule 22 (Block -> lcurly rcurly .)
    SEMICOLON       reduce using rule 22 (Block -> lcurly rcurly .)
    RETURN          reduce using rule 22 (Block -> lcurly rcurly .)
    BREAK           reduce using rule 22 (Block -> lcurly rcurly .)
    CONTINUE        reduce using rule 22 (Block -> lcurly rcurly .)
    GOTO            reduce using rule 22 (Block -> lcurly rcurly .)
    IF              reduce using rule 22 (Block -> lcurly rcurly .)
    ID              reduce using rule 22 (Block -> lcurly rcurly .)
    LCURLY          reduce using rule 22 (Block -> lcurly rcurly .)
    FOR             reduce using rule 22 (Block -> lcurly rcurly .)
    PLUS            reduce using rule 22 (Block -> lcurly rcurly .)
    MINUS           reduce using rule 22 (Block -> lcurly rcurly .)
    NOT             reduce using rule 22 (Block -> lcurly rcurly .)
    CARET           reduce using rule 22 (Block -> lcurly rcurly .)
    STAR            reduce using rule 22 (Block -> lcurly rcurly .)
    AMP             reduce using rule 22 (Block -> lcurly rcurly .)
    LROUND          reduce using rule 22 (Block -> lcurly rcurly .)
    MAKE            reduce using rule 22 (Block -> lcurly rcurly .)
    INT_LIT         reduce using rule 22 (Block -> lcurly rcurly .)
    FLOAT_LIT       reduce using rule 22 (Block -> lcurly rcurly .)
    STRING_LIT      reduce using rule 22 (Block -> lcurly rcurly .)
    BOOL_LIT        reduce using rule 22 (Block -> lcurly rcurly .)
    CHAR_LIT        reduce using rule 22 (Block -> lcurly rcurly .)
    NIL             reduce using rule 22 (Block -> lcurly rcurly .)
    STRUCT          reduce using rule 22 (Block -> lcurly rcurly .)
    LSQUARE         reduce using rule 22 (Block -> lcurly rcurly .)


state 115

    (24) StatementList -> Statement .

    RCURLY          reduce using rule 24 (StatementList -> Statement .)
    SEMICOLON       reduce using rule 24 (StatementList -> Statement .)
    RETURN          reduce using rule 24 (StatementList -> Statement .)
    BREAK           reduce using rule 24 (StatementList -> Statement .)
    CONTINUE        reduce using rule 24 (StatementList -> Statement .)
    GOTO            reduce using rule 24 (StatementList -> Statement .)
    IF              reduce using rule 24 (StatementList -> Statement .)
    CONST           reduce using rule 24 (StatementList -> Statement .)
    TYPE            reduce using rule 24 (StatementList -> Statement .)
    VAR             reduce using rule 24 (StatementList -> Statement .)
    ID              reduce using rule 24 (StatementList -> Statement .)
    LCURLY          reduce using rule 24 (StatementList -> Statement .)
    FOR             reduce using rule 24 (StatementList -> Statement .)
    PLUS            reduce using rule 24 (StatementList -> Statement .)
    MINUS           reduce using rule 24 (StatementList -> Statement .)
    NOT             reduce using rule 24 (StatementList -> Statement .)
    CARET           reduce using rule 24 (StatementList -> Statement .)
    STAR            reduce using rule 24 (StatementList -> Statement .)
    AMP             reduce using rule 24 (StatementList -> Statement .)
    LROUND          reduce using rule 24 (StatementList -> Statement .)
    MAKE            reduce using rule 24 (StatementList -> Statement .)
    INT_LIT         reduce using rule 24 (StatementList -> Statement .)
    FLOAT_LIT       reduce using rule 24 (StatementList -> Statement .)
    STRING_LIT      reduce using rule 24 (StatementList -> Statement .)
    BOOL_LIT        reduce using rule 24 (StatementList -> Statement .)
    CHAR_LIT        reduce using rule 24 (StatementList -> Statement .)
    NIL             reduce using rule 24 (StatementList -> Statement .)
    STRUCT          reduce using rule 24 (StatementList -> Statement .)
    LSQUARE         reduce using rule 24 (StatementList -> Statement .)


state 116

    (2) rcurly -> RCURLY .

    FUNC            reduce using rule 2 (rcurly -> RCURLY .)
    CONST           reduce using rule 2 (rcurly -> RCURLY .)
    TYPE            reduce using rule 2 (rcurly -> RCURLY .)
    VAR             reduce using rule 2 (rcurly -> RCURLY .)
    $end            reduce using rule 2 (rcurly -> RCURLY .)
    RCURLY          reduce using rule 2 (rcurly -> RCURLY .)
    SEMICOLON       reduce using rule 2 (rcurly -> RCURLY .)
    RETURN          reduce using rule 2 (rcurly -> RCURLY .)
    BREAK           reduce using rule 2 (rcurly -> RCURLY .)
    CONTINUE        reduce using rule 2 (rcurly -> RCURLY .)
    GOTO            reduce using rule 2 (rcurly -> RCURLY .)
    IF              reduce using rule 2 (rcurly -> RCURLY .)
    ID              reduce using rule 2 (rcurly -> RCURLY .)
    LCURLY          reduce using rule 2 (rcurly -> RCURLY .)
    FOR             reduce using rule 2 (rcurly -> RCURLY .)
    PLUS            reduce using rule 2 (rcurly -> RCURLY .)
    MINUS           reduce using rule 2 (rcurly -> RCURLY .)
    NOT             reduce using rule 2 (rcurly -> RCURLY .)
    CARET           reduce using rule 2 (rcurly -> RCURLY .)
    STAR            reduce using rule 2 (rcurly -> RCURLY .)
    AMP             reduce using rule 2 (rcurly -> RCURLY .)
    LROUND          reduce using rule 2 (rcurly -> RCURLY .)
    MAKE            reduce using rule 2 (rcurly -> RCURLY .)
    INT_LIT         reduce using rule 2 (rcurly -> RCURLY .)
    FLOAT_LIT       reduce using rule 2 (rcurly -> RCURLY .)
    STRING_LIT      reduce using rule 2 (rcurly -> RCURLY .)
    BOOL_LIT        reduce using rule 2 (rcurly -> RCURLY .)
    CHAR_LIT        reduce using rule 2 (rcurly -> RCURLY .)
    NIL             reduce using rule 2 (rcurly -> RCURLY .)
    STRUCT          reduce using rule 2 (rcurly -> RCURLY .)
    LSQUARE         reduce using rule 2 (rcurly -> RCURLY .)
    DOT             reduce using rule 2 (rcurly -> RCURLY .)
    OR_OR           reduce using rule 2 (rcurly -> RCURLY .)
    AMP_AMP         reduce using rule 2 (rcurly -> RCURLY .)
    EQ_EQ           reduce using rule 2 (rcurly -> RCURLY .)
    NOT_EQ          reduce using rule 2 (rcurly -> RCURLY .)
    LT              reduce using rule 2 (rcurly -> RCURLY .)
    LE              reduce using rule 2 (rcurly -> RCURLY .)
    GT              reduce using rule 2 (rcurly -> RCURLY .)
    GE              reduce using rule 2 (rcurly -> RCURLY .)
    OR              reduce using rule 2 (rcurly -> RCURLY .)
    DIVIDE          reduce using rule 2 (rcurly -> RCURLY .)
    MODULO          reduce using rule 2 (rcurly -> RCURLY .)
    LSHIFT          reduce using rule 2 (rcurly -> RCURLY .)
    RSHIFT          reduce using rule 2 (rcurly -> RCURLY .)
    COMMA           reduce using rule 2 (rcurly -> RCURLY .)
    RSQUARE         reduce using rule 2 (rcurly -> RCURLY .)
    PLUS_PLUS       reduce using rule 2 (rcurly -> RCURLY .)
    MINUS_MINUS     reduce using rule 2 (rcurly -> RCURLY .)
    PLUS_EQ         reduce using rule 2 (rcurly -> RCURLY .)
    MINUS_EQ        reduce using rule 2 (rcurly -> RCURLY .)
    STAR_EQ         reduce using rule 2 (rcurly -> RCURLY .)
    DIVIDE_EQ       reduce using rule 2 (rcurly -> RCURLY .)
    MODULO_EQ       reduce using rule 2 (rcurly -> RCURLY .)
    AMP_EQ          reduce using rule 2 (rcurly -> RCURLY .)
    OR_EQ           reduce using rule 2 (rcurly -> RCURLY .)
    CARET_EQ        reduce using rule 2 (rcurly -> RCURLY .)
    EQ              reduce using rule 2 (rcurly -> RCURLY .)
    RROUND          reduce using rule 2 (rcurly -> RCURLY .)
    ELSE            reduce using rule 2 (rcurly -> RCURLY .)


state 117

    (135) Statement -> Declaration .

    RCURLY          reduce using rule 135 (Statement -> Declaration .)
    SEMICOLON       reduce using rule 135 (Statement -> Declaration .)
    RETURN          reduce using rule 135 (Statement -> Declaration .)
    BREAK           reduce using rule 135 (Statement -> Declaration .)
    CONTINUE        reduce using rule 135 (Statement -> Declaration .)
    GOTO            reduce using rule 135 (Statement -> Declaration .)
    IF              reduce using rule 135 (Statement -> Declaration .)
    CONST           reduce using rule 135 (Statement -> Declaration .)
    TYPE            reduce using rule 135 (Statement -> Declaration .)
    VAR             reduce using rule 135 (Statement -> Declaration .)
    ID              reduce using rule 135 (Statement -> Declaration .)
    LCURLY          reduce using rule 135 (Statement -> Declaration .)
    FOR             reduce using rule 135 (Statement -> Declaration .)
    PLUS            reduce using rule 135 (Statement -> Declaration .)
    MINUS           reduce using rule 135 (Statement -> Declaration .)
    NOT             reduce using rule 135 (Statement -> Declaration .)
    CARET           reduce using rule 135 (Statement -> Declaration .)
    STAR            reduce using rule 135 (Statement -> Declaration .)
    AMP             reduce using rule 135 (Statement -> Declaration .)
    LROUND          reduce using rule 135 (Statement -> Declaration .)
    MAKE            reduce using rule 135 (Statement -> Declaration .)
    INT_LIT         reduce using rule 135 (Statement -> Declaration .)
    FLOAT_LIT       reduce using rule 135 (Statement -> Declaration .)
    STRING_LIT      reduce using rule 135 (Statement -> Declaration .)
    BOOL_LIT        reduce using rule 135 (Statement -> Declaration .)
    CHAR_LIT        reduce using rule 135 (Statement -> Declaration .)
    NIL             reduce using rule 135 (Statement -> Declaration .)
    STRUCT          reduce using rule 135 (Statement -> Declaration .)
    LSQUARE         reduce using rule 135 (Statement -> Declaration .)


state 118

    (136) Statement -> LabeledStmt .

    RCURLY          reduce using rule 136 (Statement -> LabeledStmt .)
    SEMICOLON       reduce using rule 136 (Statement -> LabeledStmt .)
    RETURN          reduce using rule 136 (Statement -> LabeledStmt .)
    BREAK           reduce using rule 136 (Statement -> LabeledStmt .)
    CONTINUE        reduce using rule 136 (Statement -> LabeledStmt .)
    GOTO            reduce using rule 136 (Statement -> LabeledStmt .)
    IF              reduce using rule 136 (Statement -> LabeledStmt .)
    CONST           reduce using rule 136 (Statement -> LabeledStmt .)
    TYPE            reduce using rule 136 (Statement -> LabeledStmt .)
    VAR             reduce using rule 136 (Statement -> LabeledStmt .)
    ID              reduce using rule 136 (Statement -> LabeledStmt .)
    LCURLY          reduce using rule 136 (Statement -> LabeledStmt .)
    FOR             reduce using rule 136 (Statement -> LabeledStmt .)
    PLUS            reduce using rule 136 (Statement -> LabeledStmt .)
    MINUS           reduce using rule 136 (Statement -> LabeledStmt .)
    NOT             reduce using rule 136 (Statement -> LabeledStmt .)
    CARET           reduce using rule 136 (Statement -> LabeledStmt .)
    STAR            reduce using rule 136 (Statement -> LabeledStmt .)
    AMP             reduce using rule 136 (Statement -> LabeledStmt .)
    LROUND          reduce using rule 136 (Statement -> LabeledStmt .)
    MAKE            reduce using rule 136 (Statement -> LabeledStmt .)
    INT_LIT         reduce using rule 136 (Statement -> LabeledStmt .)
    FLOAT_LIT       reduce using rule 136 (Statement -> LabeledStmt .)
    STRING_LIT      reduce using rule 136 (Statement -> LabeledStmt .)
    BOOL_LIT        reduce using rule 136 (Statement -> LabeledStmt .)
    CHAR_LIT        reduce using rule 136 (Statement -> LabeledStmt .)
    NIL             reduce using rule 136 (Statement -> LabeledStmt .)
    STRUCT          reduce using rule 136 (Statement -> LabeledStmt .)
    LSQUARE         reduce using rule 136 (Statement -> LabeledStmt .)


state 119

    (137) Statement -> ReturnStmt .

    RCURLY          reduce using rule 137 (Statement -> ReturnStmt .)
    SEMICOLON       reduce using rule 137 (Statement -> ReturnStmt .)
    RETURN          reduce using rule 137 (Statement -> ReturnStmt .)
    BREAK           reduce using rule 137 (Statement -> ReturnStmt .)
    CONTINUE        reduce using rule 137 (Statement -> ReturnStmt .)
    GOTO            reduce using rule 137 (Statement -> ReturnStmt .)
    IF              reduce using rule 137 (Statement -> ReturnStmt .)
    CONST           reduce using rule 137 (Statement -> ReturnStmt .)
    TYPE            reduce using rule 137 (Statement -> ReturnStmt .)
    VAR             reduce using rule 137 (Statement -> ReturnStmt .)
    ID              reduce using rule 137 (Statement -> ReturnStmt .)
    LCURLY          reduce using rule 137 (Statement -> ReturnStmt .)
    FOR             reduce using rule 137 (Statement -> ReturnStmt .)
    PLUS            reduce using rule 137 (Statement -> ReturnStmt .)
    MINUS           reduce using rule 137 (Statement -> ReturnStmt .)
    NOT             reduce using rule 137 (Statement -> ReturnStmt .)
    CARET           reduce using rule 137 (Statement -> ReturnStmt .)
    STAR            reduce using rule 137 (Statement -> ReturnStmt .)
    AMP             reduce using rule 137 (Statement -> ReturnStmt .)
    LROUND          reduce using rule 137 (Statement -> ReturnStmt .)
    MAKE            reduce using rule 137 (Statement -> ReturnStmt .)
    INT_LIT         reduce using rule 137 (Statement -> ReturnStmt .)
    FLOAT_LIT       reduce using rule 137 (Statement -> ReturnStmt .)
    STRING_LIT      reduce using rule 137 (Statement -> ReturnStmt .)
    BOOL_LIT        reduce using rule 137 (Statement -> ReturnStmt .)
    CHAR_LIT        reduce using rule 137 (Statement -> ReturnStmt .)
    NIL             reduce using rule 137 (Statement -> ReturnStmt .)
    STRUCT          reduce using rule 137 (Statement -> ReturnStmt .)
    LSQUARE         reduce using rule 137 (Statement -> ReturnStmt .)


state 120

    (138) Statement -> BreakStmt .

    RCURLY          reduce using rule 138 (Statement -> BreakStmt .)
    SEMICOLON       reduce using rule 138 (Statement -> BreakStmt .)
    RETURN          reduce using rule 138 (Statement -> BreakStmt .)
    BREAK           reduce using rule 138 (Statement -> BreakStmt .)
    CONTINUE        reduce using rule 138 (Statement -> BreakStmt .)
    GOTO            reduce using rule 138 (Statement -> BreakStmt .)
    IF              reduce using rule 138 (Statement -> BreakStmt .)
    CONST           reduce using rule 138 (Statement -> BreakStmt .)
    TYPE            reduce using rule 138 (Statement -> BreakStmt .)
    VAR             reduce using rule 138 (Statement -> BreakStmt .)
    ID              reduce using rule 138 (Statement -> BreakStmt .)
    LCURLY          reduce using rule 138 (Statement -> BreakStmt .)
    FOR             reduce using rule 138 (Statement -> BreakStmt .)
    PLUS            reduce using rule 138 (Statement -> BreakStmt .)
    MINUS           reduce using rule 138 (Statement -> BreakStmt .)
    NOT             reduce using rule 138 (Statement -> BreakStmt .)
    CARET           reduce using rule 138 (Statement -> BreakStmt .)
    STAR            reduce using rule 138 (Statement -> BreakStmt .)
    AMP             reduce using rule 138 (Statement -> BreakStmt .)
    LROUND          reduce using rule 138 (Statement -> BreakStmt .)
    MAKE            reduce using rule 138 (Statement -> BreakStmt .)
    INT_LIT         reduce using rule 138 (Statement -> BreakStmt .)
    FLOAT_LIT       reduce using rule 138 (Statement -> BreakStmt .)
    STRING_LIT      reduce using rule 138 (Statement -> BreakStmt .)
    BOOL_LIT        reduce using rule 138 (Statement -> BreakStmt .)
    CHAR_LIT        reduce using rule 138 (Statement -> BreakStmt .)
    NIL             reduce using rule 138 (Statement -> BreakStmt .)
    STRUCT          reduce using rule 138 (Statement -> BreakStmt .)
    LSQUARE         reduce using rule 138 (Statement -> BreakStmt .)


state 121

    (139) Statement -> ContinueStmt .

    RCURLY          reduce using rule 139 (Statement -> ContinueStmt .)
    SEMICOLON       reduce using rule 139 (Statement -> ContinueStmt .)
    RETURN          reduce using rule 139 (Statement -> ContinueStmt .)
    BREAK           reduce using rule 139 (Statement -> ContinueStmt .)
    CONTINUE        reduce using rule 139 (Statement -> ContinueStmt .)
    GOTO            reduce using rule 139 (Statement -> ContinueStmt .)
    IF              reduce using rule 139 (Statement -> ContinueStmt .)
    CONST           reduce using rule 139 (Statement -> ContinueStmt .)
    TYPE            reduce using rule 139 (Statement -> ContinueStmt .)
    VAR             reduce using rule 139 (Statement -> ContinueStmt .)
    ID              reduce using rule 139 (Statement -> ContinueStmt .)
    LCURLY          reduce using rule 139 (Statement -> ContinueStmt .)
    FOR             reduce using rule 139 (Statement -> ContinueStmt .)
    PLUS            reduce using rule 139 (Statement -> ContinueStmt .)
    MINUS           reduce using rule 139 (Statement -> ContinueStmt .)
    NOT             reduce using rule 139 (Statement -> ContinueStmt .)
    CARET           reduce using rule 139 (Statement -> ContinueStmt .)
    STAR            reduce using rule 139 (Statement -> ContinueStmt .)
    AMP             reduce using rule 139 (Statement -> ContinueStmt .)
    LROUND          reduce using rule 139 (Statement -> ContinueStmt .)
    MAKE            reduce using rule 139 (Statement -> ContinueStmt .)
    INT_LIT         reduce using rule 139 (Statement -> ContinueStmt .)
    FLOAT_LIT       reduce using rule 139 (Statement -> ContinueStmt .)
    STRING_LIT      reduce using rule 139 (Statement -> ContinueStmt .)
    BOOL_LIT        reduce using rule 139 (Statement -> ContinueStmt .)
    CHAR_LIT        reduce using rule 139 (Statement -> ContinueStmt .)
    NIL             reduce using rule 139 (Statement -> ContinueStmt .)
    STRUCT          reduce using rule 139 (Statement -> ContinueStmt .)
    LSQUARE         reduce using rule 139 (Statement -> ContinueStmt .)


state 122

    (140) Statement -> GotoStmt .

    RCURLY          reduce using rule 140 (Statement -> GotoStmt .)
    SEMICOLON       reduce using rule 140 (Statement -> GotoStmt .)
    RETURN          reduce using rule 140 (Statement -> GotoStmt .)
    BREAK           reduce using rule 140 (Statement -> GotoStmt .)
    CONTINUE        reduce using rule 140 (Statement -> GotoStmt .)
    GOTO            reduce using rule 140 (Statement -> GotoStmt .)
    IF              reduce using rule 140 (Statement -> GotoStmt .)
    CONST           reduce using rule 140 (Statement -> GotoStmt .)
    TYPE            reduce using rule 140 (Statement -> GotoStmt .)
    VAR             reduce using rule 140 (Statement -> GotoStmt .)
    ID              reduce using rule 140 (Statement -> GotoStmt .)
    LCURLY          reduce using rule 140 (Statement -> GotoStmt .)
    FOR             reduce using rule 140 (Statement -> GotoStmt .)
    PLUS            reduce using rule 140 (Statement -> GotoStmt .)
    MINUS           reduce using rule 140 (Statement -> GotoStmt .)
    NOT             reduce using rule 140 (Statement -> GotoStmt .)
    CARET           reduce using rule 140 (Statement -> GotoStmt .)
    STAR            reduce using rule 140 (Statement -> GotoStmt .)
    AMP             reduce using rule 140 (Statement -> GotoStmt .)
    LROUND          reduce using rule 140 (Statement -> GotoStmt .)
    MAKE            reduce using rule 140 (Statement -> GotoStmt .)
    INT_LIT         reduce using rule 140 (Statement -> GotoStmt .)
    FLOAT_LIT       reduce using rule 140 (Statement -> GotoStmt .)
    STRING_LIT      reduce using rule 140 (Statement -> GotoStmt .)
    BOOL_LIT        reduce using rule 140 (Statement -> GotoStmt .)
    CHAR_LIT        reduce using rule 140 (Statement -> GotoStmt .)
    NIL             reduce using rule 140 (Statement -> GotoStmt .)
    STRUCT          reduce using rule 140 (Statement -> GotoStmt .)
    LSQUARE         reduce using rule 140 (Statement -> GotoStmt .)


state 123

    (141) Statement -> Block .

    RCURLY          reduce using rule 141 (Statement -> Block .)
    SEMICOLON       reduce using rule 141 (Statement -> Block .)
    RETURN          reduce using rule 141 (Statement -> Block .)
    BREAK           reduce using rule 141 (Statement -> Block .)
    CONTINUE        reduce using rule 141 (Statement -> Block .)
    GOTO            reduce using rule 141 (Statement -> Block .)
    IF              reduce using rule 141 (Statement -> Block .)
    CONST           reduce using rule 141 (Statement -> Block .)
    TYPE            reduce using rule 141 (Statement -> Block .)
    VAR             reduce using rule 141 (Statement -> Block .)
    ID              reduce using rule 141 (Statement -> Block .)
    LCURLY          reduce using rule 141 (Statement -> Block .)
    FOR             reduce using rule 141 (Statement -> Block .)
    PLUS            reduce using rule 141 (Statement -> Block .)
    MINUS           reduce using rule 141 (Statement -> Block .)
    NOT             reduce using rule 141 (Statement -> Block .)
    CARET           reduce using rule 141 (Statement -> Block .)
    STAR            reduce using rule 141 (Statement -> Block .)
    AMP             reduce using rule 141 (Statement -> Block .)
    LROUND          reduce using rule 141 (Statement -> Block .)
    MAKE            reduce using rule 141 (Statement -> Block .)
    INT_LIT         reduce using rule 141 (Statement -> Block .)
    FLOAT_LIT       reduce using rule 141 (Statement -> Block .)
    STRING_LIT      reduce using rule 141 (Statement -> Block .)
    BOOL_LIT        reduce using rule 141 (Statement -> Block .)
    CHAR_LIT        reduce using rule 141 (Statement -> Block .)
    NIL             reduce using rule 141 (Statement -> Block .)
    STRUCT          reduce using rule 141 (Statement -> Block .)
    LSQUARE         reduce using rule 141 (Statement -> Block .)


state 124

    (142) Statement -> IfStmt .

    RCURLY          reduce using rule 142 (Statement -> IfStmt .)
    SEMICOLON       reduce using rule 142 (Statement -> IfStmt .)
    RETURN          reduce using rule 142 (Statement -> IfStmt .)
    BREAK           reduce using rule 142 (Statement -> IfStmt .)
    CONTINUE        reduce using rule 142 (Statement -> IfStmt .)
    GOTO            reduce using rule 142 (Statement -> IfStmt .)
    IF              reduce using rule 142 (Statement -> IfStmt .)
    CONST           reduce using rule 142 (Statement -> IfStmt .)
    TYPE            reduce using rule 142 (Statement -> IfStmt .)
    VAR             reduce using rule 142 (Statement -> IfStmt .)
    ID              reduce using rule 142 (Statement -> IfStmt .)
    LCURLY          reduce using rule 142 (Statement -> IfStmt .)
    FOR             reduce using rule 142 (Statement -> IfStmt .)
    PLUS            reduce using rule 142 (Statement -> IfStmt .)
    MINUS           reduce using rule 142 (Statement -> IfStmt .)
    NOT             reduce using rule 142 (Statement -> IfStmt .)
    CARET           reduce using rule 142 (Statement -> IfStmt .)
    STAR            reduce using rule 142 (Statement -> IfStmt .)
    AMP             reduce using rule 142 (Statement -> IfStmt .)
    LROUND          reduce using rule 142 (Statement -> IfStmt .)
    MAKE            reduce using rule 142 (Statement -> IfStmt .)
    INT_LIT         reduce using rule 142 (Statement -> IfStmt .)
    FLOAT_LIT       reduce using rule 142 (Statement -> IfStmt .)
    STRING_LIT      reduce using rule 142 (Statement -> IfStmt .)
    BOOL_LIT        reduce using rule 142 (Statement -> IfStmt .)
    CHAR_LIT        reduce using rule 142 (Statement -> IfStmt .)
    NIL             reduce using rule 142 (Statement -> IfStmt .)
    STRUCT          reduce using rule 142 (Statement -> IfStmt .)
    LSQUARE         reduce using rule 142 (Statement -> IfStmt .)


state 125

    (143) Statement -> ForStmt .

    RCURLY          reduce using rule 143 (Statement -> ForStmt .)
    SEMICOLON       reduce using rule 143 (Statement -> ForStmt .)
    RETURN          reduce using rule 143 (Statement -> ForStmt .)
    BREAK           reduce using rule 143 (Statement -> ForStmt .)
    CONTINUE        reduce using rule 143 (Statement -> ForStmt .)
    GOTO            reduce using rule 143 (Statement -> ForStmt .)
    IF              reduce using rule 143 (Statement -> ForStmt .)
    CONST           reduce using rule 143 (Statement -> ForStmt .)
    TYPE            reduce using rule 143 (Statement -> ForStmt .)
    VAR             reduce using rule 143 (Statement -> ForStmt .)
    ID              reduce using rule 143 (Statement -> ForStmt .)
    LCURLY          reduce using rule 143 (Statement -> ForStmt .)
    FOR             reduce using rule 143 (Statement -> ForStmt .)
    PLUS            reduce using rule 143 (Statement -> ForStmt .)
    MINUS           reduce using rule 143 (Statement -> ForStmt .)
    NOT             reduce using rule 143 (Statement -> ForStmt .)
    CARET           reduce using rule 143 (Statement -> ForStmt .)
    STAR            reduce using rule 143 (Statement -> ForStmt .)
    AMP             reduce using rule 143 (Statement -> ForStmt .)
    LROUND          reduce using rule 143 (Statement -> ForStmt .)
    MAKE            reduce using rule 143 (Statement -> ForStmt .)
    INT_LIT         reduce using rule 143 (Statement -> ForStmt .)
    FLOAT_LIT       reduce using rule 143 (Statement -> ForStmt .)
    STRING_LIT      reduce using rule 143 (Statement -> ForStmt .)
    BOOL_LIT        reduce using rule 143 (Statement -> ForStmt .)
    CHAR_LIT        reduce using rule 143 (Statement -> ForStmt .)
    NIL             reduce using rule 143 (Statement -> ForStmt .)
    STRUCT          reduce using rule 143 (Statement -> ForStmt .)
    LSQUARE         reduce using rule 143 (Statement -> ForStmt .)


state 126

    (144) Statement -> SimpleStmt . SEMICOLON

    SEMICOLON       shift and go to state 187


state 127

    (145) Statement -> SEMICOLON .

    RCURLY          reduce using rule 145 (Statement -> SEMICOLON .)
    SEMICOLON       reduce using rule 145 (Statement -> SEMICOLON .)
    RETURN          reduce using rule 145 (Statement -> SEMICOLON .)
    BREAK           reduce using rule 145 (Statement -> SEMICOLON .)
    CONTINUE        reduce using rule 145 (Statement -> SEMICOLON .)
    GOTO            reduce using rule 145 (Statement -> SEMICOLON .)
    IF              reduce using rule 145 (Statement -> SEMICOLON .)
    CONST           reduce using rule 145 (Statement -> SEMICOLON .)
    TYPE            reduce using rule 145 (Statement -> SEMICOLON .)
    VAR             reduce using rule 145 (Statement -> SEMICOLON .)
    ID              reduce using rule 145 (Statement -> SEMICOLON .)
    LCURLY          reduce using rule 145 (Statement -> SEMICOLON .)
    FOR             reduce using rule 145 (Statement -> SEMICOLON .)
    PLUS            reduce using rule 145 (Statement -> SEMICOLON .)
    MINUS           reduce using rule 145 (Statement -> SEMICOLON .)
    NOT             reduce using rule 145 (Statement -> SEMICOLON .)
    CARET           reduce using rule 145 (Statement -> SEMICOLON .)
    STAR            reduce using rule 145 (Statement -> SEMICOLON .)
    AMP             reduce using rule 145 (Statement -> SEMICOLON .)
    LROUND          reduce using rule 145 (Statement -> SEMICOLON .)
    MAKE            reduce using rule 145 (Statement -> SEMICOLON .)
    INT_LIT         reduce using rule 145 (Statement -> SEMICOLON .)
    FLOAT_LIT       reduce using rule 145 (Statement -> SEMICOLON .)
    STRING_LIT      reduce using rule 145 (Statement -> SEMICOLON .)
    BOOL_LIT        reduce using rule 145 (Statement -> SEMICOLON .)
    CHAR_LIT        reduce using rule 145 (Statement -> SEMICOLON .)
    NIL             reduce using rule 145 (Statement -> SEMICOLON .)
    STRUCT          reduce using rule 145 (Statement -> SEMICOLON .)
    LSQUARE         reduce using rule 145 (Statement -> SEMICOLON .)


state 128

    (151) LabeledStmt -> Label . COLON Statement

    COLON           shift and go to state 188


state 129

    (180) ReturnStmt -> RETURN . SEMICOLON
    (181) ReturnStmt -> RETURN . ExpressionList SEMICOLON
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 189
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 190
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 130

    (155) Assignment -> ExpressionList . assign_op ExpressionList
    (35) ExpressionList -> ExpressionList . COMMA Expression
    (156) assign_op -> . PLUS_EQ
    (157) assign_op -> . MINUS_EQ
    (158) assign_op -> . STAR_EQ
    (159) assign_op -> . DIVIDE_EQ
    (160) assign_op -> . MODULO_EQ
    (161) assign_op -> . AMP_EQ
    (162) assign_op -> . OR_EQ
    (163) assign_op -> . CARET_EQ
    (164) assign_op -> . EQ

    COMMA           shift and go to state 148
    PLUS_EQ         shift and go to state 192
    MINUS_EQ        shift and go to state 193
    STAR_EQ         shift and go to state 194
    DIVIDE_EQ       shift and go to state 195
    MODULO_EQ       shift and go to state 196
    AMP_EQ          shift and go to state 197
    OR_EQ           shift and go to state 198
    CARET_EQ        shift and go to state 199
    EQ              shift and go to state 200

    assign_op                      shift and go to state 191

state 131

    (182) BreakStmt -> BREAK . SEMICOLON
    (183) BreakStmt -> BREAK . Label SEMICOLON
    (152) Label -> . ID

    SEMICOLON       shift and go to state 201
    ID              shift and go to state 203

    Label                          shift and go to state 202

state 132

    (184) ContinueStmt -> CONTINUE . SEMICOLON
    (185) ContinueStmt -> CONTINUE . Label SEMICOLON
    (152) Label -> . ID

    SEMICOLON       shift and go to state 204
    ID              shift and go to state 203

    Label                          shift and go to state 205

state 133

    (186) GotoStmt -> GOTO . Label SEMICOLON
    (152) Label -> . ID

    ID              shift and go to state 203

    Label                          shift and go to state 206

state 134

    (187) IfStmt -> IF . SimpleStmt SEMICOLON Expression Block
    (188) IfStmt -> IF . Expression Block
    (189) IfStmt -> IF . SimpleStmt SEMICOLON Expression ElseStmt
    (190) IfStmt -> IF . Expression ElseStmt
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    SimpleStmt                     shift and go to state 207
    Expression                     shift and go to state 208
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    UnaryExpr                      shift and go to state 76
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 135

    (150) ExpressionStmt -> Expression .
    (153) IncDecStmt -> Expression . PLUS_PLUS
    (154) IncDecStmt -> Expression . MINUS_MINUS
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression
    (36) ExpressionList -> Expression .

    SEMICOLON       reduce using rule 150 (ExpressionStmt -> Expression .)
    LCURLY          reduce using rule 150 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 210
    MINUS_MINUS     shift and go to state 211
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)


state 136

    (165) ForStmt -> ForLoop . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 65

    Block                          shift and go to state 212
    lcurly                         shift and go to state 64

state 137

    (166) ForStmt -> WhileLoop . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 65

    Block                          shift and go to state 213
    lcurly                         shift and go to state 64

state 138

    (146) SimpleStmt -> ExpressionStmt .

    SEMICOLON       reduce using rule 146 (SimpleStmt -> ExpressionStmt .)
    LCURLY          reduce using rule 146 (SimpleStmt -> ExpressionStmt .)


state 139

    (147) SimpleStmt -> IncDecStmt .

    SEMICOLON       reduce using rule 147 (SimpleStmt -> IncDecStmt .)
    LCURLY          reduce using rule 147 (SimpleStmt -> IncDecStmt .)


state 140

    (148) SimpleStmt -> Assignment .

    SEMICOLON       reduce using rule 148 (SimpleStmt -> Assignment .)
    LCURLY          reduce using rule 148 (SimpleStmt -> Assignment .)


state 141

    (149) SimpleStmt -> ShortVarDecl .

    SEMICOLON       reduce using rule 149 (SimpleStmt -> ShortVarDecl .)
    LCURLY          reduce using rule 149 (SimpleStmt -> ShortVarDecl .)


state 142

    (152) Label -> ID .
    (34) IdentifierList -> ID .
    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (IdentifierList -> ID .)
    COLON           reduce using rule 152 (Label -> ID .)
    ASSIGN          reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 74 (LiteralType -> ID .)

  ! COMMA           [ reduce using rule 69 (OperandName -> ID .) ]


state 143

    (167) ForLoop -> FOR . InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> FOR . InitStmt SEMICOLON Condition SEMICOLON
    (169) ForLoop -> FOR . InitStmt SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> FOR . InitStmt SEMICOLON SEMICOLON
    (171) ForLoop -> FOR . SEMICOLON Condition SEMICOLON PostStmt
    (172) ForLoop -> FOR . SEMICOLON Condition SEMICOLON
    (173) ForLoop -> FOR . SEMICOLON SEMICOLON PostStmt
    (174) ForLoop -> FOR . SEMICOLON SEMICOLON
    (175) WhileLoop -> FOR . Condition Block
    (176) WhileLoop -> FOR . Block
    (177) InitStmt -> . SimpleStmt
    (179) Condition -> . Expression
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (1) lcurly -> . LCURLY
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 215
    LCURLY          shift and go to state 65
    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    InitStmt                       shift and go to state 214
    Condition                      shift and go to state 216
    Block                          shift and go to state 217
    SimpleStmt                     shift and go to state 218
    Expression                     shift and go to state 219
    lcurly                         shift and go to state 64
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    UnaryExpr                      shift and go to state 76
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 144

    (41) ShortVarDecl -> IdentifierList . ASSIGN ExpressionList SEMICOLON
    (33) IdentifierList -> IdentifierList . COMMA ID

    ASSIGN          shift and go to state 220
    COMMA           shift and go to state 46


state 145

    (47) Parameters -> LROUND ParameterList RROUND .

    ID              reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    DATA_TYPE       reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    LSQUARE         reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    STRUCT          reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    STAR            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    SEMICOLON       reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    LCURLY          reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    FUNC            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    CONST           reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    TYPE            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    VAR             reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)
    $end            reduce using rule 47 (Parameters -> LROUND ParameterList RROUND .)


state 146

    (49) ParameterList -> ParameterList COMMA . ParameterDecl
    (51) ParameterDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    ID              shift and go to state 32

    ParameterDecl                  shift and go to state 221
    IdentifierList                 shift and go to state 43

state 147

    (55) MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .

    FUNC            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    CONST           reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    TYPE            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    VAR             reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)
    $end            reduce using rule 55 (MethodDecl -> FUNC Receiver MethodName Signature FunctionBody .)


state 148

    (35) ExpressionList -> ExpressionList COMMA . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 222
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 149

    (93) Expression -> Expression OR_OR . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 223
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 150

    (94) Expression -> Expression AMP_AMP . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 224
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 151

    (95) Expression -> Expression EQ_EQ . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 225
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 152

    (96) Expression -> Expression NOT_EQ . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 226
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 153

    (97) Expression -> Expression LT . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 227
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 154

    (98) Expression -> Expression LE . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 228
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 155

    (99) Expression -> Expression GT . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 229
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 156

    (100) Expression -> Expression GE . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 230
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 157

    (101) Expression -> Expression PLUS . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 231
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 158

    (102) Expression -> Expression MINUS . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 232
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 159

    (103) Expression -> Expression OR . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 233
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 160

    (104) Expression -> Expression CARET . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 234
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 161

    (105) Expression -> Expression STAR . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 235
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 162

    (106) Expression -> Expression DIVIDE . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 236
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 163

    (107) Expression -> Expression MODULO . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 237
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 164

    (108) Expression -> Expression LSHIFT . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 238
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 165

    (109) Expression -> Expression RSHIFT . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 239
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 166

    (110) Expression -> Expression AMP . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 240
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 167

    (82) PrimaryExpr -> PrimaryExpr Selector .

    DOT             reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LSQUARE         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LROUND          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_OR           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP_AMP         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ_EQ           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    NOT_EQ          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LT              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LE              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    GT              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    GE              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    CARET           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MODULO          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LSHIFT          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RSHIFT          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP             reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    COMMA           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    SEMICOLON       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RSQUARE         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_PLUS       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_MINUS     reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    PLUS_EQ         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MINUS_EQ        reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    STAR_EQ         reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    DIVIDE_EQ       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    MODULO_EQ       reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    AMP_EQ          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    OR_EQ           reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    CARET_EQ        reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    EQ              reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RROUND          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    ELSE            reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    LCURLY          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)
    RCURLY          reduce using rule 82 (PrimaryExpr -> PrimaryExpr Selector .)


state 168

    (83) PrimaryExpr -> PrimaryExpr Index .

    DOT             reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LSQUARE         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LROUND          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR_OR           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP_AMP         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    EQ_EQ           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    NOT_EQ          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LT              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LE              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    GT              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    GE              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    CARET           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    STAR            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDE          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MODULO          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LSHIFT          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RSHIFT          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP             reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    COMMA           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    SEMICOLON       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RSQUARE         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS_PLUS       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS_MINUS     reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    PLUS_EQ         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MINUS_EQ        reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    STAR_EQ         reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    DIVIDE_EQ       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    MODULO_EQ       reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    AMP_EQ          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    OR_EQ           reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    CARET_EQ        reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    EQ              reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RROUND          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    ELSE            reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    LCURLY          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)
    RCURLY          reduce using rule 83 (PrimaryExpr -> PrimaryExpr Index .)


state 169

    (84) PrimaryExpr -> PrimaryExpr Arguments .

    DOT             reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSQUARE         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LROUND          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_OR           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP_AMP         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQ_EQ           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    NOT_EQ          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LT              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LE              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    GT              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    GE              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    CARET           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MODULO          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LSHIFT          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSHIFT          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP             reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    COMMA           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    SEMICOLON       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RSQUARE         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_PLUS       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_MINUS     reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    PLUS_EQ         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MINUS_EQ        reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    STAR_EQ         reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    DIVIDE_EQ       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    MODULO_EQ       reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    AMP_EQ          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    OR_EQ           reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    CARET_EQ        reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    EQ              reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RROUND          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    ELSE            reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    LCURLY          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)
    RCURLY          reduce using rule 84 (PrimaryExpr -> PrimaryExpr Arguments .)


state 170

    (88) Selector -> DOT . ID

    ID              shift and go to state 241


state 171

    (89) Index -> LSQUARE . Expression RSQUARE
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 242
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 172

    (90) Arguments -> LROUND . ExpressionList RROUND
    (91) Arguments -> LROUND . RROUND
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RROUND          shift and go to state 244
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 243
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 173

    (112) UnaryExpr -> unary_op UnaryExpr .

    OR_OR           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    AMP_AMP         reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    EQ_EQ           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    NOT_EQ          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    LT              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    LE              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    GT              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    GE              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS            reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    OR              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    CARET           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    STAR            reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    DIVIDE          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    MODULO          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    LSHIFT          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    RSHIFT          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    AMP             reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    COMMA           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    SEMICOLON       reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    RSQUARE         reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS_PLUS       reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS_MINUS     reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    PLUS_EQ         reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    MINUS_EQ        reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    STAR_EQ         reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    DIVIDE_EQ       reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    MODULO_EQ       reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    AMP_EQ          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    OR_EQ           reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    CARET_EQ        reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    EQ              reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    RROUND          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    ELSE            reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    LCURLY          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)
    RCURLY          reduce using rule 112 (UnaryExpr -> unary_op UnaryExpr .)


state 174

    (60) Operand -> LROUND Expression . RROUND
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    RROUND          shift and go to state 245
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 175

    (86) MakeExpr -> MAKE LROUND . SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> MAKE LROUND . SliceType COMMA Expression RROUND
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LSQUARE         shift and go to state 247

    SliceType                      shift and go to state 246

state 176

    (70) CompositeLit -> LiteralType LiteralValue .

    DOT             reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LSQUARE         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LROUND          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR_OR           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP_AMP         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    EQ_EQ           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    NOT_EQ          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LT              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LE              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    GT              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    GE              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    CARET           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    STAR            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    DIVIDE          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MODULO          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LSHIFT          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RSHIFT          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP             reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    COMMA           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    SEMICOLON       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RSQUARE         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS_PLUS       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS_MINUS     reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    PLUS_EQ         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MINUS_EQ        reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    STAR_EQ         reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    DIVIDE_EQ       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    MODULO_EQ       reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    AMP_EQ          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    OR_EQ           reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    CARET_EQ        reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    EQ              reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RROUND          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    ELSE            reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    LCURLY          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)
    RCURLY          reduce using rule 70 (CompositeLit -> LiteralType LiteralValue .)


state 177

    (75) LiteralValue -> lcurly . rcurly
    (76) LiteralValue -> lcurly . ElementList rcurly
    (2) rcurly -> . RCURLY
    (77) ElementList -> . Element
    (78) ElementList -> . ElementList COMMA Element
    (79) Element -> . Expression
    (80) Element -> . LiteralValue
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (1) lcurly -> . LCURLY
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    RCURLY          shift and go to state 116
    LCURLY          shift and go to state 65
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    lcurly                         shift and go to state 177
    rcurly                         shift and go to state 248
    ElementList                    shift and go to state 249
    Element                        shift and go to state 250
    Expression                     shift and go to state 251
    LiteralValue                   shift and go to state 252
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 178

    (11) ArrayType -> LSQUARE ArrayLength RSQUARE . ElementType
    (14) ElementType -> . Type
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    ElementType                    shift and go to state 253
    Type                           shift and go to state 180
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 179

    (13) SliceType -> LSQUARE RSQUARE ElementType .

    SEMICOLON       reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    EQ              reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    LCURLY          reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    FUNC            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    CONST           reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    TYPE            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    VAR             reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    $end            reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    RROUND          reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)
    COMMA           reduce using rule 13 (SliceType -> LSQUARE RSQUARE ElementType .)


state 180

    (14) ElementType -> Type .

    SEMICOLON       reduce using rule 14 (ElementType -> Type .)
    EQ              reduce using rule 14 (ElementType -> Type .)
    LCURLY          reduce using rule 14 (ElementType -> Type .)
    FUNC            reduce using rule 14 (ElementType -> Type .)
    CONST           reduce using rule 14 (ElementType -> Type .)
    TYPE            reduce using rule 14 (ElementType -> Type .)
    VAR             reduce using rule 14 (ElementType -> Type .)
    $end            reduce using rule 14 (ElementType -> Type .)
    RROUND          reduce using rule 14 (ElementType -> Type .)
    COMMA           reduce using rule 14 (ElementType -> Type .)


state 181

    (17) StructType -> STRUCT lcurly FieldDeclList . rcurly
    (18) FieldDeclList -> FieldDeclList . FieldDecl SEMICOLON
    (2) rcurly -> . RCURLY
    (20) FieldDecl -> . IdentifierList Type
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID

    RCURLY          shift and go to state 116
    ID              shift and go to state 32

    rcurly                         shift and go to state 254
    FieldDecl                      shift and go to state 255
    IdentifierList                 shift and go to state 183

state 182

    (19) FieldDeclList -> FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 256


state 183

    (20) FieldDecl -> IdentifierList . Type
    (33) IdentifierList -> IdentifierList . COMMA ID
    (3) Type -> . TypeName
    (4) Type -> . TypeLit
    (5) TypeName -> . ID
    (6) TypeName -> . DATA_TYPE
    (7) TypeLit -> . ArrayType
    (8) TypeLit -> . StructType
    (9) TypeLit -> . PointerType
    (10) TypeLit -> . SliceType
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (15) PointerType -> . STAR BaseType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    COMMA           shift and go to state 46
    ID              shift and go to state 47
    DATA_TYPE       shift and go to state 51
    LSQUARE         shift and go to state 56
    STRUCT          shift and go to state 57
    STAR            shift and go to state 58

    Type                           shift and go to state 257
    TypeName                       shift and go to state 49
    TypeLit                        shift and go to state 50
    ArrayType                      shift and go to state 52
    StructType                     shift and go to state 53
    PointerType                    shift and go to state 54
    SliceType                      shift and go to state 55

state 184

    (40) VarSpec -> IdentifierList Type EQ ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 40 (VarSpec -> IdentifierList Type EQ ExpressionList .)
    COMMA           shift and go to state 148


state 185

    (21) Block -> lcurly StatementList rcurly .

    FUNC            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    CONST           reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    TYPE            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    VAR             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    $end            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    RCURLY          reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    SEMICOLON       reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    RETURN          reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    BREAK           reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    CONTINUE        reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    GOTO            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    IF              reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    ID              reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    LCURLY          reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    FOR             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    PLUS            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    MINUS           reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    NOT             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    CARET           reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    STAR            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    AMP             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    LROUND          reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    MAKE            reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    INT_LIT         reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    FLOAT_LIT       reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    STRING_LIT      reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    BOOL_LIT        reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    CHAR_LIT        reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    NIL             reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    STRUCT          reduce using rule 21 (Block -> lcurly StatementList rcurly .)
    LSQUARE         reduce using rule 21 (Block -> lcurly StatementList rcurly .)


state 186

    (23) StatementList -> StatementList Statement .

    RCURLY          reduce using rule 23 (StatementList -> StatementList Statement .)
    SEMICOLON       reduce using rule 23 (StatementList -> StatementList Statement .)
    RETURN          reduce using rule 23 (StatementList -> StatementList Statement .)
    BREAK           reduce using rule 23 (StatementList -> StatementList Statement .)
    CONTINUE        reduce using rule 23 (StatementList -> StatementList Statement .)
    GOTO            reduce using rule 23 (StatementList -> StatementList Statement .)
    IF              reduce using rule 23 (StatementList -> StatementList Statement .)
    CONST           reduce using rule 23 (StatementList -> StatementList Statement .)
    TYPE            reduce using rule 23 (StatementList -> StatementList Statement .)
    VAR             reduce using rule 23 (StatementList -> StatementList Statement .)
    ID              reduce using rule 23 (StatementList -> StatementList Statement .)
    LCURLY          reduce using rule 23 (StatementList -> StatementList Statement .)
    FOR             reduce using rule 23 (StatementList -> StatementList Statement .)
    PLUS            reduce using rule 23 (StatementList -> StatementList Statement .)
    MINUS           reduce using rule 23 (StatementList -> StatementList Statement .)
    NOT             reduce using rule 23 (StatementList -> StatementList Statement .)
    CARET           reduce using rule 23 (StatementList -> StatementList Statement .)
    STAR            reduce using rule 23 (StatementList -> StatementList Statement .)
    AMP             reduce using rule 23 (StatementList -> StatementList Statement .)
    LROUND          reduce using rule 23 (StatementList -> StatementList Statement .)
    MAKE            reduce using rule 23 (StatementList -> StatementList Statement .)
    INT_LIT         reduce using rule 23 (StatementList -> StatementList Statement .)
    FLOAT_LIT       reduce using rule 23 (StatementList -> StatementList Statement .)
    STRING_LIT      reduce using rule 23 (StatementList -> StatementList Statement .)
    BOOL_LIT        reduce using rule 23 (StatementList -> StatementList Statement .)
    CHAR_LIT        reduce using rule 23 (StatementList -> StatementList Statement .)
    NIL             reduce using rule 23 (StatementList -> StatementList Statement .)
    STRUCT          reduce using rule 23 (StatementList -> StatementList Statement .)
    LSQUARE         reduce using rule 23 (StatementList -> StatementList Statement .)


state 187

    (144) Statement -> SimpleStmt SEMICOLON .

    RCURLY          reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    SEMICOLON       reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    RETURN          reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    BREAK           reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    CONTINUE        reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    GOTO            reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    IF              reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    CONST           reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    TYPE            reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    VAR             reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    ID              reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    LCURLY          reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    FOR             reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    PLUS            reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    MINUS           reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    NOT             reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    CARET           reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    STAR            reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    AMP             reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    LROUND          reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    MAKE            reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    INT_LIT         reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    FLOAT_LIT       reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    STRING_LIT      reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    BOOL_LIT        reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    CHAR_LIT        reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    NIL             reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    STRUCT          reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)
    LSQUARE         reduce using rule 144 (Statement -> SimpleStmt SEMICOLON .)


state 188

    (151) LabeledStmt -> Label COLON . Statement
    (135) Statement -> . Declaration
    (136) Statement -> . LabeledStmt
    (137) Statement -> . ReturnStmt
    (138) Statement -> . BreakStmt
    (139) Statement -> . ContinueStmt
    (140) Statement -> . GotoStmt
    (141) Statement -> . Block
    (142) Statement -> . IfStmt
    (143) Statement -> . ForStmt
    (144) Statement -> . SimpleStmt SEMICOLON
    (145) Statement -> . SEMICOLON
    (25) Declaration -> . ConstDecl
    (26) Declaration -> . TypeDecl
    (27) Declaration -> . VarDecl
    (151) LabeledStmt -> . Label COLON Statement
    (180) ReturnStmt -> . RETURN SEMICOLON
    (181) ReturnStmt -> . RETURN ExpressionList SEMICOLON
    (182) BreakStmt -> . BREAK SEMICOLON
    (183) BreakStmt -> . BREAK Label SEMICOLON
    (184) ContinueStmt -> . CONTINUE SEMICOLON
    (185) ContinueStmt -> . CONTINUE Label SEMICOLON
    (186) GotoStmt -> . GOTO Label SEMICOLON
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (187) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (188) IfStmt -> . IF Expression Block
    (189) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (190) IfStmt -> . IF Expression ElseStmt
    (165) ForStmt -> . ForLoop Block
    (166) ForStmt -> . WhileLoop Block
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (31) ConstDecl -> . CONST ConstSpec SEMICOLON
    (37) TypeDecl -> . TYPE ID Type SEMICOLON
    (38) VarDecl -> . VAR VarSpec SEMICOLON
    (152) Label -> . ID
    (1) lcurly -> . LCURLY
    (167) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> . FOR InitStmt SEMICOLON Condition SEMICOLON
    (169) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> . FOR InitStmt SEMICOLON SEMICOLON
    (171) ForLoop -> . FOR SEMICOLON Condition SEMICOLON PostStmt
    (172) ForLoop -> . FOR SEMICOLON Condition SEMICOLON
    (173) ForLoop -> . FOR SEMICOLON SEMICOLON PostStmt
    (174) ForLoop -> . FOR SEMICOLON SEMICOLON
    (175) WhileLoop -> . FOR Condition Block
    (176) WhileLoop -> . FOR Block
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 127
    RETURN          shift and go to state 129
    BREAK           shift and go to state 131
    CONTINUE        shift and go to state 132
    GOTO            shift and go to state 133
    IF              shift and go to state 134
    CONST           shift and go to state 16
    TYPE            shift and go to state 17
    VAR             shift and go to state 18
    ID              shift and go to state 142
    LCURLY          shift and go to state 65
    FOR             shift and go to state 143
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Label                          shift and go to state 128
    Statement                      shift and go to state 258
    Declaration                    shift and go to state 117
    LabeledStmt                    shift and go to state 118
    ReturnStmt                     shift and go to state 119
    BreakStmt                      shift and go to state 120
    ContinueStmt                   shift and go to state 121
    GotoStmt                       shift and go to state 122
    Block                          shift and go to state 123
    IfStmt                         shift and go to state 124
    ForStmt                        shift and go to state 125
    SimpleStmt                     shift and go to state 126
    ConstDecl                      shift and go to state 12
    TypeDecl                       shift and go to state 13
    VarDecl                        shift and go to state 14
    ExpressionList                 shift and go to state 130
    lcurly                         shift and go to state 64
    Expression                     shift and go to state 135
    ForLoop                        shift and go to state 136
    WhileLoop                      shift and go to state 137
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 189

    (180) ReturnStmt -> RETURN SEMICOLON .

    RCURLY          reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    SEMICOLON       reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    RETURN          reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    BREAK           reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    CONTINUE        reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    GOTO            reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    IF              reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    CONST           reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    TYPE            reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    VAR             reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    ID              reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    LCURLY          reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    FOR             reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    PLUS            reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    MINUS           reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    NOT             reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    CARET           reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    STAR            reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    AMP             reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    LROUND          reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    MAKE            reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    INT_LIT         reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    FLOAT_LIT       reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    STRING_LIT      reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    BOOL_LIT        reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    CHAR_LIT        reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    NIL             reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    STRUCT          reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)
    LSQUARE         reduce using rule 180 (ReturnStmt -> RETURN SEMICOLON .)


state 190

    (181) ReturnStmt -> RETURN ExpressionList . SEMICOLON
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       shift and go to state 259
    COMMA           shift and go to state 148


state 191

    (155) Assignment -> ExpressionList assign_op . ExpressionList
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 260
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 192

    (156) assign_op -> PLUS_EQ .

    PLUS            reduce using rule 156 (assign_op -> PLUS_EQ .)
    MINUS           reduce using rule 156 (assign_op -> PLUS_EQ .)
    NOT             reduce using rule 156 (assign_op -> PLUS_EQ .)
    CARET           reduce using rule 156 (assign_op -> PLUS_EQ .)
    STAR            reduce using rule 156 (assign_op -> PLUS_EQ .)
    AMP             reduce using rule 156 (assign_op -> PLUS_EQ .)
    LROUND          reduce using rule 156 (assign_op -> PLUS_EQ .)
    MAKE            reduce using rule 156 (assign_op -> PLUS_EQ .)
    ID              reduce using rule 156 (assign_op -> PLUS_EQ .)
    INT_LIT         reduce using rule 156 (assign_op -> PLUS_EQ .)
    FLOAT_LIT       reduce using rule 156 (assign_op -> PLUS_EQ .)
    STRING_LIT      reduce using rule 156 (assign_op -> PLUS_EQ .)
    BOOL_LIT        reduce using rule 156 (assign_op -> PLUS_EQ .)
    CHAR_LIT        reduce using rule 156 (assign_op -> PLUS_EQ .)
    NIL             reduce using rule 156 (assign_op -> PLUS_EQ .)
    STRUCT          reduce using rule 156 (assign_op -> PLUS_EQ .)
    LSQUARE         reduce using rule 156 (assign_op -> PLUS_EQ .)


state 193

    (157) assign_op -> MINUS_EQ .

    PLUS            reduce using rule 157 (assign_op -> MINUS_EQ .)
    MINUS           reduce using rule 157 (assign_op -> MINUS_EQ .)
    NOT             reduce using rule 157 (assign_op -> MINUS_EQ .)
    CARET           reduce using rule 157 (assign_op -> MINUS_EQ .)
    STAR            reduce using rule 157 (assign_op -> MINUS_EQ .)
    AMP             reduce using rule 157 (assign_op -> MINUS_EQ .)
    LROUND          reduce using rule 157 (assign_op -> MINUS_EQ .)
    MAKE            reduce using rule 157 (assign_op -> MINUS_EQ .)
    ID              reduce using rule 157 (assign_op -> MINUS_EQ .)
    INT_LIT         reduce using rule 157 (assign_op -> MINUS_EQ .)
    FLOAT_LIT       reduce using rule 157 (assign_op -> MINUS_EQ .)
    STRING_LIT      reduce using rule 157 (assign_op -> MINUS_EQ .)
    BOOL_LIT        reduce using rule 157 (assign_op -> MINUS_EQ .)
    CHAR_LIT        reduce using rule 157 (assign_op -> MINUS_EQ .)
    NIL             reduce using rule 157 (assign_op -> MINUS_EQ .)
    STRUCT          reduce using rule 157 (assign_op -> MINUS_EQ .)
    LSQUARE         reduce using rule 157 (assign_op -> MINUS_EQ .)


state 194

    (158) assign_op -> STAR_EQ .

    PLUS            reduce using rule 158 (assign_op -> STAR_EQ .)
    MINUS           reduce using rule 158 (assign_op -> STAR_EQ .)
    NOT             reduce using rule 158 (assign_op -> STAR_EQ .)
    CARET           reduce using rule 158 (assign_op -> STAR_EQ .)
    STAR            reduce using rule 158 (assign_op -> STAR_EQ .)
    AMP             reduce using rule 158 (assign_op -> STAR_EQ .)
    LROUND          reduce using rule 158 (assign_op -> STAR_EQ .)
    MAKE            reduce using rule 158 (assign_op -> STAR_EQ .)
    ID              reduce using rule 158 (assign_op -> STAR_EQ .)
    INT_LIT         reduce using rule 158 (assign_op -> STAR_EQ .)
    FLOAT_LIT       reduce using rule 158 (assign_op -> STAR_EQ .)
    STRING_LIT      reduce using rule 158 (assign_op -> STAR_EQ .)
    BOOL_LIT        reduce using rule 158 (assign_op -> STAR_EQ .)
    CHAR_LIT        reduce using rule 158 (assign_op -> STAR_EQ .)
    NIL             reduce using rule 158 (assign_op -> STAR_EQ .)
    STRUCT          reduce using rule 158 (assign_op -> STAR_EQ .)
    LSQUARE         reduce using rule 158 (assign_op -> STAR_EQ .)


state 195

    (159) assign_op -> DIVIDE_EQ .

    PLUS            reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    MINUS           reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    NOT             reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    CARET           reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    STAR            reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    AMP             reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    LROUND          reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    MAKE            reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    ID              reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    INT_LIT         reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    FLOAT_LIT       reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    STRING_LIT      reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    BOOL_LIT        reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    CHAR_LIT        reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    NIL             reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    STRUCT          reduce using rule 159 (assign_op -> DIVIDE_EQ .)
    LSQUARE         reduce using rule 159 (assign_op -> DIVIDE_EQ .)


state 196

    (160) assign_op -> MODULO_EQ .

    PLUS            reduce using rule 160 (assign_op -> MODULO_EQ .)
    MINUS           reduce using rule 160 (assign_op -> MODULO_EQ .)
    NOT             reduce using rule 160 (assign_op -> MODULO_EQ .)
    CARET           reduce using rule 160 (assign_op -> MODULO_EQ .)
    STAR            reduce using rule 160 (assign_op -> MODULO_EQ .)
    AMP             reduce using rule 160 (assign_op -> MODULO_EQ .)
    LROUND          reduce using rule 160 (assign_op -> MODULO_EQ .)
    MAKE            reduce using rule 160 (assign_op -> MODULO_EQ .)
    ID              reduce using rule 160 (assign_op -> MODULO_EQ .)
    INT_LIT         reduce using rule 160 (assign_op -> MODULO_EQ .)
    FLOAT_LIT       reduce using rule 160 (assign_op -> MODULO_EQ .)
    STRING_LIT      reduce using rule 160 (assign_op -> MODULO_EQ .)
    BOOL_LIT        reduce using rule 160 (assign_op -> MODULO_EQ .)
    CHAR_LIT        reduce using rule 160 (assign_op -> MODULO_EQ .)
    NIL             reduce using rule 160 (assign_op -> MODULO_EQ .)
    STRUCT          reduce using rule 160 (assign_op -> MODULO_EQ .)
    LSQUARE         reduce using rule 160 (assign_op -> MODULO_EQ .)


state 197

    (161) assign_op -> AMP_EQ .

    PLUS            reduce using rule 161 (assign_op -> AMP_EQ .)
    MINUS           reduce using rule 161 (assign_op -> AMP_EQ .)
    NOT             reduce using rule 161 (assign_op -> AMP_EQ .)
    CARET           reduce using rule 161 (assign_op -> AMP_EQ .)
    STAR            reduce using rule 161 (assign_op -> AMP_EQ .)
    AMP             reduce using rule 161 (assign_op -> AMP_EQ .)
    LROUND          reduce using rule 161 (assign_op -> AMP_EQ .)
    MAKE            reduce using rule 161 (assign_op -> AMP_EQ .)
    ID              reduce using rule 161 (assign_op -> AMP_EQ .)
    INT_LIT         reduce using rule 161 (assign_op -> AMP_EQ .)
    FLOAT_LIT       reduce using rule 161 (assign_op -> AMP_EQ .)
    STRING_LIT      reduce using rule 161 (assign_op -> AMP_EQ .)
    BOOL_LIT        reduce using rule 161 (assign_op -> AMP_EQ .)
    CHAR_LIT        reduce using rule 161 (assign_op -> AMP_EQ .)
    NIL             reduce using rule 161 (assign_op -> AMP_EQ .)
    STRUCT          reduce using rule 161 (assign_op -> AMP_EQ .)
    LSQUARE         reduce using rule 161 (assign_op -> AMP_EQ .)


state 198

    (162) assign_op -> OR_EQ .

    PLUS            reduce using rule 162 (assign_op -> OR_EQ .)
    MINUS           reduce using rule 162 (assign_op -> OR_EQ .)
    NOT             reduce using rule 162 (assign_op -> OR_EQ .)
    CARET           reduce using rule 162 (assign_op -> OR_EQ .)
    STAR            reduce using rule 162 (assign_op -> OR_EQ .)
    AMP             reduce using rule 162 (assign_op -> OR_EQ .)
    LROUND          reduce using rule 162 (assign_op -> OR_EQ .)
    MAKE            reduce using rule 162 (assign_op -> OR_EQ .)
    ID              reduce using rule 162 (assign_op -> OR_EQ .)
    INT_LIT         reduce using rule 162 (assign_op -> OR_EQ .)
    FLOAT_LIT       reduce using rule 162 (assign_op -> OR_EQ .)
    STRING_LIT      reduce using rule 162 (assign_op -> OR_EQ .)
    BOOL_LIT        reduce using rule 162 (assign_op -> OR_EQ .)
    CHAR_LIT        reduce using rule 162 (assign_op -> OR_EQ .)
    NIL             reduce using rule 162 (assign_op -> OR_EQ .)
    STRUCT          reduce using rule 162 (assign_op -> OR_EQ .)
    LSQUARE         reduce using rule 162 (assign_op -> OR_EQ .)


state 199

    (163) assign_op -> CARET_EQ .

    PLUS            reduce using rule 163 (assign_op -> CARET_EQ .)
    MINUS           reduce using rule 163 (assign_op -> CARET_EQ .)
    NOT             reduce using rule 163 (assign_op -> CARET_EQ .)
    CARET           reduce using rule 163 (assign_op -> CARET_EQ .)
    STAR            reduce using rule 163 (assign_op -> CARET_EQ .)
    AMP             reduce using rule 163 (assign_op -> CARET_EQ .)
    LROUND          reduce using rule 163 (assign_op -> CARET_EQ .)
    MAKE            reduce using rule 163 (assign_op -> CARET_EQ .)
    ID              reduce using rule 163 (assign_op -> CARET_EQ .)
    INT_LIT         reduce using rule 163 (assign_op -> CARET_EQ .)
    FLOAT_LIT       reduce using rule 163 (assign_op -> CARET_EQ .)
    STRING_LIT      reduce using rule 163 (assign_op -> CARET_EQ .)
    BOOL_LIT        reduce using rule 163 (assign_op -> CARET_EQ .)
    CHAR_LIT        reduce using rule 163 (assign_op -> CARET_EQ .)
    NIL             reduce using rule 163 (assign_op -> CARET_EQ .)
    STRUCT          reduce using rule 163 (assign_op -> CARET_EQ .)
    LSQUARE         reduce using rule 163 (assign_op -> CARET_EQ .)


state 200

    (164) assign_op -> EQ .

    PLUS            reduce using rule 164 (assign_op -> EQ .)
    MINUS           reduce using rule 164 (assign_op -> EQ .)
    NOT             reduce using rule 164 (assign_op -> EQ .)
    CARET           reduce using rule 164 (assign_op -> EQ .)
    STAR            reduce using rule 164 (assign_op -> EQ .)
    AMP             reduce using rule 164 (assign_op -> EQ .)
    LROUND          reduce using rule 164 (assign_op -> EQ .)
    MAKE            reduce using rule 164 (assign_op -> EQ .)
    ID              reduce using rule 164 (assign_op -> EQ .)
    INT_LIT         reduce using rule 164 (assign_op -> EQ .)
    FLOAT_LIT       reduce using rule 164 (assign_op -> EQ .)
    STRING_LIT      reduce using rule 164 (assign_op -> EQ .)
    BOOL_LIT        reduce using rule 164 (assign_op -> EQ .)
    CHAR_LIT        reduce using rule 164 (assign_op -> EQ .)
    NIL             reduce using rule 164 (assign_op -> EQ .)
    STRUCT          reduce using rule 164 (assign_op -> EQ .)
    LSQUARE         reduce using rule 164 (assign_op -> EQ .)


state 201

    (182) BreakStmt -> BREAK SEMICOLON .

    RCURLY          reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    SEMICOLON       reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    RETURN          reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    BREAK           reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    CONTINUE        reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    GOTO            reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    IF              reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    CONST           reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    TYPE            reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    VAR             reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    ID              reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    LCURLY          reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    FOR             reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    PLUS            reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    MINUS           reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    NOT             reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    CARET           reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    STAR            reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    AMP             reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    LROUND          reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    MAKE            reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    INT_LIT         reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    FLOAT_LIT       reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    STRING_LIT      reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    BOOL_LIT        reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    CHAR_LIT        reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    NIL             reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    STRUCT          reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)
    LSQUARE         reduce using rule 182 (BreakStmt -> BREAK SEMICOLON .)


state 202

    (183) BreakStmt -> BREAK Label . SEMICOLON

    SEMICOLON       shift and go to state 261


state 203

    (152) Label -> ID .

    SEMICOLON       reduce using rule 152 (Label -> ID .)


state 204

    (184) ContinueStmt -> CONTINUE SEMICOLON .

    RCURLY          reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    SEMICOLON       reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    RETURN          reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    BREAK           reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    CONTINUE        reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    GOTO            reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    IF              reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    CONST           reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    TYPE            reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    VAR             reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    ID              reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    LCURLY          reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    FOR             reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    PLUS            reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    MINUS           reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    NOT             reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    CARET           reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    STAR            reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    AMP             reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    LROUND          reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    MAKE            reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    INT_LIT         reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    FLOAT_LIT       reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    STRING_LIT      reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    BOOL_LIT        reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    CHAR_LIT        reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    NIL             reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    STRUCT          reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)
    LSQUARE         reduce using rule 184 (ContinueStmt -> CONTINUE SEMICOLON .)


state 205

    (185) ContinueStmt -> CONTINUE Label . SEMICOLON

    SEMICOLON       shift and go to state 262


state 206

    (186) GotoStmt -> GOTO Label . SEMICOLON

    SEMICOLON       shift and go to state 263


state 207

    (187) IfStmt -> IF SimpleStmt . SEMICOLON Expression Block
    (189) IfStmt -> IF SimpleStmt . SEMICOLON Expression ElseStmt

    SEMICOLON       shift and go to state 264


state 208

    (188) IfStmt -> IF Expression . Block
    (190) IfStmt -> IF Expression . ElseStmt
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression
    (150) ExpressionStmt -> Expression .
    (153) IncDecStmt -> Expression . PLUS_PLUS
    (154) IncDecStmt -> Expression . MINUS_MINUS
    (36) ExpressionList -> Expression .
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (191) ElseStmt -> . ELSE IfStmt
    (192) ElseStmt -> . ELSE Block
    (1) lcurly -> . LCURLY

    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166
    SEMICOLON       reduce using rule 150 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 210
    MINUS_MINUS     shift and go to state 211
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)
    ELSE            shift and go to state 267
    LCURLY          shift and go to state 65

    Block                          shift and go to state 265
    ElseStmt                       shift and go to state 266
    lcurly                         shift and go to state 64

state 209

    (34) IdentifierList -> ID .
    (69) OperandName -> ID .
    (74) LiteralType -> ID .

  ! reduce/reduce conflict for COMMA resolved using rule 34 (IdentifierList -> ID .)
  ! reduce/reduce conflict for LCURLY resolved using rule 69 (OperandName -> ID .)
    ASSIGN          reduce using rule 34 (IdentifierList -> ID .)
    COMMA           reduce using rule 34 (IdentifierList -> ID .)
    DOT             reduce using rule 69 (OperandName -> ID .)
    LSQUARE         reduce using rule 69 (OperandName -> ID .)
    LROUND          reduce using rule 69 (OperandName -> ID .)
    OR_OR           reduce using rule 69 (OperandName -> ID .)
    AMP_AMP         reduce using rule 69 (OperandName -> ID .)
    EQ_EQ           reduce using rule 69 (OperandName -> ID .)
    NOT_EQ          reduce using rule 69 (OperandName -> ID .)
    LT              reduce using rule 69 (OperandName -> ID .)
    LE              reduce using rule 69 (OperandName -> ID .)
    GT              reduce using rule 69 (OperandName -> ID .)
    GE              reduce using rule 69 (OperandName -> ID .)
    PLUS            reduce using rule 69 (OperandName -> ID .)
    MINUS           reduce using rule 69 (OperandName -> ID .)
    OR              reduce using rule 69 (OperandName -> ID .)
    CARET           reduce using rule 69 (OperandName -> ID .)
    STAR            reduce using rule 69 (OperandName -> ID .)
    DIVIDE          reduce using rule 69 (OperandName -> ID .)
    MODULO          reduce using rule 69 (OperandName -> ID .)
    LSHIFT          reduce using rule 69 (OperandName -> ID .)
    RSHIFT          reduce using rule 69 (OperandName -> ID .)
    AMP             reduce using rule 69 (OperandName -> ID .)
    PLUS_PLUS       reduce using rule 69 (OperandName -> ID .)
    MINUS_MINUS     reduce using rule 69 (OperandName -> ID .)
    ELSE            reduce using rule 69 (OperandName -> ID .)
    LCURLY          reduce using rule 69 (OperandName -> ID .)
    SEMICOLON       reduce using rule 69 (OperandName -> ID .)
    PLUS_EQ         reduce using rule 69 (OperandName -> ID .)
    MINUS_EQ        reduce using rule 69 (OperandName -> ID .)
    STAR_EQ         reduce using rule 69 (OperandName -> ID .)
    DIVIDE_EQ       reduce using rule 69 (OperandName -> ID .)
    MODULO_EQ       reduce using rule 69 (OperandName -> ID .)
    AMP_EQ          reduce using rule 69 (OperandName -> ID .)
    OR_EQ           reduce using rule 69 (OperandName -> ID .)
    CARET_EQ        reduce using rule 69 (OperandName -> ID .)
    EQ              reduce using rule 69 (OperandName -> ID .)

  ! COMMA           [ reduce using rule 69 (OperandName -> ID .) ]
  ! LCURLY          [ reduce using rule 74 (LiteralType -> ID .) ]


state 210

    (153) IncDecStmt -> Expression PLUS_PLUS .

    SEMICOLON       reduce using rule 153 (IncDecStmt -> Expression PLUS_PLUS .)
    LCURLY          reduce using rule 153 (IncDecStmt -> Expression PLUS_PLUS .)


state 211

    (154) IncDecStmt -> Expression MINUS_MINUS .

    SEMICOLON       reduce using rule 154 (IncDecStmt -> Expression MINUS_MINUS .)
    LCURLY          reduce using rule 154 (IncDecStmt -> Expression MINUS_MINUS .)


state 212

    (165) ForStmt -> ForLoop Block .

    RCURLY          reduce using rule 165 (ForStmt -> ForLoop Block .)
    SEMICOLON       reduce using rule 165 (ForStmt -> ForLoop Block .)
    RETURN          reduce using rule 165 (ForStmt -> ForLoop Block .)
    BREAK           reduce using rule 165 (ForStmt -> ForLoop Block .)
    CONTINUE        reduce using rule 165 (ForStmt -> ForLoop Block .)
    GOTO            reduce using rule 165 (ForStmt -> ForLoop Block .)
    IF              reduce using rule 165 (ForStmt -> ForLoop Block .)
    CONST           reduce using rule 165 (ForStmt -> ForLoop Block .)
    TYPE            reduce using rule 165 (ForStmt -> ForLoop Block .)
    VAR             reduce using rule 165 (ForStmt -> ForLoop Block .)
    ID              reduce using rule 165 (ForStmt -> ForLoop Block .)
    LCURLY          reduce using rule 165 (ForStmt -> ForLoop Block .)
    FOR             reduce using rule 165 (ForStmt -> ForLoop Block .)
    PLUS            reduce using rule 165 (ForStmt -> ForLoop Block .)
    MINUS           reduce using rule 165 (ForStmt -> ForLoop Block .)
    NOT             reduce using rule 165 (ForStmt -> ForLoop Block .)
    CARET           reduce using rule 165 (ForStmt -> ForLoop Block .)
    STAR            reduce using rule 165 (ForStmt -> ForLoop Block .)
    AMP             reduce using rule 165 (ForStmt -> ForLoop Block .)
    LROUND          reduce using rule 165 (ForStmt -> ForLoop Block .)
    MAKE            reduce using rule 165 (ForStmt -> ForLoop Block .)
    INT_LIT         reduce using rule 165 (ForStmt -> ForLoop Block .)
    FLOAT_LIT       reduce using rule 165 (ForStmt -> ForLoop Block .)
    STRING_LIT      reduce using rule 165 (ForStmt -> ForLoop Block .)
    BOOL_LIT        reduce using rule 165 (ForStmt -> ForLoop Block .)
    CHAR_LIT        reduce using rule 165 (ForStmt -> ForLoop Block .)
    NIL             reduce using rule 165 (ForStmt -> ForLoop Block .)
    STRUCT          reduce using rule 165 (ForStmt -> ForLoop Block .)
    LSQUARE         reduce using rule 165 (ForStmt -> ForLoop Block .)


state 213

    (166) ForStmt -> WhileLoop Block .

    RCURLY          reduce using rule 166 (ForStmt -> WhileLoop Block .)
    SEMICOLON       reduce using rule 166 (ForStmt -> WhileLoop Block .)
    RETURN          reduce using rule 166 (ForStmt -> WhileLoop Block .)
    BREAK           reduce using rule 166 (ForStmt -> WhileLoop Block .)
    CONTINUE        reduce using rule 166 (ForStmt -> WhileLoop Block .)
    GOTO            reduce using rule 166 (ForStmt -> WhileLoop Block .)
    IF              reduce using rule 166 (ForStmt -> WhileLoop Block .)
    CONST           reduce using rule 166 (ForStmt -> WhileLoop Block .)
    TYPE            reduce using rule 166 (ForStmt -> WhileLoop Block .)
    VAR             reduce using rule 166 (ForStmt -> WhileLoop Block .)
    ID              reduce using rule 166 (ForStmt -> WhileLoop Block .)
    LCURLY          reduce using rule 166 (ForStmt -> WhileLoop Block .)
    FOR             reduce using rule 166 (ForStmt -> WhileLoop Block .)
    PLUS            reduce using rule 166 (ForStmt -> WhileLoop Block .)
    MINUS           reduce using rule 166 (ForStmt -> WhileLoop Block .)
    NOT             reduce using rule 166 (ForStmt -> WhileLoop Block .)
    CARET           reduce using rule 166 (ForStmt -> WhileLoop Block .)
    STAR            reduce using rule 166 (ForStmt -> WhileLoop Block .)
    AMP             reduce using rule 166 (ForStmt -> WhileLoop Block .)
    LROUND          reduce using rule 166 (ForStmt -> WhileLoop Block .)
    MAKE            reduce using rule 166 (ForStmt -> WhileLoop Block .)
    INT_LIT         reduce using rule 166 (ForStmt -> WhileLoop Block .)
    FLOAT_LIT       reduce using rule 166 (ForStmt -> WhileLoop Block .)
    STRING_LIT      reduce using rule 166 (ForStmt -> WhileLoop Block .)
    BOOL_LIT        reduce using rule 166 (ForStmt -> WhileLoop Block .)
    CHAR_LIT        reduce using rule 166 (ForStmt -> WhileLoop Block .)
    NIL             reduce using rule 166 (ForStmt -> WhileLoop Block .)
    STRUCT          reduce using rule 166 (ForStmt -> WhileLoop Block .)
    LSQUARE         reduce using rule 166 (ForStmt -> WhileLoop Block .)


state 214

    (167) ForLoop -> FOR InitStmt . SEMICOLON Condition SEMICOLON PostStmt
    (168) ForLoop -> FOR InitStmt . SEMICOLON Condition SEMICOLON
    (169) ForLoop -> FOR InitStmt . SEMICOLON SEMICOLON PostStmt
    (170) ForLoop -> FOR InitStmt . SEMICOLON SEMICOLON

    SEMICOLON       shift and go to state 268


state 215

    (171) ForLoop -> FOR SEMICOLON . Condition SEMICOLON PostStmt
    (172) ForLoop -> FOR SEMICOLON . Condition SEMICOLON
    (173) ForLoop -> FOR SEMICOLON . SEMICOLON PostStmt
    (174) ForLoop -> FOR SEMICOLON . SEMICOLON
    (179) Condition -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 269
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Condition                      shift and go to state 270
    Expression                     shift and go to state 271
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 216

    (175) WhileLoop -> FOR Condition . Block
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    LCURLY          shift and go to state 65

    Block                          shift and go to state 272
    lcurly                         shift and go to state 64

state 217

    (176) WhileLoop -> FOR Block .

    LCURLY          reduce using rule 176 (WhileLoop -> FOR Block .)


state 218

    (177) InitStmt -> SimpleStmt .

    SEMICOLON       reduce using rule 177 (InitStmt -> SimpleStmt .)


state 219

    (179) Condition -> Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression
    (150) ExpressionStmt -> Expression .
    (153) IncDecStmt -> Expression . PLUS_PLUS
    (154) IncDecStmt -> Expression . MINUS_MINUS
    (36) ExpressionList -> Expression .

    LCURLY          reduce using rule 179 (Condition -> Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166
    SEMICOLON       reduce using rule 150 (ExpressionStmt -> Expression .)
    PLUS_PLUS       shift and go to state 210
    MINUS_MINUS     shift and go to state 211
    COMMA           reduce using rule 36 (ExpressionList -> Expression .)
    PLUS_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    MINUS_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    STAR_EQ         reduce using rule 36 (ExpressionList -> Expression .)
    DIVIDE_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    MODULO_EQ       reduce using rule 36 (ExpressionList -> Expression .)
    AMP_EQ          reduce using rule 36 (ExpressionList -> Expression .)
    OR_EQ           reduce using rule 36 (ExpressionList -> Expression .)
    CARET_EQ        reduce using rule 36 (ExpressionList -> Expression .)
    EQ              reduce using rule 36 (ExpressionList -> Expression .)


state 220

    (41) ShortVarDecl -> IdentifierList ASSIGN . ExpressionList SEMICOLON
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    ExpressionList                 shift and go to state 273
    Expression                     shift and go to state 75
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 221

    (49) ParameterList -> ParameterList COMMA ParameterDecl .

    RROUND          reduce using rule 49 (ParameterList -> ParameterList COMMA ParameterDecl .)
    COMMA           reduce using rule 49 (ParameterList -> ParameterList COMMA ParameterDecl .)


state 222

    (35) ExpressionList -> ExpressionList COMMA Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    SEMICOLON       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    PLUS_EQ         reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    MINUS_EQ        reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    STAR_EQ         reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    DIVIDE_EQ       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    MODULO_EQ       reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    AMP_EQ          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    OR_EQ           reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    CARET_EQ        reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    EQ              reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    RROUND          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    LCURLY          reduce using rule 35 (ExpressionList -> ExpressionList COMMA Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 223

    (93) Expression -> Expression OR_OR Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    COMMA           reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    SEMICOLON       reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    RSQUARE         reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    PLUS_PLUS       reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    MINUS_MINUS     reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    PLUS_EQ         reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    MINUS_EQ        reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    STAR_EQ         reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    DIVIDE_EQ       reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    MODULO_EQ       reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    AMP_EQ          reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    OR_EQ           reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    CARET_EQ        reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    EQ              reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    RROUND          reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    ELSE            reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    LCURLY          reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    RCURLY          reduce using rule 93 (Expression -> Expression OR_OR Expression .)
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! AMP_AMP         [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! EQ_EQ           [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! NOT_EQ          [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! LT              [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! LE              [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! GT              [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! GE              [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! PLUS            [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! MINUS           [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! OR              [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! CARET           [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! STAR            [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! DIVIDE          [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! MODULO          [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! LSHIFT          [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! RSHIFT          [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! AMP             [ reduce using rule 93 (Expression -> Expression OR_OR Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]


state 224

    (94) Expression -> Expression AMP_AMP Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    AMP_AMP         reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    COMMA           reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    SEMICOLON       reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    RSQUARE         reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    PLUS_PLUS       reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    MINUS_MINUS     reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    PLUS_EQ         reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    MINUS_EQ        reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    STAR_EQ         reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    DIVIDE_EQ       reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    MODULO_EQ       reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    AMP_EQ          reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    OR_EQ           reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    CARET_EQ        reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    EQ              reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    RROUND          reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    ELSE            reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    LCURLY          reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    RCURLY          reduce using rule 94 (Expression -> Expression AMP_AMP Expression .)
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! EQ_EQ           [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! NOT_EQ          [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! LT              [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! LE              [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! GT              [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! GE              [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! PLUS            [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! MINUS           [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! OR              [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! CARET           [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! STAR            [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! DIVIDE          [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! MODULO          [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! LSHIFT          [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! RSHIFT          [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! AMP             [ reduce using rule 94 (Expression -> Expression AMP_AMP Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]


state 225

    (95) Expression -> Expression EQ_EQ Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    AMP_AMP         reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    EQ_EQ           reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    NOT_EQ          reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    LT              reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    LE              reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    GT              reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    GE              reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    COMMA           reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    SEMICOLON       reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    RSQUARE         reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    PLUS_PLUS       reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    MINUS_MINUS     reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    PLUS_EQ         reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    MINUS_EQ        reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    STAR_EQ         reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    DIVIDE_EQ       reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    MODULO_EQ       reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    AMP_EQ          reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    OR_EQ           reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    CARET_EQ        reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    EQ              reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    RROUND          reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    ELSE            reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    LCURLY          reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    RCURLY          reduce using rule 95 (Expression -> Expression EQ_EQ Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! MINUS           [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! OR              [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! CARET           [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! STAR            [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! DIVIDE          [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! MODULO          [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! LSHIFT          [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! RSHIFT          [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! AMP             [ reduce using rule 95 (Expression -> Expression EQ_EQ Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 226

    (96) Expression -> Expression NOT_EQ Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    AMP_AMP         reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    EQ_EQ           reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    NOT_EQ          reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    LT              reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    LE              reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    GT              reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    GE              reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    COMMA           reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    SEMICOLON       reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    RSQUARE         reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    PLUS_PLUS       reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    MINUS_MINUS     reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    PLUS_EQ         reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    MINUS_EQ        reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    STAR_EQ         reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    DIVIDE_EQ       reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    MODULO_EQ       reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    AMP_EQ          reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    OR_EQ           reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    CARET_EQ        reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    EQ              reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    RROUND          reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    ELSE            reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    LCURLY          reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    RCURLY          reduce using rule 96 (Expression -> Expression NOT_EQ Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! MINUS           [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! OR              [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! CARET           [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! STAR            [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! DIVIDE          [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! MODULO          [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! LSHIFT          [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! RSHIFT          [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! AMP             [ reduce using rule 96 (Expression -> Expression NOT_EQ Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 227

    (97) Expression -> Expression LT Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 97 (Expression -> Expression LT Expression .)
    AMP_AMP         reduce using rule 97 (Expression -> Expression LT Expression .)
    EQ_EQ           reduce using rule 97 (Expression -> Expression LT Expression .)
    NOT_EQ          reduce using rule 97 (Expression -> Expression LT Expression .)
    LT              reduce using rule 97 (Expression -> Expression LT Expression .)
    LE              reduce using rule 97 (Expression -> Expression LT Expression .)
    GT              reduce using rule 97 (Expression -> Expression LT Expression .)
    GE              reduce using rule 97 (Expression -> Expression LT Expression .)
    COMMA           reduce using rule 97 (Expression -> Expression LT Expression .)
    SEMICOLON       reduce using rule 97 (Expression -> Expression LT Expression .)
    RSQUARE         reduce using rule 97 (Expression -> Expression LT Expression .)
    PLUS_PLUS       reduce using rule 97 (Expression -> Expression LT Expression .)
    MINUS_MINUS     reduce using rule 97 (Expression -> Expression LT Expression .)
    PLUS_EQ         reduce using rule 97 (Expression -> Expression LT Expression .)
    MINUS_EQ        reduce using rule 97 (Expression -> Expression LT Expression .)
    STAR_EQ         reduce using rule 97 (Expression -> Expression LT Expression .)
    DIVIDE_EQ       reduce using rule 97 (Expression -> Expression LT Expression .)
    MODULO_EQ       reduce using rule 97 (Expression -> Expression LT Expression .)
    AMP_EQ          reduce using rule 97 (Expression -> Expression LT Expression .)
    OR_EQ           reduce using rule 97 (Expression -> Expression LT Expression .)
    CARET_EQ        reduce using rule 97 (Expression -> Expression LT Expression .)
    EQ              reduce using rule 97 (Expression -> Expression LT Expression .)
    RROUND          reduce using rule 97 (Expression -> Expression LT Expression .)
    ELSE            reduce using rule 97 (Expression -> Expression LT Expression .)
    LCURLY          reduce using rule 97 (Expression -> Expression LT Expression .)
    RCURLY          reduce using rule 97 (Expression -> Expression LT Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! MINUS           [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! OR              [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! CARET           [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! STAR            [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! DIVIDE          [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! MODULO          [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! LSHIFT          [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! RSHIFT          [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! AMP             [ reduce using rule 97 (Expression -> Expression LT Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 228

    (98) Expression -> Expression LE Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 98 (Expression -> Expression LE Expression .)
    AMP_AMP         reduce using rule 98 (Expression -> Expression LE Expression .)
    EQ_EQ           reduce using rule 98 (Expression -> Expression LE Expression .)
    NOT_EQ          reduce using rule 98 (Expression -> Expression LE Expression .)
    LT              reduce using rule 98 (Expression -> Expression LE Expression .)
    LE              reduce using rule 98 (Expression -> Expression LE Expression .)
    GT              reduce using rule 98 (Expression -> Expression LE Expression .)
    GE              reduce using rule 98 (Expression -> Expression LE Expression .)
    COMMA           reduce using rule 98 (Expression -> Expression LE Expression .)
    SEMICOLON       reduce using rule 98 (Expression -> Expression LE Expression .)
    RSQUARE         reduce using rule 98 (Expression -> Expression LE Expression .)
    PLUS_PLUS       reduce using rule 98 (Expression -> Expression LE Expression .)
    MINUS_MINUS     reduce using rule 98 (Expression -> Expression LE Expression .)
    PLUS_EQ         reduce using rule 98 (Expression -> Expression LE Expression .)
    MINUS_EQ        reduce using rule 98 (Expression -> Expression LE Expression .)
    STAR_EQ         reduce using rule 98 (Expression -> Expression LE Expression .)
    DIVIDE_EQ       reduce using rule 98 (Expression -> Expression LE Expression .)
    MODULO_EQ       reduce using rule 98 (Expression -> Expression LE Expression .)
    AMP_EQ          reduce using rule 98 (Expression -> Expression LE Expression .)
    OR_EQ           reduce using rule 98 (Expression -> Expression LE Expression .)
    CARET_EQ        reduce using rule 98 (Expression -> Expression LE Expression .)
    EQ              reduce using rule 98 (Expression -> Expression LE Expression .)
    RROUND          reduce using rule 98 (Expression -> Expression LE Expression .)
    ELSE            reduce using rule 98 (Expression -> Expression LE Expression .)
    LCURLY          reduce using rule 98 (Expression -> Expression LE Expression .)
    RCURLY          reduce using rule 98 (Expression -> Expression LE Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! MINUS           [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! OR              [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! CARET           [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! STAR            [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! DIVIDE          [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! MODULO          [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! LSHIFT          [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! RSHIFT          [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! AMP             [ reduce using rule 98 (Expression -> Expression LE Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 229

    (99) Expression -> Expression GT Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 99 (Expression -> Expression GT Expression .)
    AMP_AMP         reduce using rule 99 (Expression -> Expression GT Expression .)
    EQ_EQ           reduce using rule 99 (Expression -> Expression GT Expression .)
    NOT_EQ          reduce using rule 99 (Expression -> Expression GT Expression .)
    LT              reduce using rule 99 (Expression -> Expression GT Expression .)
    LE              reduce using rule 99 (Expression -> Expression GT Expression .)
    GT              reduce using rule 99 (Expression -> Expression GT Expression .)
    GE              reduce using rule 99 (Expression -> Expression GT Expression .)
    COMMA           reduce using rule 99 (Expression -> Expression GT Expression .)
    SEMICOLON       reduce using rule 99 (Expression -> Expression GT Expression .)
    RSQUARE         reduce using rule 99 (Expression -> Expression GT Expression .)
    PLUS_PLUS       reduce using rule 99 (Expression -> Expression GT Expression .)
    MINUS_MINUS     reduce using rule 99 (Expression -> Expression GT Expression .)
    PLUS_EQ         reduce using rule 99 (Expression -> Expression GT Expression .)
    MINUS_EQ        reduce using rule 99 (Expression -> Expression GT Expression .)
    STAR_EQ         reduce using rule 99 (Expression -> Expression GT Expression .)
    DIVIDE_EQ       reduce using rule 99 (Expression -> Expression GT Expression .)
    MODULO_EQ       reduce using rule 99 (Expression -> Expression GT Expression .)
    AMP_EQ          reduce using rule 99 (Expression -> Expression GT Expression .)
    OR_EQ           reduce using rule 99 (Expression -> Expression GT Expression .)
    CARET_EQ        reduce using rule 99 (Expression -> Expression GT Expression .)
    EQ              reduce using rule 99 (Expression -> Expression GT Expression .)
    RROUND          reduce using rule 99 (Expression -> Expression GT Expression .)
    ELSE            reduce using rule 99 (Expression -> Expression GT Expression .)
    LCURLY          reduce using rule 99 (Expression -> Expression GT Expression .)
    RCURLY          reduce using rule 99 (Expression -> Expression GT Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! MINUS           [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! OR              [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! CARET           [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! STAR            [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! DIVIDE          [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! MODULO          [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! LSHIFT          [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! RSHIFT          [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! AMP             [ reduce using rule 99 (Expression -> Expression GT Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 230

    (100) Expression -> Expression GE Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 100 (Expression -> Expression GE Expression .)
    AMP_AMP         reduce using rule 100 (Expression -> Expression GE Expression .)
    EQ_EQ           reduce using rule 100 (Expression -> Expression GE Expression .)
    NOT_EQ          reduce using rule 100 (Expression -> Expression GE Expression .)
    LT              reduce using rule 100 (Expression -> Expression GE Expression .)
    LE              reduce using rule 100 (Expression -> Expression GE Expression .)
    GT              reduce using rule 100 (Expression -> Expression GE Expression .)
    GE              reduce using rule 100 (Expression -> Expression GE Expression .)
    COMMA           reduce using rule 100 (Expression -> Expression GE Expression .)
    SEMICOLON       reduce using rule 100 (Expression -> Expression GE Expression .)
    RSQUARE         reduce using rule 100 (Expression -> Expression GE Expression .)
    PLUS_PLUS       reduce using rule 100 (Expression -> Expression GE Expression .)
    MINUS_MINUS     reduce using rule 100 (Expression -> Expression GE Expression .)
    PLUS_EQ         reduce using rule 100 (Expression -> Expression GE Expression .)
    MINUS_EQ        reduce using rule 100 (Expression -> Expression GE Expression .)
    STAR_EQ         reduce using rule 100 (Expression -> Expression GE Expression .)
    DIVIDE_EQ       reduce using rule 100 (Expression -> Expression GE Expression .)
    MODULO_EQ       reduce using rule 100 (Expression -> Expression GE Expression .)
    AMP_EQ          reduce using rule 100 (Expression -> Expression GE Expression .)
    OR_EQ           reduce using rule 100 (Expression -> Expression GE Expression .)
    CARET_EQ        reduce using rule 100 (Expression -> Expression GE Expression .)
    EQ              reduce using rule 100 (Expression -> Expression GE Expression .)
    RROUND          reduce using rule 100 (Expression -> Expression GE Expression .)
    ELSE            reduce using rule 100 (Expression -> Expression GE Expression .)
    LCURLY          reduce using rule 100 (Expression -> Expression GE Expression .)
    RCURLY          reduce using rule 100 (Expression -> Expression GE Expression .)
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! PLUS            [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! MINUS           [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! OR              [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! CARET           [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! STAR            [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! DIVIDE          [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! MODULO          [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! LSHIFT          [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! RSHIFT          [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! AMP             [ reduce using rule 100 (Expression -> Expression GE Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]


state 231

    (101) Expression -> Expression PLUS Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    AMP_AMP         reduce using rule 101 (Expression -> Expression PLUS Expression .)
    EQ_EQ           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    NOT_EQ          reduce using rule 101 (Expression -> Expression PLUS Expression .)
    LT              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    LE              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    GT              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    GE              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    PLUS            reduce using rule 101 (Expression -> Expression PLUS Expression .)
    MINUS           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    OR              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    CARET           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    COMMA           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    SEMICOLON       reduce using rule 101 (Expression -> Expression PLUS Expression .)
    RSQUARE         reduce using rule 101 (Expression -> Expression PLUS Expression .)
    PLUS_PLUS       reduce using rule 101 (Expression -> Expression PLUS Expression .)
    MINUS_MINUS     reduce using rule 101 (Expression -> Expression PLUS Expression .)
    PLUS_EQ         reduce using rule 101 (Expression -> Expression PLUS Expression .)
    MINUS_EQ        reduce using rule 101 (Expression -> Expression PLUS Expression .)
    STAR_EQ         reduce using rule 101 (Expression -> Expression PLUS Expression .)
    DIVIDE_EQ       reduce using rule 101 (Expression -> Expression PLUS Expression .)
    MODULO_EQ       reduce using rule 101 (Expression -> Expression PLUS Expression .)
    AMP_EQ          reduce using rule 101 (Expression -> Expression PLUS Expression .)
    OR_EQ           reduce using rule 101 (Expression -> Expression PLUS Expression .)
    CARET_EQ        reduce using rule 101 (Expression -> Expression PLUS Expression .)
    EQ              reduce using rule 101 (Expression -> Expression PLUS Expression .)
    RROUND          reduce using rule 101 (Expression -> Expression PLUS Expression .)
    ELSE            reduce using rule 101 (Expression -> Expression PLUS Expression .)
    LCURLY          reduce using rule 101 (Expression -> Expression PLUS Expression .)
    RCURLY          reduce using rule 101 (Expression -> Expression PLUS Expression .)
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! STAR            [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! DIVIDE          [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! MODULO          [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! LSHIFT          [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! RSHIFT          [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! AMP             [ reduce using rule 101 (Expression -> Expression PLUS Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]


state 232

    (102) Expression -> Expression MINUS Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    AMP_AMP         reduce using rule 102 (Expression -> Expression MINUS Expression .)
    EQ_EQ           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    NOT_EQ          reduce using rule 102 (Expression -> Expression MINUS Expression .)
    LT              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    LE              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    GT              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    GE              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    PLUS            reduce using rule 102 (Expression -> Expression MINUS Expression .)
    MINUS           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    OR              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    CARET           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    COMMA           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    SEMICOLON       reduce using rule 102 (Expression -> Expression MINUS Expression .)
    RSQUARE         reduce using rule 102 (Expression -> Expression MINUS Expression .)
    PLUS_PLUS       reduce using rule 102 (Expression -> Expression MINUS Expression .)
    MINUS_MINUS     reduce using rule 102 (Expression -> Expression MINUS Expression .)
    PLUS_EQ         reduce using rule 102 (Expression -> Expression MINUS Expression .)
    MINUS_EQ        reduce using rule 102 (Expression -> Expression MINUS Expression .)
    STAR_EQ         reduce using rule 102 (Expression -> Expression MINUS Expression .)
    DIVIDE_EQ       reduce using rule 102 (Expression -> Expression MINUS Expression .)
    MODULO_EQ       reduce using rule 102 (Expression -> Expression MINUS Expression .)
    AMP_EQ          reduce using rule 102 (Expression -> Expression MINUS Expression .)
    OR_EQ           reduce using rule 102 (Expression -> Expression MINUS Expression .)
    CARET_EQ        reduce using rule 102 (Expression -> Expression MINUS Expression .)
    EQ              reduce using rule 102 (Expression -> Expression MINUS Expression .)
    RROUND          reduce using rule 102 (Expression -> Expression MINUS Expression .)
    ELSE            reduce using rule 102 (Expression -> Expression MINUS Expression .)
    LCURLY          reduce using rule 102 (Expression -> Expression MINUS Expression .)
    RCURLY          reduce using rule 102 (Expression -> Expression MINUS Expression .)
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! STAR            [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! DIVIDE          [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! MODULO          [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! LSHIFT          [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! RSHIFT          [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! AMP             [ reduce using rule 102 (Expression -> Expression MINUS Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]


state 233

    (103) Expression -> Expression OR Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 103 (Expression -> Expression OR Expression .)
    AMP_AMP         reduce using rule 103 (Expression -> Expression OR Expression .)
    EQ_EQ           reduce using rule 103 (Expression -> Expression OR Expression .)
    NOT_EQ          reduce using rule 103 (Expression -> Expression OR Expression .)
    LT              reduce using rule 103 (Expression -> Expression OR Expression .)
    LE              reduce using rule 103 (Expression -> Expression OR Expression .)
    GT              reduce using rule 103 (Expression -> Expression OR Expression .)
    GE              reduce using rule 103 (Expression -> Expression OR Expression .)
    PLUS            reduce using rule 103 (Expression -> Expression OR Expression .)
    MINUS           reduce using rule 103 (Expression -> Expression OR Expression .)
    OR              reduce using rule 103 (Expression -> Expression OR Expression .)
    CARET           reduce using rule 103 (Expression -> Expression OR Expression .)
    COMMA           reduce using rule 103 (Expression -> Expression OR Expression .)
    SEMICOLON       reduce using rule 103 (Expression -> Expression OR Expression .)
    RSQUARE         reduce using rule 103 (Expression -> Expression OR Expression .)
    PLUS_PLUS       reduce using rule 103 (Expression -> Expression OR Expression .)
    MINUS_MINUS     reduce using rule 103 (Expression -> Expression OR Expression .)
    PLUS_EQ         reduce using rule 103 (Expression -> Expression OR Expression .)
    MINUS_EQ        reduce using rule 103 (Expression -> Expression OR Expression .)
    STAR_EQ         reduce using rule 103 (Expression -> Expression OR Expression .)
    DIVIDE_EQ       reduce using rule 103 (Expression -> Expression OR Expression .)
    MODULO_EQ       reduce using rule 103 (Expression -> Expression OR Expression .)
    AMP_EQ          reduce using rule 103 (Expression -> Expression OR Expression .)
    OR_EQ           reduce using rule 103 (Expression -> Expression OR Expression .)
    CARET_EQ        reduce using rule 103 (Expression -> Expression OR Expression .)
    EQ              reduce using rule 103 (Expression -> Expression OR Expression .)
    RROUND          reduce using rule 103 (Expression -> Expression OR Expression .)
    ELSE            reduce using rule 103 (Expression -> Expression OR Expression .)
    LCURLY          reduce using rule 103 (Expression -> Expression OR Expression .)
    RCURLY          reduce using rule 103 (Expression -> Expression OR Expression .)
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! STAR            [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! DIVIDE          [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! MODULO          [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! LSHIFT          [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! RSHIFT          [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! AMP             [ reduce using rule 103 (Expression -> Expression OR Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]


state 234

    (104) Expression -> Expression CARET Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 104 (Expression -> Expression CARET Expression .)
    AMP_AMP         reduce using rule 104 (Expression -> Expression CARET Expression .)
    EQ_EQ           reduce using rule 104 (Expression -> Expression CARET Expression .)
    NOT_EQ          reduce using rule 104 (Expression -> Expression CARET Expression .)
    LT              reduce using rule 104 (Expression -> Expression CARET Expression .)
    LE              reduce using rule 104 (Expression -> Expression CARET Expression .)
    GT              reduce using rule 104 (Expression -> Expression CARET Expression .)
    GE              reduce using rule 104 (Expression -> Expression CARET Expression .)
    PLUS            reduce using rule 104 (Expression -> Expression CARET Expression .)
    MINUS           reduce using rule 104 (Expression -> Expression CARET Expression .)
    OR              reduce using rule 104 (Expression -> Expression CARET Expression .)
    CARET           reduce using rule 104 (Expression -> Expression CARET Expression .)
    COMMA           reduce using rule 104 (Expression -> Expression CARET Expression .)
    SEMICOLON       reduce using rule 104 (Expression -> Expression CARET Expression .)
    RSQUARE         reduce using rule 104 (Expression -> Expression CARET Expression .)
    PLUS_PLUS       reduce using rule 104 (Expression -> Expression CARET Expression .)
    MINUS_MINUS     reduce using rule 104 (Expression -> Expression CARET Expression .)
    PLUS_EQ         reduce using rule 104 (Expression -> Expression CARET Expression .)
    MINUS_EQ        reduce using rule 104 (Expression -> Expression CARET Expression .)
    STAR_EQ         reduce using rule 104 (Expression -> Expression CARET Expression .)
    DIVIDE_EQ       reduce using rule 104 (Expression -> Expression CARET Expression .)
    MODULO_EQ       reduce using rule 104 (Expression -> Expression CARET Expression .)
    AMP_EQ          reduce using rule 104 (Expression -> Expression CARET Expression .)
    OR_EQ           reduce using rule 104 (Expression -> Expression CARET Expression .)
    CARET_EQ        reduce using rule 104 (Expression -> Expression CARET Expression .)
    EQ              reduce using rule 104 (Expression -> Expression CARET Expression .)
    RROUND          reduce using rule 104 (Expression -> Expression CARET Expression .)
    ELSE            reduce using rule 104 (Expression -> Expression CARET Expression .)
    LCURLY          reduce using rule 104 (Expression -> Expression CARET Expression .)
    RCURLY          reduce using rule 104 (Expression -> Expression CARET Expression .)
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166

  ! STAR            [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! DIVIDE          [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! MODULO          [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! LSHIFT          [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! RSHIFT          [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! AMP             [ reduce using rule 104 (Expression -> Expression CARET Expression .) ]
  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]


state 235

    (105) Expression -> Expression STAR Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 105 (Expression -> Expression STAR Expression .)
    AMP_AMP         reduce using rule 105 (Expression -> Expression STAR Expression .)
    EQ_EQ           reduce using rule 105 (Expression -> Expression STAR Expression .)
    NOT_EQ          reduce using rule 105 (Expression -> Expression STAR Expression .)
    LT              reduce using rule 105 (Expression -> Expression STAR Expression .)
    LE              reduce using rule 105 (Expression -> Expression STAR Expression .)
    GT              reduce using rule 105 (Expression -> Expression STAR Expression .)
    GE              reduce using rule 105 (Expression -> Expression STAR Expression .)
    PLUS            reduce using rule 105 (Expression -> Expression STAR Expression .)
    MINUS           reduce using rule 105 (Expression -> Expression STAR Expression .)
    OR              reduce using rule 105 (Expression -> Expression STAR Expression .)
    CARET           reduce using rule 105 (Expression -> Expression STAR Expression .)
    STAR            reduce using rule 105 (Expression -> Expression STAR Expression .)
    DIVIDE          reduce using rule 105 (Expression -> Expression STAR Expression .)
    MODULO          reduce using rule 105 (Expression -> Expression STAR Expression .)
    LSHIFT          reduce using rule 105 (Expression -> Expression STAR Expression .)
    RSHIFT          reduce using rule 105 (Expression -> Expression STAR Expression .)
    AMP             reduce using rule 105 (Expression -> Expression STAR Expression .)
    COMMA           reduce using rule 105 (Expression -> Expression STAR Expression .)
    SEMICOLON       reduce using rule 105 (Expression -> Expression STAR Expression .)
    RSQUARE         reduce using rule 105 (Expression -> Expression STAR Expression .)
    PLUS_PLUS       reduce using rule 105 (Expression -> Expression STAR Expression .)
    MINUS_MINUS     reduce using rule 105 (Expression -> Expression STAR Expression .)
    PLUS_EQ         reduce using rule 105 (Expression -> Expression STAR Expression .)
    MINUS_EQ        reduce using rule 105 (Expression -> Expression STAR Expression .)
    STAR_EQ         reduce using rule 105 (Expression -> Expression STAR Expression .)
    DIVIDE_EQ       reduce using rule 105 (Expression -> Expression STAR Expression .)
    MODULO_EQ       reduce using rule 105 (Expression -> Expression STAR Expression .)
    AMP_EQ          reduce using rule 105 (Expression -> Expression STAR Expression .)
    OR_EQ           reduce using rule 105 (Expression -> Expression STAR Expression .)
    CARET_EQ        reduce using rule 105 (Expression -> Expression STAR Expression .)
    EQ              reduce using rule 105 (Expression -> Expression STAR Expression .)
    RROUND          reduce using rule 105 (Expression -> Expression STAR Expression .)
    ELSE            reduce using rule 105 (Expression -> Expression STAR Expression .)
    LCURLY          reduce using rule 105 (Expression -> Expression STAR Expression .)
    RCURLY          reduce using rule 105 (Expression -> Expression STAR Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 236

    (106) Expression -> Expression DIVIDE Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    AMP_AMP         reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    EQ_EQ           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    NOT_EQ          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    LT              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    LE              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    GT              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    GE              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    PLUS            reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    MINUS           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    OR              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    CARET           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    STAR            reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    DIVIDE          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    MODULO          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    LSHIFT          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    RSHIFT          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    AMP             reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    COMMA           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    SEMICOLON       reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    RSQUARE         reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    PLUS_PLUS       reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    MINUS_MINUS     reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    PLUS_EQ         reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    MINUS_EQ        reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    STAR_EQ         reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    DIVIDE_EQ       reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    MODULO_EQ       reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    AMP_EQ          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    OR_EQ           reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    CARET_EQ        reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    EQ              reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    RROUND          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    ELSE            reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    LCURLY          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)
    RCURLY          reduce using rule 106 (Expression -> Expression DIVIDE Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 237

    (107) Expression -> Expression MODULO Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    AMP_AMP         reduce using rule 107 (Expression -> Expression MODULO Expression .)
    EQ_EQ           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    NOT_EQ          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    LT              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    LE              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    GT              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    GE              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    PLUS            reduce using rule 107 (Expression -> Expression MODULO Expression .)
    MINUS           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    OR              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    CARET           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    STAR            reduce using rule 107 (Expression -> Expression MODULO Expression .)
    DIVIDE          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    MODULO          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    LSHIFT          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    RSHIFT          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    AMP             reduce using rule 107 (Expression -> Expression MODULO Expression .)
    COMMA           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    SEMICOLON       reduce using rule 107 (Expression -> Expression MODULO Expression .)
    RSQUARE         reduce using rule 107 (Expression -> Expression MODULO Expression .)
    PLUS_PLUS       reduce using rule 107 (Expression -> Expression MODULO Expression .)
    MINUS_MINUS     reduce using rule 107 (Expression -> Expression MODULO Expression .)
    PLUS_EQ         reduce using rule 107 (Expression -> Expression MODULO Expression .)
    MINUS_EQ        reduce using rule 107 (Expression -> Expression MODULO Expression .)
    STAR_EQ         reduce using rule 107 (Expression -> Expression MODULO Expression .)
    DIVIDE_EQ       reduce using rule 107 (Expression -> Expression MODULO Expression .)
    MODULO_EQ       reduce using rule 107 (Expression -> Expression MODULO Expression .)
    AMP_EQ          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    OR_EQ           reduce using rule 107 (Expression -> Expression MODULO Expression .)
    CARET_EQ        reduce using rule 107 (Expression -> Expression MODULO Expression .)
    EQ              reduce using rule 107 (Expression -> Expression MODULO Expression .)
    RROUND          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    ELSE            reduce using rule 107 (Expression -> Expression MODULO Expression .)
    LCURLY          reduce using rule 107 (Expression -> Expression MODULO Expression .)
    RCURLY          reduce using rule 107 (Expression -> Expression MODULO Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 238

    (108) Expression -> Expression LSHIFT Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    AMP_AMP         reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    EQ_EQ           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    NOT_EQ          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    LT              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    LE              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    GT              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    GE              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    PLUS            reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    MINUS           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    OR              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    CARET           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    STAR            reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    DIVIDE          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    MODULO          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    LSHIFT          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    RSHIFT          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    AMP             reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    COMMA           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    SEMICOLON       reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    RSQUARE         reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    PLUS_PLUS       reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    MINUS_MINUS     reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    PLUS_EQ         reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    MINUS_EQ        reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    STAR_EQ         reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    DIVIDE_EQ       reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    MODULO_EQ       reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    AMP_EQ          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    OR_EQ           reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    CARET_EQ        reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    EQ              reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    RROUND          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    ELSE            reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    LCURLY          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)
    RCURLY          reduce using rule 108 (Expression -> Expression LSHIFT Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 239

    (109) Expression -> Expression RSHIFT Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    AMP_AMP         reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    EQ_EQ           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    NOT_EQ          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    LT              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    LE              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    GT              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    GE              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    PLUS            reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    MINUS           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    OR              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    CARET           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    STAR            reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    DIVIDE          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    MODULO          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    LSHIFT          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    RSHIFT          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    AMP             reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    COMMA           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    SEMICOLON       reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    RSQUARE         reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    PLUS_PLUS       reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    MINUS_MINUS     reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    PLUS_EQ         reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    MINUS_EQ        reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    STAR_EQ         reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    DIVIDE_EQ       reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    MODULO_EQ       reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    AMP_EQ          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    OR_EQ           reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    CARET_EQ        reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    EQ              reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    RROUND          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    ELSE            reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    LCURLY          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)
    RCURLY          reduce using rule 109 (Expression -> Expression RSHIFT Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 240

    (110) Expression -> Expression AMP Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    OR_OR           reduce using rule 110 (Expression -> Expression AMP Expression .)
    AMP_AMP         reduce using rule 110 (Expression -> Expression AMP Expression .)
    EQ_EQ           reduce using rule 110 (Expression -> Expression AMP Expression .)
    NOT_EQ          reduce using rule 110 (Expression -> Expression AMP Expression .)
    LT              reduce using rule 110 (Expression -> Expression AMP Expression .)
    LE              reduce using rule 110 (Expression -> Expression AMP Expression .)
    GT              reduce using rule 110 (Expression -> Expression AMP Expression .)
    GE              reduce using rule 110 (Expression -> Expression AMP Expression .)
    PLUS            reduce using rule 110 (Expression -> Expression AMP Expression .)
    MINUS           reduce using rule 110 (Expression -> Expression AMP Expression .)
    OR              reduce using rule 110 (Expression -> Expression AMP Expression .)
    CARET           reduce using rule 110 (Expression -> Expression AMP Expression .)
    STAR            reduce using rule 110 (Expression -> Expression AMP Expression .)
    DIVIDE          reduce using rule 110 (Expression -> Expression AMP Expression .)
    MODULO          reduce using rule 110 (Expression -> Expression AMP Expression .)
    LSHIFT          reduce using rule 110 (Expression -> Expression AMP Expression .)
    RSHIFT          reduce using rule 110 (Expression -> Expression AMP Expression .)
    AMP             reduce using rule 110 (Expression -> Expression AMP Expression .)
    COMMA           reduce using rule 110 (Expression -> Expression AMP Expression .)
    SEMICOLON       reduce using rule 110 (Expression -> Expression AMP Expression .)
    RSQUARE         reduce using rule 110 (Expression -> Expression AMP Expression .)
    PLUS_PLUS       reduce using rule 110 (Expression -> Expression AMP Expression .)
    MINUS_MINUS     reduce using rule 110 (Expression -> Expression AMP Expression .)
    PLUS_EQ         reduce using rule 110 (Expression -> Expression AMP Expression .)
    MINUS_EQ        reduce using rule 110 (Expression -> Expression AMP Expression .)
    STAR_EQ         reduce using rule 110 (Expression -> Expression AMP Expression .)
    DIVIDE_EQ       reduce using rule 110 (Expression -> Expression AMP Expression .)
    MODULO_EQ       reduce using rule 110 (Expression -> Expression AMP Expression .)
    AMP_EQ          reduce using rule 110 (Expression -> Expression AMP Expression .)
    OR_EQ           reduce using rule 110 (Expression -> Expression AMP Expression .)
    CARET_EQ        reduce using rule 110 (Expression -> Expression AMP Expression .)
    EQ              reduce using rule 110 (Expression -> Expression AMP Expression .)
    RROUND          reduce using rule 110 (Expression -> Expression AMP Expression .)
    ELSE            reduce using rule 110 (Expression -> Expression AMP Expression .)
    LCURLY          reduce using rule 110 (Expression -> Expression AMP Expression .)
    RCURLY          reduce using rule 110 (Expression -> Expression AMP Expression .)

  ! OR_OR           [ shift and go to state 149 ]
  ! AMP_AMP         [ shift and go to state 150 ]
  ! EQ_EQ           [ shift and go to state 151 ]
  ! NOT_EQ          [ shift and go to state 152 ]
  ! LT              [ shift and go to state 153 ]
  ! LE              [ shift and go to state 154 ]
  ! GT              [ shift and go to state 155 ]
  ! GE              [ shift and go to state 156 ]
  ! PLUS            [ shift and go to state 157 ]
  ! MINUS           [ shift and go to state 158 ]
  ! OR              [ shift and go to state 159 ]
  ! CARET           [ shift and go to state 160 ]
  ! STAR            [ shift and go to state 161 ]
  ! DIVIDE          [ shift and go to state 162 ]
  ! MODULO          [ shift and go to state 163 ]
  ! LSHIFT          [ shift and go to state 164 ]
  ! RSHIFT          [ shift and go to state 165 ]
  ! AMP             [ shift and go to state 166 ]


state 241

    (88) Selector -> DOT ID .

    DOT             reduce using rule 88 (Selector -> DOT ID .)
    LSQUARE         reduce using rule 88 (Selector -> DOT ID .)
    LROUND          reduce using rule 88 (Selector -> DOT ID .)
    OR_OR           reduce using rule 88 (Selector -> DOT ID .)
    AMP_AMP         reduce using rule 88 (Selector -> DOT ID .)
    EQ_EQ           reduce using rule 88 (Selector -> DOT ID .)
    NOT_EQ          reduce using rule 88 (Selector -> DOT ID .)
    LT              reduce using rule 88 (Selector -> DOT ID .)
    LE              reduce using rule 88 (Selector -> DOT ID .)
    GT              reduce using rule 88 (Selector -> DOT ID .)
    GE              reduce using rule 88 (Selector -> DOT ID .)
    PLUS            reduce using rule 88 (Selector -> DOT ID .)
    MINUS           reduce using rule 88 (Selector -> DOT ID .)
    OR              reduce using rule 88 (Selector -> DOT ID .)
    CARET           reduce using rule 88 (Selector -> DOT ID .)
    STAR            reduce using rule 88 (Selector -> DOT ID .)
    DIVIDE          reduce using rule 88 (Selector -> DOT ID .)
    MODULO          reduce using rule 88 (Selector -> DOT ID .)
    LSHIFT          reduce using rule 88 (Selector -> DOT ID .)
    RSHIFT          reduce using rule 88 (Selector -> DOT ID .)
    AMP             reduce using rule 88 (Selector -> DOT ID .)
    COMMA           reduce using rule 88 (Selector -> DOT ID .)
    SEMICOLON       reduce using rule 88 (Selector -> DOT ID .)
    RSQUARE         reduce using rule 88 (Selector -> DOT ID .)
    PLUS_PLUS       reduce using rule 88 (Selector -> DOT ID .)
    MINUS_MINUS     reduce using rule 88 (Selector -> DOT ID .)
    PLUS_EQ         reduce using rule 88 (Selector -> DOT ID .)
    MINUS_EQ        reduce using rule 88 (Selector -> DOT ID .)
    STAR_EQ         reduce using rule 88 (Selector -> DOT ID .)
    DIVIDE_EQ       reduce using rule 88 (Selector -> DOT ID .)
    MODULO_EQ       reduce using rule 88 (Selector -> DOT ID .)
    AMP_EQ          reduce using rule 88 (Selector -> DOT ID .)
    OR_EQ           reduce using rule 88 (Selector -> DOT ID .)
    CARET_EQ        reduce using rule 88 (Selector -> DOT ID .)
    EQ              reduce using rule 88 (Selector -> DOT ID .)
    RROUND          reduce using rule 88 (Selector -> DOT ID .)
    ELSE            reduce using rule 88 (Selector -> DOT ID .)
    LCURLY          reduce using rule 88 (Selector -> DOT ID .)
    RCURLY          reduce using rule 88 (Selector -> DOT ID .)


state 242

    (89) Index -> LSQUARE Expression . RSQUARE
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    RSQUARE         shift and go to state 274
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 243

    (90) Arguments -> LROUND ExpressionList . RROUND
    (35) ExpressionList -> ExpressionList . COMMA Expression

    RROUND          shift and go to state 275
    COMMA           shift and go to state 148


state 244

    (91) Arguments -> LROUND RROUND .

    DOT             reduce using rule 91 (Arguments -> LROUND RROUND .)
    LSQUARE         reduce using rule 91 (Arguments -> LROUND RROUND .)
    LROUND          reduce using rule 91 (Arguments -> LROUND RROUND .)
    OR_OR           reduce using rule 91 (Arguments -> LROUND RROUND .)
    AMP_AMP         reduce using rule 91 (Arguments -> LROUND RROUND .)
    EQ_EQ           reduce using rule 91 (Arguments -> LROUND RROUND .)
    NOT_EQ          reduce using rule 91 (Arguments -> LROUND RROUND .)
    LT              reduce using rule 91 (Arguments -> LROUND RROUND .)
    LE              reduce using rule 91 (Arguments -> LROUND RROUND .)
    GT              reduce using rule 91 (Arguments -> LROUND RROUND .)
    GE              reduce using rule 91 (Arguments -> LROUND RROUND .)
    PLUS            reduce using rule 91 (Arguments -> LROUND RROUND .)
    MINUS           reduce using rule 91 (Arguments -> LROUND RROUND .)
    OR              reduce using rule 91 (Arguments -> LROUND RROUND .)
    CARET           reduce using rule 91 (Arguments -> LROUND RROUND .)
    STAR            reduce using rule 91 (Arguments -> LROUND RROUND .)
    DIVIDE          reduce using rule 91 (Arguments -> LROUND RROUND .)
    MODULO          reduce using rule 91 (Arguments -> LROUND RROUND .)
    LSHIFT          reduce using rule 91 (Arguments -> LROUND RROUND .)
    RSHIFT          reduce using rule 91 (Arguments -> LROUND RROUND .)
    AMP             reduce using rule 91 (Arguments -> LROUND RROUND .)
    COMMA           reduce using rule 91 (Arguments -> LROUND RROUND .)
    SEMICOLON       reduce using rule 91 (Arguments -> LROUND RROUND .)
    RSQUARE         reduce using rule 91 (Arguments -> LROUND RROUND .)
    PLUS_PLUS       reduce using rule 91 (Arguments -> LROUND RROUND .)
    MINUS_MINUS     reduce using rule 91 (Arguments -> LROUND RROUND .)
    PLUS_EQ         reduce using rule 91 (Arguments -> LROUND RROUND .)
    MINUS_EQ        reduce using rule 91 (Arguments -> LROUND RROUND .)
    STAR_EQ         reduce using rule 91 (Arguments -> LROUND RROUND .)
    DIVIDE_EQ       reduce using rule 91 (Arguments -> LROUND RROUND .)
    MODULO_EQ       reduce using rule 91 (Arguments -> LROUND RROUND .)
    AMP_EQ          reduce using rule 91 (Arguments -> LROUND RROUND .)
    OR_EQ           reduce using rule 91 (Arguments -> LROUND RROUND .)
    CARET_EQ        reduce using rule 91 (Arguments -> LROUND RROUND .)
    EQ              reduce using rule 91 (Arguments -> LROUND RROUND .)
    RROUND          reduce using rule 91 (Arguments -> LROUND RROUND .)
    ELSE            reduce using rule 91 (Arguments -> LROUND RROUND .)
    LCURLY          reduce using rule 91 (Arguments -> LROUND RROUND .)
    RCURLY          reduce using rule 91 (Arguments -> LROUND RROUND .)


state 245

    (60) Operand -> LROUND Expression RROUND .

    DOT             reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LSQUARE         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LROUND          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR_OR           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP_AMP         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    EQ_EQ           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    NOT_EQ          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LT              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LE              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    GT              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    GE              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    CARET           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    STAR            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    DIVIDE          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MODULO          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LSHIFT          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RSHIFT          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP             reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    COMMA           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    SEMICOLON       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RSQUARE         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS_PLUS       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS_MINUS     reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    PLUS_EQ         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MINUS_EQ        reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    STAR_EQ         reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    DIVIDE_EQ       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    MODULO_EQ       reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    AMP_EQ          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    OR_EQ           reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    CARET_EQ        reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    EQ              reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RROUND          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    ELSE            reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    LCURLY          reduce using rule 60 (Operand -> LROUND Expression RROUND .)
    RCURLY          reduce using rule 60 (Operand -> LROUND Expression RROUND .)


state 246

    (86) MakeExpr -> MAKE LROUND SliceType . COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> MAKE LROUND SliceType . COMMA Expression RROUND

    COMMA           shift and go to state 276


state 247

    (13) SliceType -> LSQUARE . RSQUARE ElementType

    RSQUARE         shift and go to state 107


state 248

    (75) LiteralValue -> lcurly rcurly .

    DOT             reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LSQUARE         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LROUND          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR_OR           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP_AMP         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    EQ_EQ           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    NOT_EQ          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LT              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LE              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    GT              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    GE              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    CARET           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    STAR            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    DIVIDE          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MODULO          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LSHIFT          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RSHIFT          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP             reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    COMMA           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    SEMICOLON       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RSQUARE         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS_PLUS       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS_MINUS     reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    PLUS_EQ         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MINUS_EQ        reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    STAR_EQ         reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    DIVIDE_EQ       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    MODULO_EQ       reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    AMP_EQ          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    OR_EQ           reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    CARET_EQ        reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    EQ              reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RROUND          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    ELSE            reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    LCURLY          reduce using rule 75 (LiteralValue -> lcurly rcurly .)
    RCURLY          reduce using rule 75 (LiteralValue -> lcurly rcurly .)


state 249

    (76) LiteralValue -> lcurly ElementList . rcurly
    (78) ElementList -> ElementList . COMMA Element
    (2) rcurly -> . RCURLY

    COMMA           shift and go to state 278
    RCURLY          shift and go to state 116

    rcurly                         shift and go to state 277

state 250

    (77) ElementList -> Element .

    COMMA           reduce using rule 77 (ElementList -> Element .)
    RCURLY          reduce using rule 77 (ElementList -> Element .)


state 251

    (79) Element -> Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    COMMA           reduce using rule 79 (Element -> Expression .)
    RCURLY          reduce using rule 79 (Element -> Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 252

    (80) Element -> LiteralValue .

    COMMA           reduce using rule 80 (Element -> LiteralValue .)
    RCURLY          reduce using rule 80 (Element -> LiteralValue .)


state 253

    (11) ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .

    SEMICOLON       reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    EQ              reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    LCURLY          reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    FUNC            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    CONST           reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    TYPE            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    VAR             reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    $end            reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    RROUND          reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)
    COMMA           reduce using rule 11 (ArrayType -> LSQUARE ArrayLength RSQUARE ElementType .)


state 254

    (17) StructType -> STRUCT lcurly FieldDeclList rcurly .

    SEMICOLON       reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    EQ              reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    LCURLY          reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    FUNC            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    CONST           reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    TYPE            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    VAR             reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    $end            reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    RROUND          reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)
    COMMA           reduce using rule 17 (StructType -> STRUCT lcurly FieldDeclList rcurly .)


state 255

    (18) FieldDeclList -> FieldDeclList FieldDecl . SEMICOLON

    SEMICOLON       shift and go to state 279


state 256

    (19) FieldDeclList -> FieldDecl SEMICOLON .

    RCURLY          reduce using rule 19 (FieldDeclList -> FieldDecl SEMICOLON .)
    ID              reduce using rule 19 (FieldDeclList -> FieldDecl SEMICOLON .)


state 257

    (20) FieldDecl -> IdentifierList Type .

    SEMICOLON       reduce using rule 20 (FieldDecl -> IdentifierList Type .)


state 258

    (151) LabeledStmt -> Label COLON Statement .

    RCURLY          reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    SEMICOLON       reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    RETURN          reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    BREAK           reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    CONTINUE        reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    GOTO            reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    IF              reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    CONST           reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    TYPE            reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    VAR             reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    ID              reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    LCURLY          reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    FOR             reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    PLUS            reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    MINUS           reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    NOT             reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    CARET           reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    STAR            reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    AMP             reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    LROUND          reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    MAKE            reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    INT_LIT         reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    FLOAT_LIT       reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    STRING_LIT      reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    BOOL_LIT        reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    CHAR_LIT        reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    NIL             reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    STRUCT          reduce using rule 151 (LabeledStmt -> Label COLON Statement .)
    LSQUARE         reduce using rule 151 (LabeledStmt -> Label COLON Statement .)


state 259

    (181) ReturnStmt -> RETURN ExpressionList SEMICOLON .

    RCURLY          reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    SEMICOLON       reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    RETURN          reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    BREAK           reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    CONTINUE        reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    GOTO            reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    IF              reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    CONST           reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    TYPE            reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    VAR             reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    ID              reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    LCURLY          reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    FOR             reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    PLUS            reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    MINUS           reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    NOT             reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    CARET           reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    STAR            reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    AMP             reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    LROUND          reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    MAKE            reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    INT_LIT         reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    FLOAT_LIT       reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    STRING_LIT      reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    BOOL_LIT        reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    CHAR_LIT        reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    NIL             reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    STRUCT          reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)
    LSQUARE         reduce using rule 181 (ReturnStmt -> RETURN ExpressionList SEMICOLON .)


state 260

    (155) Assignment -> ExpressionList assign_op ExpressionList .
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       reduce using rule 155 (Assignment -> ExpressionList assign_op ExpressionList .)
    LCURLY          reduce using rule 155 (Assignment -> ExpressionList assign_op ExpressionList .)
    COMMA           shift and go to state 148


state 261

    (183) BreakStmt -> BREAK Label SEMICOLON .

    RCURLY          reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    SEMICOLON       reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    RETURN          reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    BREAK           reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    CONTINUE        reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    GOTO            reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    IF              reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    CONST           reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    TYPE            reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    VAR             reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    ID              reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    LCURLY          reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    FOR             reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    PLUS            reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    MINUS           reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    NOT             reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    CARET           reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    STAR            reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    AMP             reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    LROUND          reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    MAKE            reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    INT_LIT         reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    FLOAT_LIT       reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    STRING_LIT      reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    BOOL_LIT        reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    CHAR_LIT        reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    NIL             reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    STRUCT          reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)
    LSQUARE         reduce using rule 183 (BreakStmt -> BREAK Label SEMICOLON .)


state 262

    (185) ContinueStmt -> CONTINUE Label SEMICOLON .

    RCURLY          reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    SEMICOLON       reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    RETURN          reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    BREAK           reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    CONTINUE        reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    GOTO            reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    IF              reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    CONST           reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    TYPE            reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    VAR             reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    ID              reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    LCURLY          reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    FOR             reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    PLUS            reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    MINUS           reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    NOT             reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    CARET           reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    STAR            reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    AMP             reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    LROUND          reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    MAKE            reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    INT_LIT         reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    FLOAT_LIT       reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    STRING_LIT      reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    BOOL_LIT        reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    CHAR_LIT        reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    NIL             reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    STRUCT          reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)
    LSQUARE         reduce using rule 185 (ContinueStmt -> CONTINUE Label SEMICOLON .)


state 263

    (186) GotoStmt -> GOTO Label SEMICOLON .

    RCURLY          reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    SEMICOLON       reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    RETURN          reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    BREAK           reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    CONTINUE        reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    GOTO            reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    IF              reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    CONST           reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    TYPE            reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    VAR             reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    ID              reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    LCURLY          reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    FOR             reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    PLUS            reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    MINUS           reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    NOT             reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    CARET           reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    STAR            reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    AMP             reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    LROUND          reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    MAKE            reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    INT_LIT         reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    FLOAT_LIT       reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    STRING_LIT      reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    BOOL_LIT        reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    CHAR_LIT        reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    NIL             reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    STRUCT          reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)
    LSQUARE         reduce using rule 186 (GotoStmt -> GOTO Label SEMICOLON .)


state 264

    (187) IfStmt -> IF SimpleStmt SEMICOLON . Expression Block
    (189) IfStmt -> IF SimpleStmt SEMICOLON . Expression ElseStmt
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Expression                     shift and go to state 280
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 265

    (188) IfStmt -> IF Expression Block .

    RCURLY          reduce using rule 188 (IfStmt -> IF Expression Block .)
    SEMICOLON       reduce using rule 188 (IfStmt -> IF Expression Block .)
    RETURN          reduce using rule 188 (IfStmt -> IF Expression Block .)
    BREAK           reduce using rule 188 (IfStmt -> IF Expression Block .)
    CONTINUE        reduce using rule 188 (IfStmt -> IF Expression Block .)
    GOTO            reduce using rule 188 (IfStmt -> IF Expression Block .)
    IF              reduce using rule 188 (IfStmt -> IF Expression Block .)
    CONST           reduce using rule 188 (IfStmt -> IF Expression Block .)
    TYPE            reduce using rule 188 (IfStmt -> IF Expression Block .)
    VAR             reduce using rule 188 (IfStmt -> IF Expression Block .)
    ID              reduce using rule 188 (IfStmt -> IF Expression Block .)
    LCURLY          reduce using rule 188 (IfStmt -> IF Expression Block .)
    FOR             reduce using rule 188 (IfStmt -> IF Expression Block .)
    PLUS            reduce using rule 188 (IfStmt -> IF Expression Block .)
    MINUS           reduce using rule 188 (IfStmt -> IF Expression Block .)
    NOT             reduce using rule 188 (IfStmt -> IF Expression Block .)
    CARET           reduce using rule 188 (IfStmt -> IF Expression Block .)
    STAR            reduce using rule 188 (IfStmt -> IF Expression Block .)
    AMP             reduce using rule 188 (IfStmt -> IF Expression Block .)
    LROUND          reduce using rule 188 (IfStmt -> IF Expression Block .)
    MAKE            reduce using rule 188 (IfStmt -> IF Expression Block .)
    INT_LIT         reduce using rule 188 (IfStmt -> IF Expression Block .)
    FLOAT_LIT       reduce using rule 188 (IfStmt -> IF Expression Block .)
    STRING_LIT      reduce using rule 188 (IfStmt -> IF Expression Block .)
    BOOL_LIT        reduce using rule 188 (IfStmt -> IF Expression Block .)
    CHAR_LIT        reduce using rule 188 (IfStmt -> IF Expression Block .)
    NIL             reduce using rule 188 (IfStmt -> IF Expression Block .)
    STRUCT          reduce using rule 188 (IfStmt -> IF Expression Block .)
    LSQUARE         reduce using rule 188 (IfStmt -> IF Expression Block .)


state 266

    (190) IfStmt -> IF Expression ElseStmt .

    RCURLY          reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    SEMICOLON       reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    RETURN          reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    BREAK           reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    CONTINUE        reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    GOTO            reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    IF              reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    CONST           reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    TYPE            reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    VAR             reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    ID              reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    LCURLY          reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    FOR             reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    PLUS            reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    MINUS           reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    NOT             reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    CARET           reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    STAR            reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    AMP             reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    LROUND          reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    MAKE            reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    INT_LIT         reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    FLOAT_LIT       reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    STRING_LIT      reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    BOOL_LIT        reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    CHAR_LIT        reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    NIL             reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    STRUCT          reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)
    LSQUARE         reduce using rule 190 (IfStmt -> IF Expression ElseStmt .)


state 267

    (191) ElseStmt -> ELSE . IfStmt
    (192) ElseStmt -> ELSE . Block
    (187) IfStmt -> . IF SimpleStmt SEMICOLON Expression Block
    (188) IfStmt -> . IF Expression Block
    (189) IfStmt -> . IF SimpleStmt SEMICOLON Expression ElseStmt
    (190) IfStmt -> . IF Expression ElseStmt
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (1) lcurly -> . LCURLY

    IF              shift and go to state 134
    LCURLY          shift and go to state 65

    IfStmt                         shift and go to state 281
    Block                          shift and go to state 282
    lcurly                         shift and go to state 64

state 268

    (167) ForLoop -> FOR InitStmt SEMICOLON . Condition SEMICOLON PostStmt
    (168) ForLoop -> FOR InitStmt SEMICOLON . Condition SEMICOLON
    (169) ForLoop -> FOR InitStmt SEMICOLON . SEMICOLON PostStmt
    (170) ForLoop -> FOR InitStmt SEMICOLON . SEMICOLON
    (179) Condition -> . Expression
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    SEMICOLON       shift and go to state 283
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Condition                      shift and go to state 284
    Expression                     shift and go to state 271
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 269

    (173) ForLoop -> FOR SEMICOLON SEMICOLON . PostStmt
    (174) ForLoop -> FOR SEMICOLON SEMICOLON .
    (178) PostStmt -> . SimpleStmt
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 174 (ForLoop -> FOR SEMICOLON SEMICOLON .)
    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    PostStmt                       shift and go to state 285
    SimpleStmt                     shift and go to state 286
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    Expression                     shift and go to state 135
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 270

    (171) ForLoop -> FOR SEMICOLON Condition . SEMICOLON PostStmt
    (172) ForLoop -> FOR SEMICOLON Condition . SEMICOLON

    SEMICOLON       shift and go to state 287


state 271

    (179) Condition -> Expression .
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    SEMICOLON       reduce using rule 179 (Condition -> Expression .)
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 272

    (175) WhileLoop -> FOR Condition Block .

    LCURLY          reduce using rule 175 (WhileLoop -> FOR Condition Block .)


state 273

    (41) ShortVarDecl -> IdentifierList ASSIGN ExpressionList . SEMICOLON
    (35) ExpressionList -> ExpressionList . COMMA Expression

    SEMICOLON       shift and go to state 288
    COMMA           shift and go to state 148


state 274

    (89) Index -> LSQUARE Expression RSQUARE .

    DOT             reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LSQUARE         reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LROUND          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    OR_OR           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    AMP_AMP         reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    EQ_EQ           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    NOT_EQ          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LT              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LE              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    GT              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    GE              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    PLUS            reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    MINUS           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    OR              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    CARET           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    STAR            reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    DIVIDE          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    MODULO          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LSHIFT          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    RSHIFT          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    AMP             reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    COMMA           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    SEMICOLON       reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    RSQUARE         reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    PLUS_PLUS       reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    MINUS_MINUS     reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    PLUS_EQ         reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    MINUS_EQ        reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    STAR_EQ         reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    DIVIDE_EQ       reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    MODULO_EQ       reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    AMP_EQ          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    OR_EQ           reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    CARET_EQ        reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    EQ              reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    RROUND          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    ELSE            reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    LCURLY          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)
    RCURLY          reduce using rule 89 (Index -> LSQUARE Expression RSQUARE .)


state 275

    (90) Arguments -> LROUND ExpressionList RROUND .

    DOT             reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LSQUARE         reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LROUND          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    OR_OR           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    AMP_AMP         reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    EQ_EQ           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    NOT_EQ          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LT              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LE              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    GT              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    GE              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS            reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    OR              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    CARET           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    STAR            reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    DIVIDE          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    MODULO          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LSHIFT          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    RSHIFT          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    AMP             reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    COMMA           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    SEMICOLON       reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    RSQUARE         reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS_PLUS       reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS_MINUS     reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    PLUS_EQ         reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    MINUS_EQ        reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    STAR_EQ         reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    DIVIDE_EQ       reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    MODULO_EQ       reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    AMP_EQ          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    OR_EQ           reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    CARET_EQ        reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    EQ              reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    RROUND          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    ELSE            reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    LCURLY          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)
    RCURLY          reduce using rule 90 (Arguments -> LROUND ExpressionList RROUND .)


state 276

    (86) MakeExpr -> MAKE LROUND SliceType COMMA . Expression COMMA Expression RROUND
    (87) MakeExpr -> MAKE LROUND SliceType COMMA . Expression RROUND
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    SliceType                      shift and go to state 91
    Expression                     shift and go to state 289
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 277

    (76) LiteralValue -> lcurly ElementList rcurly .

    DOT             reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LSQUARE         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LROUND          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR_OR           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP_AMP         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    EQ_EQ           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    NOT_EQ          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LT              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LE              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    GT              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    GE              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    CARET           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    STAR            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    DIVIDE          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MODULO          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LSHIFT          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RSHIFT          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP             reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    COMMA           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    SEMICOLON       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RSQUARE         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS_PLUS       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS_MINUS     reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    PLUS_EQ         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MINUS_EQ        reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    STAR_EQ         reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    DIVIDE_EQ       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    MODULO_EQ       reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    AMP_EQ          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    OR_EQ           reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    CARET_EQ        reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    EQ              reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RROUND          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    ELSE            reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    LCURLY          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)
    RCURLY          reduce using rule 76 (LiteralValue -> lcurly ElementList rcurly .)


state 278

    (78) ElementList -> ElementList COMMA . Element
    (79) Element -> . Expression
    (80) Element -> . LiteralValue
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (75) LiteralValue -> . lcurly rcurly
    (76) LiteralValue -> . lcurly ElementList rcurly
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (1) lcurly -> . LCURLY
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          shift and go to state 65
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    Element                        shift and go to state 290
    Expression                     shift and go to state 251
    LiteralValue                   shift and go to state 252
    UnaryExpr                      shift and go to state 76
    lcurly                         shift and go to state 177
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 279

    (18) FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .

    RCURLY          reduce using rule 18 (FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .)
    ID              reduce using rule 18 (FieldDeclList -> FieldDeclList FieldDecl SEMICOLON .)


state 280

    (187) IfStmt -> IF SimpleStmt SEMICOLON Expression . Block
    (189) IfStmt -> IF SimpleStmt SEMICOLON Expression . ElseStmt
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression
    (21) Block -> . lcurly StatementList rcurly
    (22) Block -> . lcurly rcurly
    (191) ElseStmt -> . ELSE IfStmt
    (192) ElseStmt -> . ELSE Block
    (1) lcurly -> . LCURLY

    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166
    ELSE            shift and go to state 267
    LCURLY          shift and go to state 65

    Block                          shift and go to state 291
    ElseStmt                       shift and go to state 292
    lcurly                         shift and go to state 64

state 281

    (191) ElseStmt -> ELSE IfStmt .

    RCURLY          reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    SEMICOLON       reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    RETURN          reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    BREAK           reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    CONTINUE        reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    GOTO            reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    IF              reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    CONST           reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    TYPE            reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    VAR             reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    ID              reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    LCURLY          reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    FOR             reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    PLUS            reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    MINUS           reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    NOT             reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    CARET           reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    STAR            reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    AMP             reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    LROUND          reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    MAKE            reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    INT_LIT         reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    FLOAT_LIT       reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    STRING_LIT      reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    BOOL_LIT        reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    CHAR_LIT        reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    NIL             reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    STRUCT          reduce using rule 191 (ElseStmt -> ELSE IfStmt .)
    LSQUARE         reduce using rule 191 (ElseStmt -> ELSE IfStmt .)


state 282

    (192) ElseStmt -> ELSE Block .

    RCURLY          reduce using rule 192 (ElseStmt -> ELSE Block .)
    SEMICOLON       reduce using rule 192 (ElseStmt -> ELSE Block .)
    RETURN          reduce using rule 192 (ElseStmt -> ELSE Block .)
    BREAK           reduce using rule 192 (ElseStmt -> ELSE Block .)
    CONTINUE        reduce using rule 192 (ElseStmt -> ELSE Block .)
    GOTO            reduce using rule 192 (ElseStmt -> ELSE Block .)
    IF              reduce using rule 192 (ElseStmt -> ELSE Block .)
    CONST           reduce using rule 192 (ElseStmt -> ELSE Block .)
    TYPE            reduce using rule 192 (ElseStmt -> ELSE Block .)
    VAR             reduce using rule 192 (ElseStmt -> ELSE Block .)
    ID              reduce using rule 192 (ElseStmt -> ELSE Block .)
    LCURLY          reduce using rule 192 (ElseStmt -> ELSE Block .)
    FOR             reduce using rule 192 (ElseStmt -> ELSE Block .)
    PLUS            reduce using rule 192 (ElseStmt -> ELSE Block .)
    MINUS           reduce using rule 192 (ElseStmt -> ELSE Block .)
    NOT             reduce using rule 192 (ElseStmt -> ELSE Block .)
    CARET           reduce using rule 192 (ElseStmt -> ELSE Block .)
    STAR            reduce using rule 192 (ElseStmt -> ELSE Block .)
    AMP             reduce using rule 192 (ElseStmt -> ELSE Block .)
    LROUND          reduce using rule 192 (ElseStmt -> ELSE Block .)
    MAKE            reduce using rule 192 (ElseStmt -> ELSE Block .)
    INT_LIT         reduce using rule 192 (ElseStmt -> ELSE Block .)
    FLOAT_LIT       reduce using rule 192 (ElseStmt -> ELSE Block .)
    STRING_LIT      reduce using rule 192 (ElseStmt -> ELSE Block .)
    BOOL_LIT        reduce using rule 192 (ElseStmt -> ELSE Block .)
    CHAR_LIT        reduce using rule 192 (ElseStmt -> ELSE Block .)
    NIL             reduce using rule 192 (ElseStmt -> ELSE Block .)
    STRUCT          reduce using rule 192 (ElseStmt -> ELSE Block .)
    LSQUARE         reduce using rule 192 (ElseStmt -> ELSE Block .)


state 283

    (169) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON . PostStmt
    (170) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON .
    (178) PostStmt -> . SimpleStmt
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 170 (ForLoop -> FOR InitStmt SEMICOLON SEMICOLON .)
    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    PostStmt                       shift and go to state 293
    SimpleStmt                     shift and go to state 286
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    Expression                     shift and go to state 135
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 284

    (167) ForLoop -> FOR InitStmt SEMICOLON Condition . SEMICOLON PostStmt
    (168) ForLoop -> FOR InitStmt SEMICOLON Condition . SEMICOLON

    SEMICOLON       shift and go to state 294


state 285

    (173) ForLoop -> FOR SEMICOLON SEMICOLON PostStmt .

    LCURLY          reduce using rule 173 (ForLoop -> FOR SEMICOLON SEMICOLON PostStmt .)


state 286

    (178) PostStmt -> SimpleStmt .

    LCURLY          reduce using rule 178 (PostStmt -> SimpleStmt .)


state 287

    (171) ForLoop -> FOR SEMICOLON Condition SEMICOLON . PostStmt
    (172) ForLoop -> FOR SEMICOLON Condition SEMICOLON .
    (178) PostStmt -> . SimpleStmt
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 172 (ForLoop -> FOR SEMICOLON Condition SEMICOLON .)
    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    PostStmt                       shift and go to state 295
    SimpleStmt                     shift and go to state 286
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    Expression                     shift and go to state 135
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 288

    (41) ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .

    SEMICOLON       reduce using rule 41 (ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .)
    LCURLY          reduce using rule 41 (ShortVarDecl -> IdentifierList ASSIGN ExpressionList SEMICOLON .)


state 289

    (86) MakeExpr -> MAKE LROUND SliceType COMMA Expression . COMMA Expression RROUND
    (87) MakeExpr -> MAKE LROUND SliceType COMMA Expression . RROUND
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    COMMA           shift and go to state 296
    RROUND          shift and go to state 297
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 290

    (78) ElementList -> ElementList COMMA Element .

    COMMA           reduce using rule 78 (ElementList -> ElementList COMMA Element .)
    RCURLY          reduce using rule 78 (ElementList -> ElementList COMMA Element .)


state 291

    (187) IfStmt -> IF SimpleStmt SEMICOLON Expression Block .

    RCURLY          reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    SEMICOLON       reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    RETURN          reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    BREAK           reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    CONTINUE        reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    GOTO            reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    IF              reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    CONST           reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    TYPE            reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    VAR             reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    ID              reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    LCURLY          reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    FOR             reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    PLUS            reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    MINUS           reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    NOT             reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    CARET           reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    STAR            reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    AMP             reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    LROUND          reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    MAKE            reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    INT_LIT         reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    FLOAT_LIT       reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    STRING_LIT      reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    BOOL_LIT        reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    CHAR_LIT        reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    NIL             reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    STRUCT          reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)
    LSQUARE         reduce using rule 187 (IfStmt -> IF SimpleStmt SEMICOLON Expression Block .)


state 292

    (189) IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .

    RCURLY          reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    SEMICOLON       reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    RETURN          reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    BREAK           reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    CONTINUE        reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    GOTO            reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    IF              reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    CONST           reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    TYPE            reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    VAR             reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    ID              reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    LCURLY          reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    FOR             reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    PLUS            reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    MINUS           reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    NOT             reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    CARET           reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    STAR            reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    AMP             reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    LROUND          reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    MAKE            reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    INT_LIT         reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    FLOAT_LIT       reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    STRING_LIT      reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    BOOL_LIT        reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    CHAR_LIT        reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    NIL             reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    STRUCT          reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)
    LSQUARE         reduce using rule 189 (IfStmt -> IF SimpleStmt SEMICOLON Expression ElseStmt .)


state 293

    (169) ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt .

    LCURLY          reduce using rule 169 (ForLoop -> FOR InitStmt SEMICOLON SEMICOLON PostStmt .)


state 294

    (167) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON . PostStmt
    (168) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON .
    (178) PostStmt -> . SimpleStmt
    (146) SimpleStmt -> . ExpressionStmt
    (147) SimpleStmt -> . IncDecStmt
    (148) SimpleStmt -> . Assignment
    (149) SimpleStmt -> . ShortVarDecl
    (150) ExpressionStmt -> . Expression
    (153) IncDecStmt -> . Expression PLUS_PLUS
    (154) IncDecStmt -> . Expression MINUS_MINUS
    (155) Assignment -> . ExpressionList assign_op ExpressionList
    (41) ShortVarDecl -> . IdentifierList ASSIGN ExpressionList SEMICOLON
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (35) ExpressionList -> . ExpressionList COMMA Expression
    (36) ExpressionList -> . Expression
    (33) IdentifierList -> . IdentifierList COMMA ID
    (34) IdentifierList -> . ID
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    LCURLY          reduce using rule 168 (ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON .)
    ID              shift and go to state 209
    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    PostStmt                       shift and go to state 298
    SimpleStmt                     shift and go to state 286
    ExpressionStmt                 shift and go to state 138
    IncDecStmt                     shift and go to state 139
    Assignment                     shift and go to state 140
    ShortVarDecl                   shift and go to state 141
    Expression                     shift and go to state 135
    ExpressionList                 shift and go to state 130
    IdentifierList                 shift and go to state 144
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    SliceType                      shift and go to state 91
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 295

    (171) ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt .

    LCURLY          reduce using rule 171 (ForLoop -> FOR SEMICOLON Condition SEMICOLON PostStmt .)


state 296

    (86) MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA . Expression RROUND
    (92) Expression -> . UnaryExpr
    (93) Expression -> . Expression OR_OR Expression
    (94) Expression -> . Expression AMP_AMP Expression
    (95) Expression -> . Expression EQ_EQ Expression
    (96) Expression -> . Expression NOT_EQ Expression
    (97) Expression -> . Expression LT Expression
    (98) Expression -> . Expression LE Expression
    (99) Expression -> . Expression GT Expression
    (100) Expression -> . Expression GE Expression
    (101) Expression -> . Expression PLUS Expression
    (102) Expression -> . Expression MINUS Expression
    (103) Expression -> . Expression OR Expression
    (104) Expression -> . Expression CARET Expression
    (105) Expression -> . Expression STAR Expression
    (106) Expression -> . Expression DIVIDE Expression
    (107) Expression -> . Expression MODULO Expression
    (108) Expression -> . Expression LSHIFT Expression
    (109) Expression -> . Expression RSHIFT Expression
    (110) Expression -> . Expression AMP Expression
    (111) UnaryExpr -> . PrimaryExpr
    (112) UnaryExpr -> . unary_op UnaryExpr
    (81) PrimaryExpr -> . Operand
    (82) PrimaryExpr -> . PrimaryExpr Selector
    (83) PrimaryExpr -> . PrimaryExpr Index
    (84) PrimaryExpr -> . PrimaryExpr Arguments
    (85) PrimaryExpr -> . MakeExpr
    (129) unary_op -> . PLUS
    (130) unary_op -> . MINUS
    (131) unary_op -> . NOT
    (132) unary_op -> . CARET
    (133) unary_op -> . STAR
    (134) unary_op -> . AMP
    (58) Operand -> . Literal
    (59) Operand -> . OperandName
    (60) Operand -> . LROUND Expression RROUND
    (86) MakeExpr -> . MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND
    (87) MakeExpr -> . MAKE LROUND SliceType COMMA Expression RROUND
    (61) Literal -> . BasicLit
    (62) Literal -> . CompositeLit
    (69) OperandName -> . ID
    (63) BasicLit -> . INT_LIT
    (64) BasicLit -> . FLOAT_LIT
    (65) BasicLit -> . STRING_LIT
    (66) BasicLit -> . BOOL_LIT
    (67) BasicLit -> . CHAR_LIT
    (68) BasicLit -> . NIL
    (70) CompositeLit -> . LiteralType LiteralValue
    (71) LiteralType -> . StructType
    (72) LiteralType -> . ArrayType
    (73) LiteralType -> . SliceType
    (74) LiteralType -> . ID
    (17) StructType -> . STRUCT lcurly FieldDeclList rcurly
    (11) ArrayType -> . LSQUARE ArrayLength RSQUARE ElementType
    (13) SliceType -> . LSQUARE RSQUARE ElementType

    PLUS            shift and go to state 77
    MINUS           shift and go to state 78
    NOT             shift and go to state 86
    CARET           shift and go to state 79
    STAR            shift and go to state 80
    AMP             shift and go to state 81
    LROUND          shift and go to state 89
    MAKE            shift and go to state 90
    ID              shift and go to state 94
    INT_LIT         shift and go to state 95
    FLOAT_LIT       shift and go to state 96
    STRING_LIT      shift and go to state 97
    BOOL_LIT        shift and go to state 98
    CHAR_LIT        shift and go to state 99
    NIL             shift and go to state 100
    STRUCT          shift and go to state 57
    LSQUARE         shift and go to state 56

    SliceType                      shift and go to state 91
    Expression                     shift and go to state 299
    UnaryExpr                      shift and go to state 76
    PrimaryExpr                    shift and go to state 82
    unary_op                       shift and go to state 83
    Operand                        shift and go to state 84
    MakeExpr                       shift and go to state 85
    Literal                        shift and go to state 87
    OperandName                    shift and go to state 88
    BasicLit                       shift and go to state 92
    CompositeLit                   shift and go to state 93
    LiteralType                    shift and go to state 101
    StructType                     shift and go to state 102
    ArrayType                      shift and go to state 103

state 297

    (87) MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .

    DOT             reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LSQUARE         reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LROUND          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    OR_OR           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    AMP_AMP         reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    EQ_EQ           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    NOT_EQ          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LT              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LE              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    GT              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    GE              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    PLUS            reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    MINUS           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    OR              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    CARET           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    STAR            reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    DIVIDE          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    MODULO          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LSHIFT          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    RSHIFT          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    AMP             reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    COMMA           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    SEMICOLON       reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    RSQUARE         reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    PLUS_PLUS       reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    MINUS_MINUS     reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    PLUS_EQ         reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    MINUS_EQ        reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    STAR_EQ         reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    DIVIDE_EQ       reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    MODULO_EQ       reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    AMP_EQ          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    OR_EQ           reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    CARET_EQ        reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    EQ              reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    RROUND          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    ELSE            reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    LCURLY          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)
    RCURLY          reduce using rule 87 (MakeExpr -> MAKE LROUND SliceType COMMA Expression RROUND .)


state 298

    (167) ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt .

    LCURLY          reduce using rule 167 (ForLoop -> FOR InitStmt SEMICOLON Condition SEMICOLON PostStmt .)


state 299

    (86) MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression . RROUND
    (93) Expression -> Expression . OR_OR Expression
    (94) Expression -> Expression . AMP_AMP Expression
    (95) Expression -> Expression . EQ_EQ Expression
    (96) Expression -> Expression . NOT_EQ Expression
    (97) Expression -> Expression . LT Expression
    (98) Expression -> Expression . LE Expression
    (99) Expression -> Expression . GT Expression
    (100) Expression -> Expression . GE Expression
    (101) Expression -> Expression . PLUS Expression
    (102) Expression -> Expression . MINUS Expression
    (103) Expression -> Expression . OR Expression
    (104) Expression -> Expression . CARET Expression
    (105) Expression -> Expression . STAR Expression
    (106) Expression -> Expression . DIVIDE Expression
    (107) Expression -> Expression . MODULO Expression
    (108) Expression -> Expression . LSHIFT Expression
    (109) Expression -> Expression . RSHIFT Expression
    (110) Expression -> Expression . AMP Expression

    RROUND          shift and go to state 300
    OR_OR           shift and go to state 149
    AMP_AMP         shift and go to state 150
    EQ_EQ           shift and go to state 151
    NOT_EQ          shift and go to state 152
    LT              shift and go to state 153
    LE              shift and go to state 154
    GT              shift and go to state 155
    GE              shift and go to state 156
    PLUS            shift and go to state 157
    MINUS           shift and go to state 158
    OR              shift and go to state 159
    CARET           shift and go to state 160
    STAR            shift and go to state 161
    DIVIDE          shift and go to state 162
    MODULO          shift and go to state 163
    LSHIFT          shift and go to state 164
    RSHIFT          shift and go to state 165
    AMP             shift and go to state 166


state 300

    (86) MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .

    DOT             reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LSQUARE         reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LROUND          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    OR_OR           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    AMP_AMP         reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    EQ_EQ           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    NOT_EQ          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LT              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LE              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    GT              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    GE              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    PLUS            reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    MINUS           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    OR              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    CARET           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    STAR            reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    DIVIDE          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    MODULO          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LSHIFT          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    RSHIFT          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    AMP             reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    COMMA           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    SEMICOLON       reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    RSQUARE         reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    PLUS_PLUS       reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    MINUS_MINUS     reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    PLUS_EQ         reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    MINUS_EQ        reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    STAR_EQ         reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    DIVIDE_EQ       reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    MODULO_EQ       reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    AMP_EQ          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    OR_EQ           reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    CARET_EQ        reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    EQ              reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    RROUND          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    ELSE            reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    LCURLY          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)
    RCURLY          reduce using rule 86 (MakeExpr -> MAKE LROUND SliceType COMMA Expression COMMA Expression RROUND .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 94 resolved using rule (OperandName -> ID)
WARNING: rejected rule (LiteralType -> ID) in state 94
WARNING: reduce/reduce conflict in state 142 resolved using rule (IdentifierList -> ID)
WARNING: rejected rule (OperandName -> ID) in state 142
WARNING: reduce/reduce conflict in state 209 resolved using rule (IdentifierList -> ID)
WARNING: rejected rule (OperandName -> ID) in state 209
WARNING: reduce/reduce conflict in state 209 resolved using rule (OperandName -> ID)
WARNING: rejected rule (LiteralType -> ID) in state 209
