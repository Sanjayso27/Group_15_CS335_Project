Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    AND_NOT
    CASE
    DEFAULT
    DOUBLE_QUOTES
    MAKE
    NEWLINE
    NIL
    SINGLE_QUOTES
    SWITCH

Grammar

Rule 0     S' -> start
Rule 1     start -> pkg_stmt top_lvl_stmt_list
Rule 2     pkg_stmt -> PACKAGE IDENTIFIER
Rule 3     top_lvl_stmt_list -> top_lvl_stmt
Rule 4     top_lvl_stmt_list -> top_lvl_stmt top_lvl_stmt_list
Rule 5     top_lvl_stmt -> imp_stmt
Rule 6     top_lvl_stmt -> struct_decl
Rule 7     top_lvl_stmt -> var_decl
Rule 8     top_lvl_stmt -> func_decl
Rule 9     top_lvl_stmt -> method_decl
Rule 10    imp_list -> STRING_LIT imp_list
Rule 11    imp_list -> STRING_LIT
Rule 12    imp_stmt -> IMPORT STRING_LIT
Rule 13    imp_stmt -> IMPORT LROUND imp_list RROUND
Rule 14    arr_type -> LSQUARE INT_LIT RSQUARE arr_type
Rule 15    arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE
Rule 16    slc_type -> LSQUARE RSQUARE slc_type
Rule 17    slc_type -> LSQUARE RSQUARE DATA_TYPE
Rule 18    ptr_type -> STAR ptr_type
Rule 19    ptr_type -> STAR DATA_TYPE
Rule 20    type -> DATA_TYPE
Rule 21    type -> arr_type
Rule 22    type -> slc_type
Rule 23    type -> ptr_type
Rule 24    var_decl -> VAR IDENTIFIER type
Rule 25    var_decl -> VAR IDENTIFIER type EQ expression
Rule 26    var_decl -> VAR IDENTIFIER ASSIGN expression
Rule 27    var_decl -> CONST IDENTIFIER type EQ expression
Rule 28    var_decl -> CONST IDENTIFIER ASSIGN expression
Rule 29    struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY
Rule 30    var_decl_list -> IDENTIFIER type var_decl_list
Rule 31    var_decl_list -> IDENTIFIER type
Rule 32    block -> LCURLY stmt_list RCURLY
Rule 33    stmt_list -> stmt stmt_list
Rule 34    stmt_list -> stmt
Rule 35    stmt -> var_decl
Rule 36    stmt -> return_stmt
Rule 37    stmt -> block
Rule 38    stmt -> selection_stmt
Rule 39    stmt -> iteration_stmt
Rule 40    stmt -> jump_stmt
Rule 41    stmt -> label_stmt
Rule 42    stmt -> expression_stmt
Rule 43    stmt -> expression
Rule 44    return_stmt -> RETURN argument_expression_list
Rule 45    expression_stmt -> SEMICOLON
Rule 46    expression_stmt -> expression SEMICOLON
Rule 47    selection_stmt -> IF expression block
Rule 48    selection_stmt -> IF expression block ELSE block
Rule 49    selection_stmt -> IF expression block ELSE selection_stmt
Rule 50    iteration_stmt -> FOR block
Rule 51    iteration_stmt -> FOR expression block
Rule 52    iteration_stmt -> FOR expression_stmt expression_stmt expression block
Rule 53    jump_stmt -> CONTINUE
Rule 54    jump_stmt -> BREAK
Rule 55    jump_stmt -> GOTO IDENTIFIER
Rule 56    label_stmt -> IDENTIFIER COLON stmt
Rule 57    func_decl -> FUNC IDENTIFIER signature block
Rule 58    func_decl -> FUNC IDENTIFIER signature
Rule 59    signature -> params result
Rule 60    signature -> params
Rule 61    params -> LROUND param_list RROUND
Rule 62    params -> LROUND RROUND
Rule 63    param_list -> type
Rule 64    param_list -> identifier_list type
Rule 65    param_list -> param_list COMMA identifier_list type
Rule 66    identifier_list -> IDENTIFIER
Rule 67    identifier_list -> identifier_list COMMA IDENTIFIER
Rule 68    result -> type
Rule 69    method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature
Rule 70    method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block
Rule 71    primary_expression -> IDENTIFIER
Rule 72    primary_expression -> lit_operand
Rule 73    primary_expression -> LROUND expression RROUND
Rule 74    postfix_expression -> primary_expression
Rule 75    postfix_expression -> postfix_expression LSQUARE expression RSQUARE
Rule 76    postfix_expression -> postfix_expression LROUND RROUND
Rule 77    postfix_expression -> postfix_expression LROUND argument_expression_list RROUND
Rule 78    postfix_expression -> postfix_expression DOT IDENTIFIER
Rule 79    postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND
Rule 80    postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
Rule 81    postfix_expression -> postfix_expression PLUS_PLUS
Rule 82    postfix_expression -> postfix_expression MINUS_MINUS
Rule 83    argument_expression_list -> assignment_expression
Rule 84    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 85    unary_expression -> postfix_expression
Rule 86    unary_expression -> PLUS_PLUS postfix_expression
Rule 87    unary_expression -> MINUS_MINUS postfix_expression
Rule 88    unary_expression -> unary_operator postfix_expression
Rule 89    unary_operator -> AMP
Rule 90    unary_operator -> STAR
Rule 91    unary_operator -> PLUS
Rule 92    unary_operator -> MINUS
Rule 93    unary_operator -> NOT
Rule 94    multiplicative_expression -> unary_expression
Rule 95    multiplicative_expression -> multiplicative_expression STAR unary_expression
Rule 96    multiplicative_expression -> multiplicative_expression DIVIDE unary_expression
Rule 97    multiplicative_expression -> multiplicative_expression MODULO unary_expression
Rule 98    additive_expression -> multiplicative_expression
Rule 99    additive_expression -> additive_expression PLUS multiplicative_expression
Rule 100   additive_expression -> additive_expression MINUS multiplicative_expression
Rule 101   shift_expression -> additive_expression
Rule 102   shift_expression -> shift_expression LSHIFT additive_expression
Rule 103   shift_expression -> shift_expression RSHIFT additive_expression
Rule 104   relational_expression -> shift_expression
Rule 105   relational_expression -> relational_expression LT shift_expression
Rule 106   relational_expression -> relational_expression GT shift_expression
Rule 107   relational_expression -> relational_expression LT_EQ shift_expression
Rule 108   relational_expression -> relational_expression GT_EQ shift_expression
Rule 109   equality_expression -> relational_expression
Rule 110   equality_expression -> equality_expression EQ_EQ relational_expression
Rule 111   equality_expression -> equality_expression NOT_EQ relational_expression
Rule 112   and_expression -> equality_expression
Rule 113   and_expression -> and_expression AMP equality_expression
Rule 114   exclusive_or_expression -> and_expression
Rule 115   exclusive_or_expression -> exclusive_or_expression CARET and_expression
Rule 116   inclusive_or_expression -> exclusive_or_expression
Rule 117   inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression
Rule 118   logical_and_expression -> inclusive_or_expression
Rule 119   logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression
Rule 120   logical_or_expression -> logical_and_expression
Rule 121   logical_or_expression -> logical_or_expression OR_OR logical_and_expression
Rule 122   assignment_expression -> logical_or_expression
Rule 123   assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 124   assignment_operator -> PLUS_EQ
Rule 125   assignment_operator -> MINUS_EQ
Rule 126   assignment_operator -> STAR_EQ
Rule 127   assignment_operator -> DIVIDE_EQ
Rule 128   assignment_operator -> MODULO_EQ
Rule 129   assignment_operator -> AMP_EQ
Rule 130   assignment_operator -> OR_EQ
Rule 131   assignment_operator -> CARET_EQ
Rule 132   assignment_operator -> EQ
Rule 133   assignment_operator -> ASSIGN
Rule 134   expression -> assignment_expression
Rule 135   lit_operand -> INT_LIT
Rule 136   lit_operand -> FLOAT_LIT
Rule 137   lit_operand -> STRING_LIT
Rule 138   lit_operand -> BOOL_LIT

Terminals, with rules where they appear

AMP                  : 89 113
AMP_AMP              : 119
AMP_EQ               : 129
AND_NOT              : 
ASSIGN               : 26 28 133
BOOL_LIT             : 138
BREAK                : 54
CARET                : 115
CARET_EQ             : 131
CASE                 : 
COLON                : 56
COMMA                : 65 67 84
CONST                : 27 28
CONTINUE             : 53
DATA_TYPE            : 15 17 19 20
DEFAULT              : 
DIVIDE               : 96
DIVIDE_EQ            : 127
DOT                  : 78 79 80
DOUBLE_QUOTES        : 
ELSE                 : 48 49
EQ                   : 25 27 132
EQ_EQ                : 110
FLOAT_LIT            : 136
FOR                  : 50 51 52
FUNC                 : 57 58 69 70
GOTO                 : 55
GT                   : 106
GT_EQ                : 108
IDENTIFIER           : 2 24 25 26 27 28 29 30 31 55 56 57 58 66 67 69 69 70 70 71 78 79 80
IF                   : 47 48 49
IMPORT               : 12 13
INT_LIT              : 14 15 135
LCURLY               : 29 32
LROUND               : 13 61 62 69 70 73 76 77 79 80
LSHIFT               : 102
LSQUARE              : 14 15 16 17 75
LT                   : 105
LT_EQ                : 107
MAKE                 : 
MINUS                : 92 100
MINUS_EQ             : 125
MINUS_MINUS          : 82 87
MODULO               : 97
MODULO_EQ            : 128
NEWLINE              : 
NIL                  : 
NOT                  : 93
NOT_EQ               : 111
OR                   : 117
OR_EQ                : 130
OR_OR                : 121
PACKAGE              : 2
PLUS                 : 91 99
PLUS_EQ              : 124
PLUS_PLUS            : 81 86
RCURLY               : 29 32
RETURN               : 44
RROUND               : 13 61 62 69 70 73 76 77 79 80
RSHIFT               : 103
RSQUARE              : 14 15 16 17 75
SEMICOLON            : 45 46
SINGLE_QUOTES        : 
STAR                 : 18 19 90 95
STAR_EQ              : 126
STRING_LIT           : 10 11 12 137
STRUCT               : 29
SWITCH               : 
TYPE                 : 29
VAR                  : 24 25 26
error                : 

Nonterminals, with rules where they appear

additive_expression  : 99 100 101 102 103
and_expression       : 113 114 115
argument_expression_list : 44 77 80 84
arr_type             : 14 21
assignment_expression : 83 84 123 134
assignment_operator  : 123
block                : 37 47 48 48 49 50 51 52 57 70
equality_expression  : 110 111 112 113
exclusive_or_expression : 115 116 117
expression           : 25 26 27 28 43 46 47 48 49 51 52 73 75
expression_stmt      : 42 52 52
func_decl            : 8
identifier_list      : 64 65 67
imp_list             : 10 13
imp_stmt             : 5
inclusive_or_expression : 117 118 119
iteration_stmt       : 39
jump_stmt            : 40
label_stmt           : 41
lit_operand          : 72
logical_and_expression : 119 120 121
logical_or_expression : 121 122
method_decl          : 9
multiplicative_expression : 95 96 97 98 99 100
param_list           : 61 65
params               : 59 60
pkg_stmt             : 1
postfix_expression   : 75 76 77 78 79 80 81 82 85 86 87 88
primary_expression   : 74
ptr_type             : 18 23
relational_expression : 105 106 107 108 109 110 111
result               : 59
return_stmt          : 36
selection_stmt       : 38 49
shift_expression     : 102 103 104 105 106 107 108
signature            : 57 58 69 70
slc_type             : 16 22
start                : 0
stmt                 : 33 34 56
stmt_list            : 32 33
struct_decl          : 6
top_lvl_stmt         : 3 4
top_lvl_stmt_list    : 1 4
type                 : 24 25 27 30 31 63 64 65 68 69 70
unary_expression     : 94 95 96 97 123
unary_operator       : 88
var_decl             : 7 35
var_decl_list        : 29 30

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . pkg_stmt top_lvl_stmt_list
    (2) pkg_stmt -> . PACKAGE IDENTIFIER

    PACKAGE         shift and go to state 3

    start                          shift and go to state 1
    pkg_stmt                       shift and go to state 2

state 1

    (0) S' -> start .



state 2

    (1) start -> pkg_stmt . top_lvl_stmt_list
    (3) top_lvl_stmt_list -> . top_lvl_stmt
    (4) top_lvl_stmt_list -> . top_lvl_stmt top_lvl_stmt_list
    (5) top_lvl_stmt -> . imp_stmt
    (6) top_lvl_stmt -> . struct_decl
    (7) top_lvl_stmt -> . var_decl
    (8) top_lvl_stmt -> . func_decl
    (9) top_lvl_stmt -> . method_decl
    (12) imp_stmt -> . IMPORT STRING_LIT
    (13) imp_stmt -> . IMPORT LROUND imp_list RROUND
    (29) struct_decl -> . TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY
    (24) var_decl -> . VAR IDENTIFIER type
    (25) var_decl -> . VAR IDENTIFIER type EQ expression
    (26) var_decl -> . VAR IDENTIFIER ASSIGN expression
    (27) var_decl -> . CONST IDENTIFIER type EQ expression
    (28) var_decl -> . CONST IDENTIFIER ASSIGN expression
    (57) func_decl -> . FUNC IDENTIFIER signature block
    (58) func_decl -> . FUNC IDENTIFIER signature
    (69) method_decl -> . FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature
    (70) method_decl -> . FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block

    IMPORT          shift and go to state 11
    TYPE            shift and go to state 12
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15

    top_lvl_stmt_list              shift and go to state 4
    top_lvl_stmt                   shift and go to state 5
    imp_stmt                       shift and go to state 6
    struct_decl                    shift and go to state 7
    var_decl                       shift and go to state 8
    func_decl                      shift and go to state 9
    method_decl                    shift and go to state 10

state 3

    (2) pkg_stmt -> PACKAGE . IDENTIFIER

    IDENTIFIER      shift and go to state 16


state 4

    (1) start -> pkg_stmt top_lvl_stmt_list .

    $end            reduce using rule 1 (start -> pkg_stmt top_lvl_stmt_list .)


state 5

    (3) top_lvl_stmt_list -> top_lvl_stmt .
    (4) top_lvl_stmt_list -> top_lvl_stmt . top_lvl_stmt_list
    (3) top_lvl_stmt_list -> . top_lvl_stmt
    (4) top_lvl_stmt_list -> . top_lvl_stmt top_lvl_stmt_list
    (5) top_lvl_stmt -> . imp_stmt
    (6) top_lvl_stmt -> . struct_decl
    (7) top_lvl_stmt -> . var_decl
    (8) top_lvl_stmt -> . func_decl
    (9) top_lvl_stmt -> . method_decl
    (12) imp_stmt -> . IMPORT STRING_LIT
    (13) imp_stmt -> . IMPORT LROUND imp_list RROUND
    (29) struct_decl -> . TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY
    (24) var_decl -> . VAR IDENTIFIER type
    (25) var_decl -> . VAR IDENTIFIER type EQ expression
    (26) var_decl -> . VAR IDENTIFIER ASSIGN expression
    (27) var_decl -> . CONST IDENTIFIER type EQ expression
    (28) var_decl -> . CONST IDENTIFIER ASSIGN expression
    (57) func_decl -> . FUNC IDENTIFIER signature block
    (58) func_decl -> . FUNC IDENTIFIER signature
    (69) method_decl -> . FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature
    (70) method_decl -> . FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block

    $end            reduce using rule 3 (top_lvl_stmt_list -> top_lvl_stmt .)
    IMPORT          shift and go to state 11
    TYPE            shift and go to state 12
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    FUNC            shift and go to state 15

    top_lvl_stmt                   shift and go to state 5
    top_lvl_stmt_list              shift and go to state 17
    imp_stmt                       shift and go to state 6
    struct_decl                    shift and go to state 7
    var_decl                       shift and go to state 8
    func_decl                      shift and go to state 9
    method_decl                    shift and go to state 10

state 6

    (5) top_lvl_stmt -> imp_stmt .

    IMPORT          reduce using rule 5 (top_lvl_stmt -> imp_stmt .)
    TYPE            reduce using rule 5 (top_lvl_stmt -> imp_stmt .)
    VAR             reduce using rule 5 (top_lvl_stmt -> imp_stmt .)
    CONST           reduce using rule 5 (top_lvl_stmt -> imp_stmt .)
    FUNC            reduce using rule 5 (top_lvl_stmt -> imp_stmt .)
    $end            reduce using rule 5 (top_lvl_stmt -> imp_stmt .)


state 7

    (6) top_lvl_stmt -> struct_decl .

    IMPORT          reduce using rule 6 (top_lvl_stmt -> struct_decl .)
    TYPE            reduce using rule 6 (top_lvl_stmt -> struct_decl .)
    VAR             reduce using rule 6 (top_lvl_stmt -> struct_decl .)
    CONST           reduce using rule 6 (top_lvl_stmt -> struct_decl .)
    FUNC            reduce using rule 6 (top_lvl_stmt -> struct_decl .)
    $end            reduce using rule 6 (top_lvl_stmt -> struct_decl .)


state 8

    (7) top_lvl_stmt -> var_decl .

    IMPORT          reduce using rule 7 (top_lvl_stmt -> var_decl .)
    TYPE            reduce using rule 7 (top_lvl_stmt -> var_decl .)
    VAR             reduce using rule 7 (top_lvl_stmt -> var_decl .)
    CONST           reduce using rule 7 (top_lvl_stmt -> var_decl .)
    FUNC            reduce using rule 7 (top_lvl_stmt -> var_decl .)
    $end            reduce using rule 7 (top_lvl_stmt -> var_decl .)


state 9

    (8) top_lvl_stmt -> func_decl .

    IMPORT          reduce using rule 8 (top_lvl_stmt -> func_decl .)
    TYPE            reduce using rule 8 (top_lvl_stmt -> func_decl .)
    VAR             reduce using rule 8 (top_lvl_stmt -> func_decl .)
    CONST           reduce using rule 8 (top_lvl_stmt -> func_decl .)
    FUNC            reduce using rule 8 (top_lvl_stmt -> func_decl .)
    $end            reduce using rule 8 (top_lvl_stmt -> func_decl .)


state 10

    (9) top_lvl_stmt -> method_decl .

    IMPORT          reduce using rule 9 (top_lvl_stmt -> method_decl .)
    TYPE            reduce using rule 9 (top_lvl_stmt -> method_decl .)
    VAR             reduce using rule 9 (top_lvl_stmt -> method_decl .)
    CONST           reduce using rule 9 (top_lvl_stmt -> method_decl .)
    FUNC            reduce using rule 9 (top_lvl_stmt -> method_decl .)
    $end            reduce using rule 9 (top_lvl_stmt -> method_decl .)


state 11

    (12) imp_stmt -> IMPORT . STRING_LIT
    (13) imp_stmt -> IMPORT . LROUND imp_list RROUND

    STRING_LIT      shift and go to state 18
    LROUND          shift and go to state 19


state 12

    (29) struct_decl -> TYPE . IDENTIFIER STRUCT LCURLY var_decl_list RCURLY

    IDENTIFIER      shift and go to state 20


state 13

    (24) var_decl -> VAR . IDENTIFIER type
    (25) var_decl -> VAR . IDENTIFIER type EQ expression
    (26) var_decl -> VAR . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 21


state 14

    (27) var_decl -> CONST . IDENTIFIER type EQ expression
    (28) var_decl -> CONST . IDENTIFIER ASSIGN expression

    IDENTIFIER      shift and go to state 22


state 15

    (57) func_decl -> FUNC . IDENTIFIER signature block
    (58) func_decl -> FUNC . IDENTIFIER signature
    (69) method_decl -> FUNC . LROUND IDENTIFIER type RROUND IDENTIFIER signature
    (70) method_decl -> FUNC . LROUND IDENTIFIER type RROUND IDENTIFIER signature block

    IDENTIFIER      shift and go to state 23
    LROUND          shift and go to state 24


state 16

    (2) pkg_stmt -> PACKAGE IDENTIFIER .

    IMPORT          reduce using rule 2 (pkg_stmt -> PACKAGE IDENTIFIER .)
    TYPE            reduce using rule 2 (pkg_stmt -> PACKAGE IDENTIFIER .)
    VAR             reduce using rule 2 (pkg_stmt -> PACKAGE IDENTIFIER .)
    CONST           reduce using rule 2 (pkg_stmt -> PACKAGE IDENTIFIER .)
    FUNC            reduce using rule 2 (pkg_stmt -> PACKAGE IDENTIFIER .)


state 17

    (4) top_lvl_stmt_list -> top_lvl_stmt top_lvl_stmt_list .

    $end            reduce using rule 4 (top_lvl_stmt_list -> top_lvl_stmt top_lvl_stmt_list .)


state 18

    (12) imp_stmt -> IMPORT STRING_LIT .

    IMPORT          reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)
    TYPE            reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)
    VAR             reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)
    CONST           reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)
    FUNC            reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)
    $end            reduce using rule 12 (imp_stmt -> IMPORT STRING_LIT .)


state 19

    (13) imp_stmt -> IMPORT LROUND . imp_list RROUND
    (10) imp_list -> . STRING_LIT imp_list
    (11) imp_list -> . STRING_LIT

    STRING_LIT      shift and go to state 26

    imp_list                       shift and go to state 25

state 20

    (29) struct_decl -> TYPE IDENTIFIER . STRUCT LCURLY var_decl_list RCURLY

    STRUCT          shift and go to state 27


state 21

    (24) var_decl -> VAR IDENTIFIER . type
    (25) var_decl -> VAR IDENTIFIER . type EQ expression
    (26) var_decl -> VAR IDENTIFIER . ASSIGN expression
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    ASSIGN          shift and go to state 29
    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 28
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 22

    (27) var_decl -> CONST IDENTIFIER . type EQ expression
    (28) var_decl -> CONST IDENTIFIER . ASSIGN expression
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    ASSIGN          shift and go to state 37
    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 36
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 23

    (57) func_decl -> FUNC IDENTIFIER . signature block
    (58) func_decl -> FUNC IDENTIFIER . signature
    (59) signature -> . params result
    (60) signature -> . params
    (61) params -> . LROUND param_list RROUND
    (62) params -> . LROUND RROUND

    LROUND          shift and go to state 40

    signature                      shift and go to state 38
    params                         shift and go to state 39

state 24

    (69) method_decl -> FUNC LROUND . IDENTIFIER type RROUND IDENTIFIER signature
    (70) method_decl -> FUNC LROUND . IDENTIFIER type RROUND IDENTIFIER signature block

    IDENTIFIER      shift and go to state 41


state 25

    (13) imp_stmt -> IMPORT LROUND imp_list . RROUND

    RROUND          shift and go to state 42


state 26

    (10) imp_list -> STRING_LIT . imp_list
    (11) imp_list -> STRING_LIT .
    (10) imp_list -> . STRING_LIT imp_list
    (11) imp_list -> . STRING_LIT

    RROUND          reduce using rule 11 (imp_list -> STRING_LIT .)
    STRING_LIT      shift and go to state 26

    imp_list                       shift and go to state 43

state 27

    (29) struct_decl -> TYPE IDENTIFIER STRUCT . LCURLY var_decl_list RCURLY

    LCURLY          shift and go to state 44


state 28

    (24) var_decl -> VAR IDENTIFIER type .
    (25) var_decl -> VAR IDENTIFIER type . EQ expression

    IMPORT          reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    TYPE            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    VAR             reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    CONST           reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    FUNC            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    $end            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    RETURN          reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    LCURLY          reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    IF              reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    FOR             reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    CONTINUE        reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    BREAK           reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    GOTO            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    IDENTIFIER      reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    SEMICOLON       reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    PLUS_PLUS       reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    MINUS_MINUS     reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    AMP             reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    STAR            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    PLUS            reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    MINUS           reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    NOT             reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    LROUND          reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    INT_LIT         reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    FLOAT_LIT       reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    STRING_LIT      reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    BOOL_LIT        reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    RCURLY          reduce using rule 24 (var_decl -> VAR IDENTIFIER type .)
    EQ              shift and go to state 45


state 29

    (26) var_decl -> VAR IDENTIFIER ASSIGN . expression
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 47
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 30

    (20) type -> DATA_TYPE .

    EQ              reduce using rule 20 (type -> DATA_TYPE .)
    IMPORT          reduce using rule 20 (type -> DATA_TYPE .)
    TYPE            reduce using rule 20 (type -> DATA_TYPE .)
    VAR             reduce using rule 20 (type -> DATA_TYPE .)
    CONST           reduce using rule 20 (type -> DATA_TYPE .)
    FUNC            reduce using rule 20 (type -> DATA_TYPE .)
    $end            reduce using rule 20 (type -> DATA_TYPE .)
    RETURN          reduce using rule 20 (type -> DATA_TYPE .)
    LCURLY          reduce using rule 20 (type -> DATA_TYPE .)
    IF              reduce using rule 20 (type -> DATA_TYPE .)
    FOR             reduce using rule 20 (type -> DATA_TYPE .)
    CONTINUE        reduce using rule 20 (type -> DATA_TYPE .)
    BREAK           reduce using rule 20 (type -> DATA_TYPE .)
    GOTO            reduce using rule 20 (type -> DATA_TYPE .)
    IDENTIFIER      reduce using rule 20 (type -> DATA_TYPE .)
    SEMICOLON       reduce using rule 20 (type -> DATA_TYPE .)
    PLUS_PLUS       reduce using rule 20 (type -> DATA_TYPE .)
    MINUS_MINUS     reduce using rule 20 (type -> DATA_TYPE .)
    AMP             reduce using rule 20 (type -> DATA_TYPE .)
    STAR            reduce using rule 20 (type -> DATA_TYPE .)
    PLUS            reduce using rule 20 (type -> DATA_TYPE .)
    MINUS           reduce using rule 20 (type -> DATA_TYPE .)
    NOT             reduce using rule 20 (type -> DATA_TYPE .)
    LROUND          reduce using rule 20 (type -> DATA_TYPE .)
    INT_LIT         reduce using rule 20 (type -> DATA_TYPE .)
    FLOAT_LIT       reduce using rule 20 (type -> DATA_TYPE .)
    STRING_LIT      reduce using rule 20 (type -> DATA_TYPE .)
    BOOL_LIT        reduce using rule 20 (type -> DATA_TYPE .)
    RCURLY          reduce using rule 20 (type -> DATA_TYPE .)
    RROUND          reduce using rule 20 (type -> DATA_TYPE .)
    COMMA           reduce using rule 20 (type -> DATA_TYPE .)


state 31

    (21) type -> arr_type .

    EQ              reduce using rule 21 (type -> arr_type .)
    IMPORT          reduce using rule 21 (type -> arr_type .)
    TYPE            reduce using rule 21 (type -> arr_type .)
    VAR             reduce using rule 21 (type -> arr_type .)
    CONST           reduce using rule 21 (type -> arr_type .)
    FUNC            reduce using rule 21 (type -> arr_type .)
    $end            reduce using rule 21 (type -> arr_type .)
    RETURN          reduce using rule 21 (type -> arr_type .)
    LCURLY          reduce using rule 21 (type -> arr_type .)
    IF              reduce using rule 21 (type -> arr_type .)
    FOR             reduce using rule 21 (type -> arr_type .)
    CONTINUE        reduce using rule 21 (type -> arr_type .)
    BREAK           reduce using rule 21 (type -> arr_type .)
    GOTO            reduce using rule 21 (type -> arr_type .)
    IDENTIFIER      reduce using rule 21 (type -> arr_type .)
    SEMICOLON       reduce using rule 21 (type -> arr_type .)
    PLUS_PLUS       reduce using rule 21 (type -> arr_type .)
    MINUS_MINUS     reduce using rule 21 (type -> arr_type .)
    AMP             reduce using rule 21 (type -> arr_type .)
    STAR            reduce using rule 21 (type -> arr_type .)
    PLUS            reduce using rule 21 (type -> arr_type .)
    MINUS           reduce using rule 21 (type -> arr_type .)
    NOT             reduce using rule 21 (type -> arr_type .)
    LROUND          reduce using rule 21 (type -> arr_type .)
    INT_LIT         reduce using rule 21 (type -> arr_type .)
    FLOAT_LIT       reduce using rule 21 (type -> arr_type .)
    STRING_LIT      reduce using rule 21 (type -> arr_type .)
    BOOL_LIT        reduce using rule 21 (type -> arr_type .)
    RCURLY          reduce using rule 21 (type -> arr_type .)
    RROUND          reduce using rule 21 (type -> arr_type .)
    COMMA           reduce using rule 21 (type -> arr_type .)


state 32

    (22) type -> slc_type .

    EQ              reduce using rule 22 (type -> slc_type .)
    IMPORT          reduce using rule 22 (type -> slc_type .)
    TYPE            reduce using rule 22 (type -> slc_type .)
    VAR             reduce using rule 22 (type -> slc_type .)
    CONST           reduce using rule 22 (type -> slc_type .)
    FUNC            reduce using rule 22 (type -> slc_type .)
    $end            reduce using rule 22 (type -> slc_type .)
    RETURN          reduce using rule 22 (type -> slc_type .)
    LCURLY          reduce using rule 22 (type -> slc_type .)
    IF              reduce using rule 22 (type -> slc_type .)
    FOR             reduce using rule 22 (type -> slc_type .)
    CONTINUE        reduce using rule 22 (type -> slc_type .)
    BREAK           reduce using rule 22 (type -> slc_type .)
    GOTO            reduce using rule 22 (type -> slc_type .)
    IDENTIFIER      reduce using rule 22 (type -> slc_type .)
    SEMICOLON       reduce using rule 22 (type -> slc_type .)
    PLUS_PLUS       reduce using rule 22 (type -> slc_type .)
    MINUS_MINUS     reduce using rule 22 (type -> slc_type .)
    AMP             reduce using rule 22 (type -> slc_type .)
    STAR            reduce using rule 22 (type -> slc_type .)
    PLUS            reduce using rule 22 (type -> slc_type .)
    MINUS           reduce using rule 22 (type -> slc_type .)
    NOT             reduce using rule 22 (type -> slc_type .)
    LROUND          reduce using rule 22 (type -> slc_type .)
    INT_LIT         reduce using rule 22 (type -> slc_type .)
    FLOAT_LIT       reduce using rule 22 (type -> slc_type .)
    STRING_LIT      reduce using rule 22 (type -> slc_type .)
    BOOL_LIT        reduce using rule 22 (type -> slc_type .)
    RCURLY          reduce using rule 22 (type -> slc_type .)
    RROUND          reduce using rule 22 (type -> slc_type .)
    COMMA           reduce using rule 22 (type -> slc_type .)


state 33

    (23) type -> ptr_type .

    EQ              reduce using rule 23 (type -> ptr_type .)
    IMPORT          reduce using rule 23 (type -> ptr_type .)
    TYPE            reduce using rule 23 (type -> ptr_type .)
    VAR             reduce using rule 23 (type -> ptr_type .)
    CONST           reduce using rule 23 (type -> ptr_type .)
    FUNC            reduce using rule 23 (type -> ptr_type .)
    $end            reduce using rule 23 (type -> ptr_type .)
    RETURN          reduce using rule 23 (type -> ptr_type .)
    LCURLY          reduce using rule 23 (type -> ptr_type .)
    IF              reduce using rule 23 (type -> ptr_type .)
    FOR             reduce using rule 23 (type -> ptr_type .)
    CONTINUE        reduce using rule 23 (type -> ptr_type .)
    BREAK           reduce using rule 23 (type -> ptr_type .)
    GOTO            reduce using rule 23 (type -> ptr_type .)
    IDENTIFIER      reduce using rule 23 (type -> ptr_type .)
    SEMICOLON       reduce using rule 23 (type -> ptr_type .)
    PLUS_PLUS       reduce using rule 23 (type -> ptr_type .)
    MINUS_MINUS     reduce using rule 23 (type -> ptr_type .)
    AMP             reduce using rule 23 (type -> ptr_type .)
    STAR            reduce using rule 23 (type -> ptr_type .)
    PLUS            reduce using rule 23 (type -> ptr_type .)
    MINUS           reduce using rule 23 (type -> ptr_type .)
    NOT             reduce using rule 23 (type -> ptr_type .)
    LROUND          reduce using rule 23 (type -> ptr_type .)
    INT_LIT         reduce using rule 23 (type -> ptr_type .)
    FLOAT_LIT       reduce using rule 23 (type -> ptr_type .)
    STRING_LIT      reduce using rule 23 (type -> ptr_type .)
    BOOL_LIT        reduce using rule 23 (type -> ptr_type .)
    RCURLY          reduce using rule 23 (type -> ptr_type .)
    RROUND          reduce using rule 23 (type -> ptr_type .)
    COMMA           reduce using rule 23 (type -> ptr_type .)


state 34

    (14) arr_type -> LSQUARE . INT_LIT RSQUARE arr_type
    (15) arr_type -> LSQUARE . INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> LSQUARE . RSQUARE slc_type
    (17) slc_type -> LSQUARE . RSQUARE DATA_TYPE

    INT_LIT         shift and go to state 76
    RSQUARE         shift and go to state 77


state 35

    (18) ptr_type -> STAR . ptr_type
    (19) ptr_type -> STAR . DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    DATA_TYPE       shift and go to state 79
    STAR            shift and go to state 35

    ptr_type                       shift and go to state 78

state 36

    (27) var_decl -> CONST IDENTIFIER type . EQ expression

    EQ              shift and go to state 80


state 37

    (28) var_decl -> CONST IDENTIFIER ASSIGN . expression
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 81
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 38

    (57) func_decl -> FUNC IDENTIFIER signature . block
    (58) func_decl -> FUNC IDENTIFIER signature .
    (32) block -> . LCURLY stmt_list RCURLY

    IMPORT          reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    TYPE            reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    VAR             reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    CONST           reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    FUNC            reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    $end            reduce using rule 58 (func_decl -> FUNC IDENTIFIER signature .)
    LCURLY          shift and go to state 83

    block                          shift and go to state 82

state 39

    (59) signature -> params . result
    (60) signature -> params .
    (68) result -> . type
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    LCURLY          reduce using rule 60 (signature -> params .)
    IMPORT          reduce using rule 60 (signature -> params .)
    TYPE            reduce using rule 60 (signature -> params .)
    VAR             reduce using rule 60 (signature -> params .)
    CONST           reduce using rule 60 (signature -> params .)
    FUNC            reduce using rule 60 (signature -> params .)
    $end            reduce using rule 60 (signature -> params .)
    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    result                         shift and go to state 84
    type                           shift and go to state 85
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 40

    (61) params -> LROUND . param_list RROUND
    (62) params -> LROUND . RROUND
    (63) param_list -> . type
    (64) param_list -> . identifier_list type
    (65) param_list -> . param_list COMMA identifier_list type
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (66) identifier_list -> . IDENTIFIER
    (67) identifier_list -> . identifier_list COMMA IDENTIFIER
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    RROUND          shift and go to state 87
    DATA_TYPE       shift and go to state 30
    IDENTIFIER      shift and go to state 90
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    param_list                     shift and go to state 86
    type                           shift and go to state 88
    identifier_list                shift and go to state 89
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 41

    (69) method_decl -> FUNC LROUND IDENTIFIER . type RROUND IDENTIFIER signature
    (70) method_decl -> FUNC LROUND IDENTIFIER . type RROUND IDENTIFIER signature block
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 91
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 42

    (13) imp_stmt -> IMPORT LROUND imp_list RROUND .

    IMPORT          reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)
    TYPE            reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)
    VAR             reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)
    CONST           reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)
    FUNC            reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)
    $end            reduce using rule 13 (imp_stmt -> IMPORT LROUND imp_list RROUND .)


state 43

    (10) imp_list -> STRING_LIT imp_list .

    RROUND          reduce using rule 10 (imp_list -> STRING_LIT imp_list .)


state 44

    (29) struct_decl -> TYPE IDENTIFIER STRUCT LCURLY . var_decl_list RCURLY
    (30) var_decl_list -> . IDENTIFIER type var_decl_list
    (31) var_decl_list -> . IDENTIFIER type

    IDENTIFIER      shift and go to state 92

    var_decl_list                  shift and go to state 93

state 45

    (25) var_decl -> VAR IDENTIFIER type EQ . expression
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 94
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 46

    (71) primary_expression -> IDENTIFIER .

    LSQUARE         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LROUND          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS_EQ         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS_EQ        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STAR_EQ         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQ       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MODULO_EQ       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP_EQ          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CARET_EQ        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LT_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GT_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    EQ_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CARET           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP_AMP         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    IMPORT          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    TYPE            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    VAR             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CONST           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    FUNC            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    $end            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RETURN          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LCURLY          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    IF              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    FOR             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CONTINUE        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    BREAK           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GOTO            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 71 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    NOT             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    INT_LIT         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    FLOAT_LIT       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STRING_LIT      reduce using rule 71 (primary_expression -> IDENTIFIER .)
    BOOL_LIT        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RCURLY          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RROUND          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RSQUARE         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    COMMA           reduce using rule 71 (primary_expression -> IDENTIFIER .)


state 47

    (26) var_decl -> VAR IDENTIFIER ASSIGN expression .

    IMPORT          reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    LCURLY          reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    CONTINUE        reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    BREAK           reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    GOTO            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    PLUS_PLUS       reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    MINUS_MINUS     reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    AMP             reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    STAR            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    PLUS            reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    MINUS           reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    NOT             reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    LROUND          reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    INT_LIT         reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    FLOAT_LIT       reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    STRING_LIT      reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    BOOL_LIT        reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 26 (var_decl -> VAR IDENTIFIER ASSIGN expression .)


state 48

    (134) expression -> assignment_expression .

    IMPORT          reduce using rule 134 (expression -> assignment_expression .)
    TYPE            reduce using rule 134 (expression -> assignment_expression .)
    VAR             reduce using rule 134 (expression -> assignment_expression .)
    CONST           reduce using rule 134 (expression -> assignment_expression .)
    FUNC            reduce using rule 134 (expression -> assignment_expression .)
    $end            reduce using rule 134 (expression -> assignment_expression .)
    RETURN          reduce using rule 134 (expression -> assignment_expression .)
    LCURLY          reduce using rule 134 (expression -> assignment_expression .)
    IF              reduce using rule 134 (expression -> assignment_expression .)
    FOR             reduce using rule 134 (expression -> assignment_expression .)
    CONTINUE        reduce using rule 134 (expression -> assignment_expression .)
    BREAK           reduce using rule 134 (expression -> assignment_expression .)
    GOTO            reduce using rule 134 (expression -> assignment_expression .)
    IDENTIFIER      reduce using rule 134 (expression -> assignment_expression .)
    SEMICOLON       reduce using rule 134 (expression -> assignment_expression .)
    PLUS_PLUS       reduce using rule 134 (expression -> assignment_expression .)
    MINUS_MINUS     reduce using rule 134 (expression -> assignment_expression .)
    AMP             reduce using rule 134 (expression -> assignment_expression .)
    STAR            reduce using rule 134 (expression -> assignment_expression .)
    PLUS            reduce using rule 134 (expression -> assignment_expression .)
    MINUS           reduce using rule 134 (expression -> assignment_expression .)
    NOT             reduce using rule 134 (expression -> assignment_expression .)
    LROUND          reduce using rule 134 (expression -> assignment_expression .)
    INT_LIT         reduce using rule 134 (expression -> assignment_expression .)
    FLOAT_LIT       reduce using rule 134 (expression -> assignment_expression .)
    STRING_LIT      reduce using rule 134 (expression -> assignment_expression .)
    BOOL_LIT        reduce using rule 134 (expression -> assignment_expression .)
    RCURLY          reduce using rule 134 (expression -> assignment_expression .)
    RROUND          reduce using rule 134 (expression -> assignment_expression .)
    RSQUARE         reduce using rule 134 (expression -> assignment_expression .)


state 49

    (122) assignment_expression -> logical_or_expression .
    (121) logical_or_expression -> logical_or_expression . OR_OR logical_and_expression

    IMPORT          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    TYPE            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    VAR             reduce using rule 122 (assignment_expression -> logical_or_expression .)
    CONST           reduce using rule 122 (assignment_expression -> logical_or_expression .)
    FUNC            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    $end            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    RETURN          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    LCURLY          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    IF              reduce using rule 122 (assignment_expression -> logical_or_expression .)
    FOR             reduce using rule 122 (assignment_expression -> logical_or_expression .)
    CONTINUE        reduce using rule 122 (assignment_expression -> logical_or_expression .)
    BREAK           reduce using rule 122 (assignment_expression -> logical_or_expression .)
    GOTO            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    IDENTIFIER      reduce using rule 122 (assignment_expression -> logical_or_expression .)
    SEMICOLON       reduce using rule 122 (assignment_expression -> logical_or_expression .)
    PLUS_PLUS       reduce using rule 122 (assignment_expression -> logical_or_expression .)
    MINUS_MINUS     reduce using rule 122 (assignment_expression -> logical_or_expression .)
    AMP             reduce using rule 122 (assignment_expression -> logical_or_expression .)
    STAR            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    PLUS            reduce using rule 122 (assignment_expression -> logical_or_expression .)
    MINUS           reduce using rule 122 (assignment_expression -> logical_or_expression .)
    NOT             reduce using rule 122 (assignment_expression -> logical_or_expression .)
    LROUND          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    INT_LIT         reduce using rule 122 (assignment_expression -> logical_or_expression .)
    FLOAT_LIT       reduce using rule 122 (assignment_expression -> logical_or_expression .)
    STRING_LIT      reduce using rule 122 (assignment_expression -> logical_or_expression .)
    BOOL_LIT        reduce using rule 122 (assignment_expression -> logical_or_expression .)
    RCURLY          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    RROUND          reduce using rule 122 (assignment_expression -> logical_or_expression .)
    RSQUARE         reduce using rule 122 (assignment_expression -> logical_or_expression .)
    COMMA           reduce using rule 122 (assignment_expression -> logical_or_expression .)
    OR_OR           shift and go to state 95


state 50

    (123) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (94) multiplicative_expression -> unary_expression .
    (124) assignment_operator -> . PLUS_EQ
    (125) assignment_operator -> . MINUS_EQ
    (126) assignment_operator -> . STAR_EQ
    (127) assignment_operator -> . DIVIDE_EQ
    (128) assignment_operator -> . MODULO_EQ
    (129) assignment_operator -> . AMP_EQ
    (130) assignment_operator -> . OR_EQ
    (131) assignment_operator -> . CARET_EQ
    (132) assignment_operator -> . EQ
    (133) assignment_operator -> . ASSIGN

    STAR            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MODULO          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LT_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GT_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    EQ_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    NOT_EQ          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    AMP             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CARET           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    AMP_AMP         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    OR_OR           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IMPORT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    TYPE            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    VAR             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CONST           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FUNC            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    $end            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RETURN          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LCURLY          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IF              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FOR             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CONTINUE        reduce using rule 94 (multiplicative_expression -> unary_expression .)
    BREAK           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GOTO            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 94 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    PLUS_PLUS       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MINUS_MINUS     reduce using rule 94 (multiplicative_expression -> unary_expression .)
    NOT             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LROUND          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    INT_LIT         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    STRING_LIT      reduce using rule 94 (multiplicative_expression -> unary_expression .)
    BOOL_LIT        reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RCURLY          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RROUND          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RSQUARE         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    PLUS_EQ         shift and go to state 97
    MINUS_EQ        shift and go to state 98
    STAR_EQ         shift and go to state 99
    DIVIDE_EQ       shift and go to state 100
    MODULO_EQ       shift and go to state 101
    AMP_EQ          shift and go to state 102
    OR_EQ           shift and go to state 103
    CARET_EQ        shift and go to state 104
    EQ              shift and go to state 105
    ASSIGN          shift and go to state 106

    assignment_operator            shift and go to state 96

state 51

    (120) logical_or_expression -> logical_and_expression .
    (119) logical_and_expression -> logical_and_expression . AMP_AMP inclusive_or_expression

    OR_OR           reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    IMPORT          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    TYPE            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    VAR             reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    CONST           reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    FUNC            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    $end            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    RETURN          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    LCURLY          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    IF              reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    FOR             reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    CONTINUE        reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    BREAK           reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    GOTO            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    IDENTIFIER      reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    SEMICOLON       reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    PLUS_PLUS       reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    MINUS_MINUS     reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    AMP             reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    STAR            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    PLUS            reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    MINUS           reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    NOT             reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    LROUND          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    INT_LIT         reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    FLOAT_LIT       reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    STRING_LIT      reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    BOOL_LIT        reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    RCURLY          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    RROUND          reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    RSQUARE         reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    COMMA           reduce using rule 120 (logical_or_expression -> logical_and_expression .)
    AMP_AMP         shift and go to state 107


state 52

    (85) unary_expression -> postfix_expression .
    (75) postfix_expression -> postfix_expression . LSQUARE expression RSQUARE
    (76) postfix_expression -> postfix_expression . LROUND RROUND
    (77) postfix_expression -> postfix_expression . LROUND argument_expression_list RROUND
    (78) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (79) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> postfix_expression . PLUS_PLUS
    (82) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for LROUND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    PLUS_EQ         reduce using rule 85 (unary_expression -> postfix_expression .)
    MINUS_EQ        reduce using rule 85 (unary_expression -> postfix_expression .)
    STAR_EQ         reduce using rule 85 (unary_expression -> postfix_expression .)
    DIVIDE_EQ       reduce using rule 85 (unary_expression -> postfix_expression .)
    MODULO_EQ       reduce using rule 85 (unary_expression -> postfix_expression .)
    AMP_EQ          reduce using rule 85 (unary_expression -> postfix_expression .)
    OR_EQ           reduce using rule 85 (unary_expression -> postfix_expression .)
    CARET_EQ        reduce using rule 85 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 85 (unary_expression -> postfix_expression .)
    ASSIGN          reduce using rule 85 (unary_expression -> postfix_expression .)
    STAR            reduce using rule 85 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 85 (unary_expression -> postfix_expression .)
    MODULO          reduce using rule 85 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 85 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 85 (unary_expression -> postfix_expression .)
    LSHIFT          reduce using rule 85 (unary_expression -> postfix_expression .)
    RSHIFT          reduce using rule 85 (unary_expression -> postfix_expression .)
    LT              reduce using rule 85 (unary_expression -> postfix_expression .)
    GT              reduce using rule 85 (unary_expression -> postfix_expression .)
    LT_EQ           reduce using rule 85 (unary_expression -> postfix_expression .)
    GT_EQ           reduce using rule 85 (unary_expression -> postfix_expression .)
    EQ_EQ           reduce using rule 85 (unary_expression -> postfix_expression .)
    NOT_EQ          reduce using rule 85 (unary_expression -> postfix_expression .)
    AMP             reduce using rule 85 (unary_expression -> postfix_expression .)
    CARET           reduce using rule 85 (unary_expression -> postfix_expression .)
    OR              reduce using rule 85 (unary_expression -> postfix_expression .)
    AMP_AMP         reduce using rule 85 (unary_expression -> postfix_expression .)
    OR_OR           reduce using rule 85 (unary_expression -> postfix_expression .)
    IMPORT          reduce using rule 85 (unary_expression -> postfix_expression .)
    TYPE            reduce using rule 85 (unary_expression -> postfix_expression .)
    VAR             reduce using rule 85 (unary_expression -> postfix_expression .)
    CONST           reduce using rule 85 (unary_expression -> postfix_expression .)
    FUNC            reduce using rule 85 (unary_expression -> postfix_expression .)
    $end            reduce using rule 85 (unary_expression -> postfix_expression .)
    RETURN          reduce using rule 85 (unary_expression -> postfix_expression .)
    LCURLY          reduce using rule 85 (unary_expression -> postfix_expression .)
    IF              reduce using rule 85 (unary_expression -> postfix_expression .)
    FOR             reduce using rule 85 (unary_expression -> postfix_expression .)
    CONTINUE        reduce using rule 85 (unary_expression -> postfix_expression .)
    BREAK           reduce using rule 85 (unary_expression -> postfix_expression .)
    GOTO            reduce using rule 85 (unary_expression -> postfix_expression .)
    IDENTIFIER      reduce using rule 85 (unary_expression -> postfix_expression .)
    SEMICOLON       reduce using rule 85 (unary_expression -> postfix_expression .)
    NOT             reduce using rule 85 (unary_expression -> postfix_expression .)
    INT_LIT         reduce using rule 85 (unary_expression -> postfix_expression .)
    FLOAT_LIT       reduce using rule 85 (unary_expression -> postfix_expression .)
    STRING_LIT      reduce using rule 85 (unary_expression -> postfix_expression .)
    BOOL_LIT        reduce using rule 85 (unary_expression -> postfix_expression .)
    RCURLY          reduce using rule 85 (unary_expression -> postfix_expression .)
    RROUND          reduce using rule 85 (unary_expression -> postfix_expression .)
    RSQUARE         reduce using rule 85 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 85 (unary_expression -> postfix_expression .)
    LSQUARE         shift and go to state 108
    LROUND          shift and go to state 109
    DOT             shift and go to state 110
    PLUS_PLUS       shift and go to state 111
    MINUS_MINUS     shift and go to state 112

  ! PLUS_PLUS       [ reduce using rule 85 (unary_expression -> postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 85 (unary_expression -> postfix_expression .) ]
  ! LROUND          [ reduce using rule 85 (unary_expression -> postfix_expression .) ]


state 53

    (86) unary_expression -> PLUS_PLUS . postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 113
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 54

    (87) unary_expression -> MINUS_MINUS . postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 114
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 55

    (88) unary_expression -> unary_operator . postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 115
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 56

    (118) logical_and_expression -> inclusive_or_expression .
    (117) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AMP_AMP         reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    OR_OR           reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    IMPORT          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    TYPE            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    VAR             reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    CONST           reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    FUNC            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    $end            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    RETURN          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    LCURLY          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    IF              reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    FOR             reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    CONTINUE        reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    BREAK           reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    GOTO            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    IDENTIFIER      reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    SEMICOLON       reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    PLUS_PLUS       reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    MINUS_MINUS     reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    AMP             reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    STAR            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    PLUS            reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    MINUS           reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    NOT             reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    LROUND          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    INT_LIT         reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    FLOAT_LIT       reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    STRING_LIT      reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    BOOL_LIT        reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    RCURLY          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    RROUND          reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    RSQUARE         reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    COMMA           reduce using rule 118 (logical_and_expression -> inclusive_or_expression .)
    OR              shift and go to state 116


state 57

    (74) postfix_expression -> primary_expression .

    LSQUARE         reduce using rule 74 (postfix_expression -> primary_expression .)
    LROUND          reduce using rule 74 (postfix_expression -> primary_expression .)
    DOT             reduce using rule 74 (postfix_expression -> primary_expression .)
    PLUS_PLUS       reduce using rule 74 (postfix_expression -> primary_expression .)
    MINUS_MINUS     reduce using rule 74 (postfix_expression -> primary_expression .)
    PLUS_EQ         reduce using rule 74 (postfix_expression -> primary_expression .)
    MINUS_EQ        reduce using rule 74 (postfix_expression -> primary_expression .)
    STAR_EQ         reduce using rule 74 (postfix_expression -> primary_expression .)
    DIVIDE_EQ       reduce using rule 74 (postfix_expression -> primary_expression .)
    MODULO_EQ       reduce using rule 74 (postfix_expression -> primary_expression .)
    AMP_EQ          reduce using rule 74 (postfix_expression -> primary_expression .)
    OR_EQ           reduce using rule 74 (postfix_expression -> primary_expression .)
    CARET_EQ        reduce using rule 74 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 74 (postfix_expression -> primary_expression .)
    ASSIGN          reduce using rule 74 (postfix_expression -> primary_expression .)
    STAR            reduce using rule 74 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 74 (postfix_expression -> primary_expression .)
    MODULO          reduce using rule 74 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 74 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 74 (postfix_expression -> primary_expression .)
    LSHIFT          reduce using rule 74 (postfix_expression -> primary_expression .)
    RSHIFT          reduce using rule 74 (postfix_expression -> primary_expression .)
    LT              reduce using rule 74 (postfix_expression -> primary_expression .)
    GT              reduce using rule 74 (postfix_expression -> primary_expression .)
    LT_EQ           reduce using rule 74 (postfix_expression -> primary_expression .)
    GT_EQ           reduce using rule 74 (postfix_expression -> primary_expression .)
    EQ_EQ           reduce using rule 74 (postfix_expression -> primary_expression .)
    NOT_EQ          reduce using rule 74 (postfix_expression -> primary_expression .)
    AMP             reduce using rule 74 (postfix_expression -> primary_expression .)
    CARET           reduce using rule 74 (postfix_expression -> primary_expression .)
    OR              reduce using rule 74 (postfix_expression -> primary_expression .)
    AMP_AMP         reduce using rule 74 (postfix_expression -> primary_expression .)
    OR_OR           reduce using rule 74 (postfix_expression -> primary_expression .)
    IMPORT          reduce using rule 74 (postfix_expression -> primary_expression .)
    TYPE            reduce using rule 74 (postfix_expression -> primary_expression .)
    VAR             reduce using rule 74 (postfix_expression -> primary_expression .)
    CONST           reduce using rule 74 (postfix_expression -> primary_expression .)
    FUNC            reduce using rule 74 (postfix_expression -> primary_expression .)
    $end            reduce using rule 74 (postfix_expression -> primary_expression .)
    RETURN          reduce using rule 74 (postfix_expression -> primary_expression .)
    LCURLY          reduce using rule 74 (postfix_expression -> primary_expression .)
    IF              reduce using rule 74 (postfix_expression -> primary_expression .)
    FOR             reduce using rule 74 (postfix_expression -> primary_expression .)
    CONTINUE        reduce using rule 74 (postfix_expression -> primary_expression .)
    BREAK           reduce using rule 74 (postfix_expression -> primary_expression .)
    GOTO            reduce using rule 74 (postfix_expression -> primary_expression .)
    IDENTIFIER      reduce using rule 74 (postfix_expression -> primary_expression .)
    SEMICOLON       reduce using rule 74 (postfix_expression -> primary_expression .)
    NOT             reduce using rule 74 (postfix_expression -> primary_expression .)
    INT_LIT         reduce using rule 74 (postfix_expression -> primary_expression .)
    FLOAT_LIT       reduce using rule 74 (postfix_expression -> primary_expression .)
    STRING_LIT      reduce using rule 74 (postfix_expression -> primary_expression .)
    BOOL_LIT        reduce using rule 74 (postfix_expression -> primary_expression .)
    RCURLY          reduce using rule 74 (postfix_expression -> primary_expression .)
    RROUND          reduce using rule 74 (postfix_expression -> primary_expression .)
    RSQUARE         reduce using rule 74 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 74 (postfix_expression -> primary_expression .)


state 58

    (73) primary_expression -> LROUND . expression RROUND
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 117
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 59

    (89) unary_operator -> AMP .

    IDENTIFIER      reduce using rule 89 (unary_operator -> AMP .)
    LROUND          reduce using rule 89 (unary_operator -> AMP .)
    INT_LIT         reduce using rule 89 (unary_operator -> AMP .)
    FLOAT_LIT       reduce using rule 89 (unary_operator -> AMP .)
    STRING_LIT      reduce using rule 89 (unary_operator -> AMP .)
    BOOL_LIT        reduce using rule 89 (unary_operator -> AMP .)


state 60

    (90) unary_operator -> STAR .

    IDENTIFIER      reduce using rule 90 (unary_operator -> STAR .)
    LROUND          reduce using rule 90 (unary_operator -> STAR .)
    INT_LIT         reduce using rule 90 (unary_operator -> STAR .)
    FLOAT_LIT       reduce using rule 90 (unary_operator -> STAR .)
    STRING_LIT      reduce using rule 90 (unary_operator -> STAR .)
    BOOL_LIT        reduce using rule 90 (unary_operator -> STAR .)


state 61

    (91) unary_operator -> PLUS .

    IDENTIFIER      reduce using rule 91 (unary_operator -> PLUS .)
    LROUND          reduce using rule 91 (unary_operator -> PLUS .)
    INT_LIT         reduce using rule 91 (unary_operator -> PLUS .)
    FLOAT_LIT       reduce using rule 91 (unary_operator -> PLUS .)
    STRING_LIT      reduce using rule 91 (unary_operator -> PLUS .)
    BOOL_LIT        reduce using rule 91 (unary_operator -> PLUS .)


state 62

    (92) unary_operator -> MINUS .

    IDENTIFIER      reduce using rule 92 (unary_operator -> MINUS .)
    LROUND          reduce using rule 92 (unary_operator -> MINUS .)
    INT_LIT         reduce using rule 92 (unary_operator -> MINUS .)
    FLOAT_LIT       reduce using rule 92 (unary_operator -> MINUS .)
    STRING_LIT      reduce using rule 92 (unary_operator -> MINUS .)
    BOOL_LIT        reduce using rule 92 (unary_operator -> MINUS .)


state 63

    (93) unary_operator -> NOT .

    IDENTIFIER      reduce using rule 93 (unary_operator -> NOT .)
    LROUND          reduce using rule 93 (unary_operator -> NOT .)
    INT_LIT         reduce using rule 93 (unary_operator -> NOT .)
    FLOAT_LIT       reduce using rule 93 (unary_operator -> NOT .)
    STRING_LIT      reduce using rule 93 (unary_operator -> NOT .)
    BOOL_LIT        reduce using rule 93 (unary_operator -> NOT .)


state 64

    (116) inclusive_or_expression -> exclusive_or_expression .
    (115) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    OR              reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    AMP_AMP         reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    OR_OR           reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    IMPORT          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    TYPE            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    VAR             reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    CONST           reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    FUNC            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    $end            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    RETURN          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    LCURLY          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    IF              reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    FOR             reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    CONTINUE        reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    BREAK           reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    GOTO            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    IDENTIFIER      reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    SEMICOLON       reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    PLUS_PLUS       reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    MINUS_MINUS     reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    AMP             reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    STAR            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    PLUS            reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    MINUS           reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    NOT             reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    LROUND          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    INT_LIT         reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    FLOAT_LIT       reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    STRING_LIT      reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    BOOL_LIT        reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    RCURLY          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    RROUND          reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    RSQUARE         reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    COMMA           reduce using rule 116 (inclusive_or_expression -> exclusive_or_expression .)
    CARET           shift and go to state 118


state 65

    (72) primary_expression -> lit_operand .

    LSQUARE         reduce using rule 72 (primary_expression -> lit_operand .)
    LROUND          reduce using rule 72 (primary_expression -> lit_operand .)
    DOT             reduce using rule 72 (primary_expression -> lit_operand .)
    PLUS_PLUS       reduce using rule 72 (primary_expression -> lit_operand .)
    MINUS_MINUS     reduce using rule 72 (primary_expression -> lit_operand .)
    PLUS_EQ         reduce using rule 72 (primary_expression -> lit_operand .)
    MINUS_EQ        reduce using rule 72 (primary_expression -> lit_operand .)
    STAR_EQ         reduce using rule 72 (primary_expression -> lit_operand .)
    DIVIDE_EQ       reduce using rule 72 (primary_expression -> lit_operand .)
    MODULO_EQ       reduce using rule 72 (primary_expression -> lit_operand .)
    AMP_EQ          reduce using rule 72 (primary_expression -> lit_operand .)
    OR_EQ           reduce using rule 72 (primary_expression -> lit_operand .)
    CARET_EQ        reduce using rule 72 (primary_expression -> lit_operand .)
    EQ              reduce using rule 72 (primary_expression -> lit_operand .)
    ASSIGN          reduce using rule 72 (primary_expression -> lit_operand .)
    STAR            reduce using rule 72 (primary_expression -> lit_operand .)
    DIVIDE          reduce using rule 72 (primary_expression -> lit_operand .)
    MODULO          reduce using rule 72 (primary_expression -> lit_operand .)
    PLUS            reduce using rule 72 (primary_expression -> lit_operand .)
    MINUS           reduce using rule 72 (primary_expression -> lit_operand .)
    LSHIFT          reduce using rule 72 (primary_expression -> lit_operand .)
    RSHIFT          reduce using rule 72 (primary_expression -> lit_operand .)
    LT              reduce using rule 72 (primary_expression -> lit_operand .)
    GT              reduce using rule 72 (primary_expression -> lit_operand .)
    LT_EQ           reduce using rule 72 (primary_expression -> lit_operand .)
    GT_EQ           reduce using rule 72 (primary_expression -> lit_operand .)
    EQ_EQ           reduce using rule 72 (primary_expression -> lit_operand .)
    NOT_EQ          reduce using rule 72 (primary_expression -> lit_operand .)
    AMP             reduce using rule 72 (primary_expression -> lit_operand .)
    CARET           reduce using rule 72 (primary_expression -> lit_operand .)
    OR              reduce using rule 72 (primary_expression -> lit_operand .)
    AMP_AMP         reduce using rule 72 (primary_expression -> lit_operand .)
    OR_OR           reduce using rule 72 (primary_expression -> lit_operand .)
    IMPORT          reduce using rule 72 (primary_expression -> lit_operand .)
    TYPE            reduce using rule 72 (primary_expression -> lit_operand .)
    VAR             reduce using rule 72 (primary_expression -> lit_operand .)
    CONST           reduce using rule 72 (primary_expression -> lit_operand .)
    FUNC            reduce using rule 72 (primary_expression -> lit_operand .)
    $end            reduce using rule 72 (primary_expression -> lit_operand .)
    RETURN          reduce using rule 72 (primary_expression -> lit_operand .)
    LCURLY          reduce using rule 72 (primary_expression -> lit_operand .)
    IF              reduce using rule 72 (primary_expression -> lit_operand .)
    FOR             reduce using rule 72 (primary_expression -> lit_operand .)
    CONTINUE        reduce using rule 72 (primary_expression -> lit_operand .)
    BREAK           reduce using rule 72 (primary_expression -> lit_operand .)
    GOTO            reduce using rule 72 (primary_expression -> lit_operand .)
    IDENTIFIER      reduce using rule 72 (primary_expression -> lit_operand .)
    SEMICOLON       reduce using rule 72 (primary_expression -> lit_operand .)
    NOT             reduce using rule 72 (primary_expression -> lit_operand .)
    INT_LIT         reduce using rule 72 (primary_expression -> lit_operand .)
    FLOAT_LIT       reduce using rule 72 (primary_expression -> lit_operand .)
    STRING_LIT      reduce using rule 72 (primary_expression -> lit_operand .)
    BOOL_LIT        reduce using rule 72 (primary_expression -> lit_operand .)
    RCURLY          reduce using rule 72 (primary_expression -> lit_operand .)
    RROUND          reduce using rule 72 (primary_expression -> lit_operand .)
    RSQUARE         reduce using rule 72 (primary_expression -> lit_operand .)
    COMMA           reduce using rule 72 (primary_expression -> lit_operand .)


state 66

    (114) exclusive_or_expression -> and_expression .
    (113) and_expression -> and_expression . AMP equality_expression

  ! shift/reduce conflict for AMP resolved as shift
    CARET           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    OR              reduce using rule 114 (exclusive_or_expression -> and_expression .)
    AMP_AMP         reduce using rule 114 (exclusive_or_expression -> and_expression .)
    OR_OR           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    IMPORT          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    TYPE            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    VAR             reduce using rule 114 (exclusive_or_expression -> and_expression .)
    CONST           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    FUNC            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    $end            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    RETURN          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    LCURLY          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    IF              reduce using rule 114 (exclusive_or_expression -> and_expression .)
    FOR             reduce using rule 114 (exclusive_or_expression -> and_expression .)
    CONTINUE        reduce using rule 114 (exclusive_or_expression -> and_expression .)
    BREAK           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    GOTO            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    IDENTIFIER      reduce using rule 114 (exclusive_or_expression -> and_expression .)
    SEMICOLON       reduce using rule 114 (exclusive_or_expression -> and_expression .)
    PLUS_PLUS       reduce using rule 114 (exclusive_or_expression -> and_expression .)
    MINUS_MINUS     reduce using rule 114 (exclusive_or_expression -> and_expression .)
    STAR            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    PLUS            reduce using rule 114 (exclusive_or_expression -> and_expression .)
    MINUS           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    NOT             reduce using rule 114 (exclusive_or_expression -> and_expression .)
    LROUND          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    INT_LIT         reduce using rule 114 (exclusive_or_expression -> and_expression .)
    FLOAT_LIT       reduce using rule 114 (exclusive_or_expression -> and_expression .)
    STRING_LIT      reduce using rule 114 (exclusive_or_expression -> and_expression .)
    BOOL_LIT        reduce using rule 114 (exclusive_or_expression -> and_expression .)
    RCURLY          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    RROUND          reduce using rule 114 (exclusive_or_expression -> and_expression .)
    RSQUARE         reduce using rule 114 (exclusive_or_expression -> and_expression .)
    COMMA           reduce using rule 114 (exclusive_or_expression -> and_expression .)
    AMP             shift and go to state 119

  ! AMP             [ reduce using rule 114 (exclusive_or_expression -> and_expression .) ]


state 67

    (135) lit_operand -> INT_LIT .

    LSQUARE         reduce using rule 135 (lit_operand -> INT_LIT .)
    LROUND          reduce using rule 135 (lit_operand -> INT_LIT .)
    DOT             reduce using rule 135 (lit_operand -> INT_LIT .)
    PLUS_PLUS       reduce using rule 135 (lit_operand -> INT_LIT .)
    MINUS_MINUS     reduce using rule 135 (lit_operand -> INT_LIT .)
    PLUS_EQ         reduce using rule 135 (lit_operand -> INT_LIT .)
    MINUS_EQ        reduce using rule 135 (lit_operand -> INT_LIT .)
    STAR_EQ         reduce using rule 135 (lit_operand -> INT_LIT .)
    DIVIDE_EQ       reduce using rule 135 (lit_operand -> INT_LIT .)
    MODULO_EQ       reduce using rule 135 (lit_operand -> INT_LIT .)
    AMP_EQ          reduce using rule 135 (lit_operand -> INT_LIT .)
    OR_EQ           reduce using rule 135 (lit_operand -> INT_LIT .)
    CARET_EQ        reduce using rule 135 (lit_operand -> INT_LIT .)
    EQ              reduce using rule 135 (lit_operand -> INT_LIT .)
    ASSIGN          reduce using rule 135 (lit_operand -> INT_LIT .)
    STAR            reduce using rule 135 (lit_operand -> INT_LIT .)
    DIVIDE          reduce using rule 135 (lit_operand -> INT_LIT .)
    MODULO          reduce using rule 135 (lit_operand -> INT_LIT .)
    PLUS            reduce using rule 135 (lit_operand -> INT_LIT .)
    MINUS           reduce using rule 135 (lit_operand -> INT_LIT .)
    LSHIFT          reduce using rule 135 (lit_operand -> INT_LIT .)
    RSHIFT          reduce using rule 135 (lit_operand -> INT_LIT .)
    LT              reduce using rule 135 (lit_operand -> INT_LIT .)
    GT              reduce using rule 135 (lit_operand -> INT_LIT .)
    LT_EQ           reduce using rule 135 (lit_operand -> INT_LIT .)
    GT_EQ           reduce using rule 135 (lit_operand -> INT_LIT .)
    EQ_EQ           reduce using rule 135 (lit_operand -> INT_LIT .)
    NOT_EQ          reduce using rule 135 (lit_operand -> INT_LIT .)
    AMP             reduce using rule 135 (lit_operand -> INT_LIT .)
    CARET           reduce using rule 135 (lit_operand -> INT_LIT .)
    OR              reduce using rule 135 (lit_operand -> INT_LIT .)
    AMP_AMP         reduce using rule 135 (lit_operand -> INT_LIT .)
    OR_OR           reduce using rule 135 (lit_operand -> INT_LIT .)
    IMPORT          reduce using rule 135 (lit_operand -> INT_LIT .)
    TYPE            reduce using rule 135 (lit_operand -> INT_LIT .)
    VAR             reduce using rule 135 (lit_operand -> INT_LIT .)
    CONST           reduce using rule 135 (lit_operand -> INT_LIT .)
    FUNC            reduce using rule 135 (lit_operand -> INT_LIT .)
    $end            reduce using rule 135 (lit_operand -> INT_LIT .)
    RETURN          reduce using rule 135 (lit_operand -> INT_LIT .)
    LCURLY          reduce using rule 135 (lit_operand -> INT_LIT .)
    IF              reduce using rule 135 (lit_operand -> INT_LIT .)
    FOR             reduce using rule 135 (lit_operand -> INT_LIT .)
    CONTINUE        reduce using rule 135 (lit_operand -> INT_LIT .)
    BREAK           reduce using rule 135 (lit_operand -> INT_LIT .)
    GOTO            reduce using rule 135 (lit_operand -> INT_LIT .)
    IDENTIFIER      reduce using rule 135 (lit_operand -> INT_LIT .)
    SEMICOLON       reduce using rule 135 (lit_operand -> INT_LIT .)
    NOT             reduce using rule 135 (lit_operand -> INT_LIT .)
    INT_LIT         reduce using rule 135 (lit_operand -> INT_LIT .)
    FLOAT_LIT       reduce using rule 135 (lit_operand -> INT_LIT .)
    STRING_LIT      reduce using rule 135 (lit_operand -> INT_LIT .)
    BOOL_LIT        reduce using rule 135 (lit_operand -> INT_LIT .)
    RCURLY          reduce using rule 135 (lit_operand -> INT_LIT .)
    RROUND          reduce using rule 135 (lit_operand -> INT_LIT .)
    RSQUARE         reduce using rule 135 (lit_operand -> INT_LIT .)
    COMMA           reduce using rule 135 (lit_operand -> INT_LIT .)


state 68

    (136) lit_operand -> FLOAT_LIT .

    LSQUARE         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    LROUND          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    DOT             reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    PLUS_PLUS       reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    MINUS_MINUS     reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    PLUS_EQ         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    MINUS_EQ        reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    STAR_EQ         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    DIVIDE_EQ       reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    MODULO_EQ       reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    AMP_EQ          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    OR_EQ           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    CARET_EQ        reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    EQ              reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    ASSIGN          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    STAR            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    DIVIDE          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    MODULO          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    PLUS            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    MINUS           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    LSHIFT          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    RSHIFT          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    LT              reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    GT              reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    LT_EQ           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    GT_EQ           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    EQ_EQ           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    NOT_EQ          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    AMP             reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    CARET           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    OR              reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    AMP_AMP         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    OR_OR           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    IMPORT          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    TYPE            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    VAR             reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    CONST           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    FUNC            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    $end            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    RETURN          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    LCURLY          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    IF              reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    FOR             reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    CONTINUE        reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    BREAK           reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    GOTO            reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    IDENTIFIER      reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    SEMICOLON       reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    NOT             reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    INT_LIT         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    FLOAT_LIT       reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    STRING_LIT      reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    BOOL_LIT        reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    RCURLY          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    RROUND          reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    RSQUARE         reduce using rule 136 (lit_operand -> FLOAT_LIT .)
    COMMA           reduce using rule 136 (lit_operand -> FLOAT_LIT .)


state 69

    (137) lit_operand -> STRING_LIT .

    LSQUARE         reduce using rule 137 (lit_operand -> STRING_LIT .)
    LROUND          reduce using rule 137 (lit_operand -> STRING_LIT .)
    DOT             reduce using rule 137 (lit_operand -> STRING_LIT .)
    PLUS_PLUS       reduce using rule 137 (lit_operand -> STRING_LIT .)
    MINUS_MINUS     reduce using rule 137 (lit_operand -> STRING_LIT .)
    PLUS_EQ         reduce using rule 137 (lit_operand -> STRING_LIT .)
    MINUS_EQ        reduce using rule 137 (lit_operand -> STRING_LIT .)
    STAR_EQ         reduce using rule 137 (lit_operand -> STRING_LIT .)
    DIVIDE_EQ       reduce using rule 137 (lit_operand -> STRING_LIT .)
    MODULO_EQ       reduce using rule 137 (lit_operand -> STRING_LIT .)
    AMP_EQ          reduce using rule 137 (lit_operand -> STRING_LIT .)
    OR_EQ           reduce using rule 137 (lit_operand -> STRING_LIT .)
    CARET_EQ        reduce using rule 137 (lit_operand -> STRING_LIT .)
    EQ              reduce using rule 137 (lit_operand -> STRING_LIT .)
    ASSIGN          reduce using rule 137 (lit_operand -> STRING_LIT .)
    STAR            reduce using rule 137 (lit_operand -> STRING_LIT .)
    DIVIDE          reduce using rule 137 (lit_operand -> STRING_LIT .)
    MODULO          reduce using rule 137 (lit_operand -> STRING_LIT .)
    PLUS            reduce using rule 137 (lit_operand -> STRING_LIT .)
    MINUS           reduce using rule 137 (lit_operand -> STRING_LIT .)
    LSHIFT          reduce using rule 137 (lit_operand -> STRING_LIT .)
    RSHIFT          reduce using rule 137 (lit_operand -> STRING_LIT .)
    LT              reduce using rule 137 (lit_operand -> STRING_LIT .)
    GT              reduce using rule 137 (lit_operand -> STRING_LIT .)
    LT_EQ           reduce using rule 137 (lit_operand -> STRING_LIT .)
    GT_EQ           reduce using rule 137 (lit_operand -> STRING_LIT .)
    EQ_EQ           reduce using rule 137 (lit_operand -> STRING_LIT .)
    NOT_EQ          reduce using rule 137 (lit_operand -> STRING_LIT .)
    AMP             reduce using rule 137 (lit_operand -> STRING_LIT .)
    CARET           reduce using rule 137 (lit_operand -> STRING_LIT .)
    OR              reduce using rule 137 (lit_operand -> STRING_LIT .)
    AMP_AMP         reduce using rule 137 (lit_operand -> STRING_LIT .)
    OR_OR           reduce using rule 137 (lit_operand -> STRING_LIT .)
    IMPORT          reduce using rule 137 (lit_operand -> STRING_LIT .)
    TYPE            reduce using rule 137 (lit_operand -> STRING_LIT .)
    VAR             reduce using rule 137 (lit_operand -> STRING_LIT .)
    CONST           reduce using rule 137 (lit_operand -> STRING_LIT .)
    FUNC            reduce using rule 137 (lit_operand -> STRING_LIT .)
    $end            reduce using rule 137 (lit_operand -> STRING_LIT .)
    RETURN          reduce using rule 137 (lit_operand -> STRING_LIT .)
    LCURLY          reduce using rule 137 (lit_operand -> STRING_LIT .)
    IF              reduce using rule 137 (lit_operand -> STRING_LIT .)
    FOR             reduce using rule 137 (lit_operand -> STRING_LIT .)
    CONTINUE        reduce using rule 137 (lit_operand -> STRING_LIT .)
    BREAK           reduce using rule 137 (lit_operand -> STRING_LIT .)
    GOTO            reduce using rule 137 (lit_operand -> STRING_LIT .)
    IDENTIFIER      reduce using rule 137 (lit_operand -> STRING_LIT .)
    SEMICOLON       reduce using rule 137 (lit_operand -> STRING_LIT .)
    NOT             reduce using rule 137 (lit_operand -> STRING_LIT .)
    INT_LIT         reduce using rule 137 (lit_operand -> STRING_LIT .)
    FLOAT_LIT       reduce using rule 137 (lit_operand -> STRING_LIT .)
    STRING_LIT      reduce using rule 137 (lit_operand -> STRING_LIT .)
    BOOL_LIT        reduce using rule 137 (lit_operand -> STRING_LIT .)
    RCURLY          reduce using rule 137 (lit_operand -> STRING_LIT .)
    RROUND          reduce using rule 137 (lit_operand -> STRING_LIT .)
    RSQUARE         reduce using rule 137 (lit_operand -> STRING_LIT .)
    COMMA           reduce using rule 137 (lit_operand -> STRING_LIT .)


state 70

    (138) lit_operand -> BOOL_LIT .

    LSQUARE         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    LROUND          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    DOT             reduce using rule 138 (lit_operand -> BOOL_LIT .)
    PLUS_PLUS       reduce using rule 138 (lit_operand -> BOOL_LIT .)
    MINUS_MINUS     reduce using rule 138 (lit_operand -> BOOL_LIT .)
    PLUS_EQ         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    MINUS_EQ        reduce using rule 138 (lit_operand -> BOOL_LIT .)
    STAR_EQ         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    DIVIDE_EQ       reduce using rule 138 (lit_operand -> BOOL_LIT .)
    MODULO_EQ       reduce using rule 138 (lit_operand -> BOOL_LIT .)
    AMP_EQ          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    OR_EQ           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    CARET_EQ        reduce using rule 138 (lit_operand -> BOOL_LIT .)
    EQ              reduce using rule 138 (lit_operand -> BOOL_LIT .)
    ASSIGN          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    STAR            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    DIVIDE          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    MODULO          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    PLUS            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    MINUS           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    LSHIFT          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    RSHIFT          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    LT              reduce using rule 138 (lit_operand -> BOOL_LIT .)
    GT              reduce using rule 138 (lit_operand -> BOOL_LIT .)
    LT_EQ           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    GT_EQ           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    EQ_EQ           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    NOT_EQ          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    AMP             reduce using rule 138 (lit_operand -> BOOL_LIT .)
    CARET           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    OR              reduce using rule 138 (lit_operand -> BOOL_LIT .)
    AMP_AMP         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    OR_OR           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    IMPORT          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    TYPE            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    VAR             reduce using rule 138 (lit_operand -> BOOL_LIT .)
    CONST           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    FUNC            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    $end            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    RETURN          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    LCURLY          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    IF              reduce using rule 138 (lit_operand -> BOOL_LIT .)
    FOR             reduce using rule 138 (lit_operand -> BOOL_LIT .)
    CONTINUE        reduce using rule 138 (lit_operand -> BOOL_LIT .)
    BREAK           reduce using rule 138 (lit_operand -> BOOL_LIT .)
    GOTO            reduce using rule 138 (lit_operand -> BOOL_LIT .)
    IDENTIFIER      reduce using rule 138 (lit_operand -> BOOL_LIT .)
    SEMICOLON       reduce using rule 138 (lit_operand -> BOOL_LIT .)
    NOT             reduce using rule 138 (lit_operand -> BOOL_LIT .)
    INT_LIT         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    FLOAT_LIT       reduce using rule 138 (lit_operand -> BOOL_LIT .)
    STRING_LIT      reduce using rule 138 (lit_operand -> BOOL_LIT .)
    BOOL_LIT        reduce using rule 138 (lit_operand -> BOOL_LIT .)
    RCURLY          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    RROUND          reduce using rule 138 (lit_operand -> BOOL_LIT .)
    RSQUARE         reduce using rule 138 (lit_operand -> BOOL_LIT .)
    COMMA           reduce using rule 138 (lit_operand -> BOOL_LIT .)


state 71

    (112) and_expression -> equality_expression .
    (110) equality_expression -> equality_expression . EQ_EQ relational_expression
    (111) equality_expression -> equality_expression . NOT_EQ relational_expression

    AMP             reduce using rule 112 (and_expression -> equality_expression .)
    CARET           reduce using rule 112 (and_expression -> equality_expression .)
    OR              reduce using rule 112 (and_expression -> equality_expression .)
    AMP_AMP         reduce using rule 112 (and_expression -> equality_expression .)
    OR_OR           reduce using rule 112 (and_expression -> equality_expression .)
    IMPORT          reduce using rule 112 (and_expression -> equality_expression .)
    TYPE            reduce using rule 112 (and_expression -> equality_expression .)
    VAR             reduce using rule 112 (and_expression -> equality_expression .)
    CONST           reduce using rule 112 (and_expression -> equality_expression .)
    FUNC            reduce using rule 112 (and_expression -> equality_expression .)
    $end            reduce using rule 112 (and_expression -> equality_expression .)
    RETURN          reduce using rule 112 (and_expression -> equality_expression .)
    LCURLY          reduce using rule 112 (and_expression -> equality_expression .)
    IF              reduce using rule 112 (and_expression -> equality_expression .)
    FOR             reduce using rule 112 (and_expression -> equality_expression .)
    CONTINUE        reduce using rule 112 (and_expression -> equality_expression .)
    BREAK           reduce using rule 112 (and_expression -> equality_expression .)
    GOTO            reduce using rule 112 (and_expression -> equality_expression .)
    IDENTIFIER      reduce using rule 112 (and_expression -> equality_expression .)
    SEMICOLON       reduce using rule 112 (and_expression -> equality_expression .)
    PLUS_PLUS       reduce using rule 112 (and_expression -> equality_expression .)
    MINUS_MINUS     reduce using rule 112 (and_expression -> equality_expression .)
    STAR            reduce using rule 112 (and_expression -> equality_expression .)
    PLUS            reduce using rule 112 (and_expression -> equality_expression .)
    MINUS           reduce using rule 112 (and_expression -> equality_expression .)
    NOT             reduce using rule 112 (and_expression -> equality_expression .)
    LROUND          reduce using rule 112 (and_expression -> equality_expression .)
    INT_LIT         reduce using rule 112 (and_expression -> equality_expression .)
    FLOAT_LIT       reduce using rule 112 (and_expression -> equality_expression .)
    STRING_LIT      reduce using rule 112 (and_expression -> equality_expression .)
    BOOL_LIT        reduce using rule 112 (and_expression -> equality_expression .)
    RCURLY          reduce using rule 112 (and_expression -> equality_expression .)
    RROUND          reduce using rule 112 (and_expression -> equality_expression .)
    RSQUARE         reduce using rule 112 (and_expression -> equality_expression .)
    COMMA           reduce using rule 112 (and_expression -> equality_expression .)
    EQ_EQ           shift and go to state 120
    NOT_EQ          shift and go to state 121


state 72

    (109) equality_expression -> relational_expression .
    (105) relational_expression -> relational_expression . LT shift_expression
    (106) relational_expression -> relational_expression . GT shift_expression
    (107) relational_expression -> relational_expression . LT_EQ shift_expression
    (108) relational_expression -> relational_expression . GT_EQ shift_expression

    EQ_EQ           reduce using rule 109 (equality_expression -> relational_expression .)
    NOT_EQ          reduce using rule 109 (equality_expression -> relational_expression .)
    AMP             reduce using rule 109 (equality_expression -> relational_expression .)
    CARET           reduce using rule 109 (equality_expression -> relational_expression .)
    OR              reduce using rule 109 (equality_expression -> relational_expression .)
    AMP_AMP         reduce using rule 109 (equality_expression -> relational_expression .)
    OR_OR           reduce using rule 109 (equality_expression -> relational_expression .)
    IMPORT          reduce using rule 109 (equality_expression -> relational_expression .)
    TYPE            reduce using rule 109 (equality_expression -> relational_expression .)
    VAR             reduce using rule 109 (equality_expression -> relational_expression .)
    CONST           reduce using rule 109 (equality_expression -> relational_expression .)
    FUNC            reduce using rule 109 (equality_expression -> relational_expression .)
    $end            reduce using rule 109 (equality_expression -> relational_expression .)
    RETURN          reduce using rule 109 (equality_expression -> relational_expression .)
    LCURLY          reduce using rule 109 (equality_expression -> relational_expression .)
    IF              reduce using rule 109 (equality_expression -> relational_expression .)
    FOR             reduce using rule 109 (equality_expression -> relational_expression .)
    CONTINUE        reduce using rule 109 (equality_expression -> relational_expression .)
    BREAK           reduce using rule 109 (equality_expression -> relational_expression .)
    GOTO            reduce using rule 109 (equality_expression -> relational_expression .)
    IDENTIFIER      reduce using rule 109 (equality_expression -> relational_expression .)
    SEMICOLON       reduce using rule 109 (equality_expression -> relational_expression .)
    PLUS_PLUS       reduce using rule 109 (equality_expression -> relational_expression .)
    MINUS_MINUS     reduce using rule 109 (equality_expression -> relational_expression .)
    STAR            reduce using rule 109 (equality_expression -> relational_expression .)
    PLUS            reduce using rule 109 (equality_expression -> relational_expression .)
    MINUS           reduce using rule 109 (equality_expression -> relational_expression .)
    NOT             reduce using rule 109 (equality_expression -> relational_expression .)
    LROUND          reduce using rule 109 (equality_expression -> relational_expression .)
    INT_LIT         reduce using rule 109 (equality_expression -> relational_expression .)
    FLOAT_LIT       reduce using rule 109 (equality_expression -> relational_expression .)
    STRING_LIT      reduce using rule 109 (equality_expression -> relational_expression .)
    BOOL_LIT        reduce using rule 109 (equality_expression -> relational_expression .)
    RCURLY          reduce using rule 109 (equality_expression -> relational_expression .)
    RROUND          reduce using rule 109 (equality_expression -> relational_expression .)
    RSQUARE         reduce using rule 109 (equality_expression -> relational_expression .)
    COMMA           reduce using rule 109 (equality_expression -> relational_expression .)
    LT              shift and go to state 122
    GT              shift and go to state 123
    LT_EQ           shift and go to state 124
    GT_EQ           shift and go to state 125


state 73

    (104) relational_expression -> shift_expression .
    (102) shift_expression -> shift_expression . LSHIFT additive_expression
    (103) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 104 (relational_expression -> shift_expression .)
    GT              reduce using rule 104 (relational_expression -> shift_expression .)
    LT_EQ           reduce using rule 104 (relational_expression -> shift_expression .)
    GT_EQ           reduce using rule 104 (relational_expression -> shift_expression .)
    EQ_EQ           reduce using rule 104 (relational_expression -> shift_expression .)
    NOT_EQ          reduce using rule 104 (relational_expression -> shift_expression .)
    AMP             reduce using rule 104 (relational_expression -> shift_expression .)
    CARET           reduce using rule 104 (relational_expression -> shift_expression .)
    OR              reduce using rule 104 (relational_expression -> shift_expression .)
    AMP_AMP         reduce using rule 104 (relational_expression -> shift_expression .)
    OR_OR           reduce using rule 104 (relational_expression -> shift_expression .)
    IMPORT          reduce using rule 104 (relational_expression -> shift_expression .)
    TYPE            reduce using rule 104 (relational_expression -> shift_expression .)
    VAR             reduce using rule 104 (relational_expression -> shift_expression .)
    CONST           reduce using rule 104 (relational_expression -> shift_expression .)
    FUNC            reduce using rule 104 (relational_expression -> shift_expression .)
    $end            reduce using rule 104 (relational_expression -> shift_expression .)
    RETURN          reduce using rule 104 (relational_expression -> shift_expression .)
    LCURLY          reduce using rule 104 (relational_expression -> shift_expression .)
    IF              reduce using rule 104 (relational_expression -> shift_expression .)
    FOR             reduce using rule 104 (relational_expression -> shift_expression .)
    CONTINUE        reduce using rule 104 (relational_expression -> shift_expression .)
    BREAK           reduce using rule 104 (relational_expression -> shift_expression .)
    GOTO            reduce using rule 104 (relational_expression -> shift_expression .)
    IDENTIFIER      reduce using rule 104 (relational_expression -> shift_expression .)
    SEMICOLON       reduce using rule 104 (relational_expression -> shift_expression .)
    PLUS_PLUS       reduce using rule 104 (relational_expression -> shift_expression .)
    MINUS_MINUS     reduce using rule 104 (relational_expression -> shift_expression .)
    STAR            reduce using rule 104 (relational_expression -> shift_expression .)
    PLUS            reduce using rule 104 (relational_expression -> shift_expression .)
    MINUS           reduce using rule 104 (relational_expression -> shift_expression .)
    NOT             reduce using rule 104 (relational_expression -> shift_expression .)
    LROUND          reduce using rule 104 (relational_expression -> shift_expression .)
    INT_LIT         reduce using rule 104 (relational_expression -> shift_expression .)
    FLOAT_LIT       reduce using rule 104 (relational_expression -> shift_expression .)
    STRING_LIT      reduce using rule 104 (relational_expression -> shift_expression .)
    BOOL_LIT        reduce using rule 104 (relational_expression -> shift_expression .)
    RCURLY          reduce using rule 104 (relational_expression -> shift_expression .)
    RROUND          reduce using rule 104 (relational_expression -> shift_expression .)
    RSQUARE         reduce using rule 104 (relational_expression -> shift_expression .)
    COMMA           reduce using rule 104 (relational_expression -> shift_expression .)
    LSHIFT          shift and go to state 126
    RSHIFT          shift and go to state 127


state 74

    (101) shift_expression -> additive_expression .
    (99) additive_expression -> additive_expression . PLUS multiplicative_expression
    (100) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LSHIFT          reduce using rule 101 (shift_expression -> additive_expression .)
    RSHIFT          reduce using rule 101 (shift_expression -> additive_expression .)
    LT              reduce using rule 101 (shift_expression -> additive_expression .)
    GT              reduce using rule 101 (shift_expression -> additive_expression .)
    LT_EQ           reduce using rule 101 (shift_expression -> additive_expression .)
    GT_EQ           reduce using rule 101 (shift_expression -> additive_expression .)
    EQ_EQ           reduce using rule 101 (shift_expression -> additive_expression .)
    NOT_EQ          reduce using rule 101 (shift_expression -> additive_expression .)
    AMP             reduce using rule 101 (shift_expression -> additive_expression .)
    CARET           reduce using rule 101 (shift_expression -> additive_expression .)
    OR              reduce using rule 101 (shift_expression -> additive_expression .)
    AMP_AMP         reduce using rule 101 (shift_expression -> additive_expression .)
    OR_OR           reduce using rule 101 (shift_expression -> additive_expression .)
    IMPORT          reduce using rule 101 (shift_expression -> additive_expression .)
    TYPE            reduce using rule 101 (shift_expression -> additive_expression .)
    VAR             reduce using rule 101 (shift_expression -> additive_expression .)
    CONST           reduce using rule 101 (shift_expression -> additive_expression .)
    FUNC            reduce using rule 101 (shift_expression -> additive_expression .)
    $end            reduce using rule 101 (shift_expression -> additive_expression .)
    RETURN          reduce using rule 101 (shift_expression -> additive_expression .)
    LCURLY          reduce using rule 101 (shift_expression -> additive_expression .)
    IF              reduce using rule 101 (shift_expression -> additive_expression .)
    FOR             reduce using rule 101 (shift_expression -> additive_expression .)
    CONTINUE        reduce using rule 101 (shift_expression -> additive_expression .)
    BREAK           reduce using rule 101 (shift_expression -> additive_expression .)
    GOTO            reduce using rule 101 (shift_expression -> additive_expression .)
    IDENTIFIER      reduce using rule 101 (shift_expression -> additive_expression .)
    SEMICOLON       reduce using rule 101 (shift_expression -> additive_expression .)
    PLUS_PLUS       reduce using rule 101 (shift_expression -> additive_expression .)
    MINUS_MINUS     reduce using rule 101 (shift_expression -> additive_expression .)
    STAR            reduce using rule 101 (shift_expression -> additive_expression .)
    NOT             reduce using rule 101 (shift_expression -> additive_expression .)
    LROUND          reduce using rule 101 (shift_expression -> additive_expression .)
    INT_LIT         reduce using rule 101 (shift_expression -> additive_expression .)
    FLOAT_LIT       reduce using rule 101 (shift_expression -> additive_expression .)
    STRING_LIT      reduce using rule 101 (shift_expression -> additive_expression .)
    BOOL_LIT        reduce using rule 101 (shift_expression -> additive_expression .)
    RCURLY          reduce using rule 101 (shift_expression -> additive_expression .)
    RROUND          reduce using rule 101 (shift_expression -> additive_expression .)
    RSQUARE         reduce using rule 101 (shift_expression -> additive_expression .)
    COMMA           reduce using rule 101 (shift_expression -> additive_expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

  ! PLUS            [ reduce using rule 101 (shift_expression -> additive_expression .) ]
  ! MINUS           [ reduce using rule 101 (shift_expression -> additive_expression .) ]


state 75

    (98) additive_expression -> multiplicative_expression .
    (95) multiplicative_expression -> multiplicative_expression . STAR unary_expression
    (96) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (97) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

  ! shift/reduce conflict for STAR resolved as shift
    PLUS            reduce using rule 98 (additive_expression -> multiplicative_expression .)
    MINUS           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    LSHIFT          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    RSHIFT          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    LT              reduce using rule 98 (additive_expression -> multiplicative_expression .)
    GT              reduce using rule 98 (additive_expression -> multiplicative_expression .)
    LT_EQ           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    GT_EQ           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    EQ_EQ           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    NOT_EQ          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    AMP             reduce using rule 98 (additive_expression -> multiplicative_expression .)
    CARET           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    OR              reduce using rule 98 (additive_expression -> multiplicative_expression .)
    AMP_AMP         reduce using rule 98 (additive_expression -> multiplicative_expression .)
    OR_OR           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    IMPORT          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    TYPE            reduce using rule 98 (additive_expression -> multiplicative_expression .)
    VAR             reduce using rule 98 (additive_expression -> multiplicative_expression .)
    CONST           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    FUNC            reduce using rule 98 (additive_expression -> multiplicative_expression .)
    $end            reduce using rule 98 (additive_expression -> multiplicative_expression .)
    RETURN          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    LCURLY          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    IF              reduce using rule 98 (additive_expression -> multiplicative_expression .)
    FOR             reduce using rule 98 (additive_expression -> multiplicative_expression .)
    CONTINUE        reduce using rule 98 (additive_expression -> multiplicative_expression .)
    BREAK           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    GOTO            reduce using rule 98 (additive_expression -> multiplicative_expression .)
    IDENTIFIER      reduce using rule 98 (additive_expression -> multiplicative_expression .)
    SEMICOLON       reduce using rule 98 (additive_expression -> multiplicative_expression .)
    PLUS_PLUS       reduce using rule 98 (additive_expression -> multiplicative_expression .)
    MINUS_MINUS     reduce using rule 98 (additive_expression -> multiplicative_expression .)
    NOT             reduce using rule 98 (additive_expression -> multiplicative_expression .)
    LROUND          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    INT_LIT         reduce using rule 98 (additive_expression -> multiplicative_expression .)
    FLOAT_LIT       reduce using rule 98 (additive_expression -> multiplicative_expression .)
    STRING_LIT      reduce using rule 98 (additive_expression -> multiplicative_expression .)
    BOOL_LIT        reduce using rule 98 (additive_expression -> multiplicative_expression .)
    RCURLY          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    RROUND          reduce using rule 98 (additive_expression -> multiplicative_expression .)
    RSQUARE         reduce using rule 98 (additive_expression -> multiplicative_expression .)
    COMMA           reduce using rule 98 (additive_expression -> multiplicative_expression .)
    STAR            shift and go to state 130
    DIVIDE          shift and go to state 131
    MODULO          shift and go to state 132

  ! STAR            [ reduce using rule 98 (additive_expression -> multiplicative_expression .) ]


state 76

    (14) arr_type -> LSQUARE INT_LIT . RSQUARE arr_type
    (15) arr_type -> LSQUARE INT_LIT . RSQUARE DATA_TYPE

    RSQUARE         shift and go to state 133


state 77

    (16) slc_type -> LSQUARE RSQUARE . slc_type
    (17) slc_type -> LSQUARE RSQUARE . DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE

    DATA_TYPE       shift and go to state 136
    LSQUARE         shift and go to state 134

    slc_type                       shift and go to state 135

state 78

    (18) ptr_type -> STAR ptr_type .

    EQ              reduce using rule 18 (ptr_type -> STAR ptr_type .)
    IMPORT          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    TYPE            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    VAR             reduce using rule 18 (ptr_type -> STAR ptr_type .)
    CONST           reduce using rule 18 (ptr_type -> STAR ptr_type .)
    FUNC            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    $end            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    RETURN          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    LCURLY          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    IF              reduce using rule 18 (ptr_type -> STAR ptr_type .)
    FOR             reduce using rule 18 (ptr_type -> STAR ptr_type .)
    CONTINUE        reduce using rule 18 (ptr_type -> STAR ptr_type .)
    BREAK           reduce using rule 18 (ptr_type -> STAR ptr_type .)
    GOTO            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    IDENTIFIER      reduce using rule 18 (ptr_type -> STAR ptr_type .)
    SEMICOLON       reduce using rule 18 (ptr_type -> STAR ptr_type .)
    PLUS_PLUS       reduce using rule 18 (ptr_type -> STAR ptr_type .)
    MINUS_MINUS     reduce using rule 18 (ptr_type -> STAR ptr_type .)
    AMP             reduce using rule 18 (ptr_type -> STAR ptr_type .)
    STAR            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    PLUS            reduce using rule 18 (ptr_type -> STAR ptr_type .)
    MINUS           reduce using rule 18 (ptr_type -> STAR ptr_type .)
    NOT             reduce using rule 18 (ptr_type -> STAR ptr_type .)
    LROUND          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    INT_LIT         reduce using rule 18 (ptr_type -> STAR ptr_type .)
    FLOAT_LIT       reduce using rule 18 (ptr_type -> STAR ptr_type .)
    STRING_LIT      reduce using rule 18 (ptr_type -> STAR ptr_type .)
    BOOL_LIT        reduce using rule 18 (ptr_type -> STAR ptr_type .)
    RCURLY          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    RROUND          reduce using rule 18 (ptr_type -> STAR ptr_type .)
    COMMA           reduce using rule 18 (ptr_type -> STAR ptr_type .)


state 79

    (19) ptr_type -> STAR DATA_TYPE .

    EQ              reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    IMPORT          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    TYPE            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    VAR             reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    CONST           reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    FUNC            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    $end            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    RETURN          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    LCURLY          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    IF              reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    FOR             reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    CONTINUE        reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    BREAK           reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    GOTO            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    IDENTIFIER      reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    SEMICOLON       reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    PLUS_PLUS       reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    MINUS_MINUS     reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    AMP             reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    STAR            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    PLUS            reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    MINUS           reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    NOT             reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    LROUND          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    INT_LIT         reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    FLOAT_LIT       reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    STRING_LIT      reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    BOOL_LIT        reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    RCURLY          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    RROUND          reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)
    COMMA           reduce using rule 19 (ptr_type -> STAR DATA_TYPE .)


state 80

    (27) var_decl -> CONST IDENTIFIER type EQ . expression
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 137
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 81

    (28) var_decl -> CONST IDENTIFIER ASSIGN expression .

    IMPORT          reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    TYPE            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    VAR             reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    CONST           reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    FUNC            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    $end            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    RETURN          reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    LCURLY          reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    IF              reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    FOR             reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    CONTINUE        reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    BREAK           reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    GOTO            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    IDENTIFIER      reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    SEMICOLON       reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    PLUS_PLUS       reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    MINUS_MINUS     reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    AMP             reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    STAR            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    PLUS            reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    MINUS           reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    NOT             reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    LROUND          reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    INT_LIT         reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    FLOAT_LIT       reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    STRING_LIT      reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    BOOL_LIT        reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)
    RCURLY          reduce using rule 28 (var_decl -> CONST IDENTIFIER ASSIGN expression .)


state 82

    (57) func_decl -> FUNC IDENTIFIER signature block .

    IMPORT          reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)
    TYPE            reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)
    VAR             reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)
    CONST           reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)
    FUNC            reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)
    $end            reduce using rule 57 (func_decl -> FUNC IDENTIFIER signature block .)


state 83

    (32) block -> LCURLY . stmt_list RCURLY
    (33) stmt_list -> . stmt stmt_list
    (34) stmt_list -> . stmt
    (35) stmt -> . var_decl
    (36) stmt -> . return_stmt
    (37) stmt -> . block
    (38) stmt -> . selection_stmt
    (39) stmt -> . iteration_stmt
    (40) stmt -> . jump_stmt
    (41) stmt -> . label_stmt
    (42) stmt -> . expression_stmt
    (43) stmt -> . expression
    (24) var_decl -> . VAR IDENTIFIER type
    (25) var_decl -> . VAR IDENTIFIER type EQ expression
    (26) var_decl -> . VAR IDENTIFIER ASSIGN expression
    (27) var_decl -> . CONST IDENTIFIER type EQ expression
    (28) var_decl -> . CONST IDENTIFIER ASSIGN expression
    (44) return_stmt -> . RETURN argument_expression_list
    (32) block -> . LCURLY stmt_list RCURLY
    (47) selection_stmt -> . IF expression block
    (48) selection_stmt -> . IF expression block ELSE block
    (49) selection_stmt -> . IF expression block ELSE selection_stmt
    (50) iteration_stmt -> . FOR block
    (51) iteration_stmt -> . FOR expression block
    (52) iteration_stmt -> . FOR expression_stmt expression_stmt expression block
    (53) jump_stmt -> . CONTINUE
    (54) jump_stmt -> . BREAK
    (55) jump_stmt -> . GOTO IDENTIFIER
    (56) label_stmt -> . IDENTIFIER COLON stmt
    (45) expression_stmt -> . SEMICOLON
    (46) expression_stmt -> . expression SEMICOLON
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    VAR             shift and go to state 13
    CONST           shift and go to state 14
    RETURN          shift and go to state 150
    LCURLY          shift and go to state 83
    IF              shift and go to state 151
    FOR             shift and go to state 152
    CONTINUE        shift and go to state 153
    BREAK           shift and go to state 154
    GOTO            shift and go to state 155
    IDENTIFIER      shift and go to state 149
    SEMICOLON       shift and go to state 156
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    stmt_list                      shift and go to state 138
    stmt                           shift and go to state 139
    var_decl                       shift and go to state 140
    return_stmt                    shift and go to state 141
    block                          shift and go to state 142
    selection_stmt                 shift and go to state 143
    iteration_stmt                 shift and go to state 144
    jump_stmt                      shift and go to state 145
    label_stmt                     shift and go to state 146
    expression_stmt                shift and go to state 147
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 84

    (59) signature -> params result .

    LCURLY          reduce using rule 59 (signature -> params result .)
    IMPORT          reduce using rule 59 (signature -> params result .)
    TYPE            reduce using rule 59 (signature -> params result .)
    VAR             reduce using rule 59 (signature -> params result .)
    CONST           reduce using rule 59 (signature -> params result .)
    FUNC            reduce using rule 59 (signature -> params result .)
    $end            reduce using rule 59 (signature -> params result .)


state 85

    (68) result -> type .

    LCURLY          reduce using rule 68 (result -> type .)
    IMPORT          reduce using rule 68 (result -> type .)
    TYPE            reduce using rule 68 (result -> type .)
    VAR             reduce using rule 68 (result -> type .)
    CONST           reduce using rule 68 (result -> type .)
    FUNC            reduce using rule 68 (result -> type .)
    $end            reduce using rule 68 (result -> type .)


state 86

    (61) params -> LROUND param_list . RROUND
    (65) param_list -> param_list . COMMA identifier_list type

    RROUND          shift and go to state 157
    COMMA           shift and go to state 158


state 87

    (62) params -> LROUND RROUND .

    DATA_TYPE       reduce using rule 62 (params -> LROUND RROUND .)
    LSQUARE         reduce using rule 62 (params -> LROUND RROUND .)
    STAR            reduce using rule 62 (params -> LROUND RROUND .)
    LCURLY          reduce using rule 62 (params -> LROUND RROUND .)
    IMPORT          reduce using rule 62 (params -> LROUND RROUND .)
    TYPE            reduce using rule 62 (params -> LROUND RROUND .)
    VAR             reduce using rule 62 (params -> LROUND RROUND .)
    CONST           reduce using rule 62 (params -> LROUND RROUND .)
    FUNC            reduce using rule 62 (params -> LROUND RROUND .)
    $end            reduce using rule 62 (params -> LROUND RROUND .)


state 88

    (63) param_list -> type .

    RROUND          reduce using rule 63 (param_list -> type .)
    COMMA           reduce using rule 63 (param_list -> type .)


state 89

    (64) param_list -> identifier_list . type
    (67) identifier_list -> identifier_list . COMMA IDENTIFIER
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    COMMA           shift and go to state 160
    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 159
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 90

    (66) identifier_list -> IDENTIFIER .

    COMMA           reduce using rule 66 (identifier_list -> IDENTIFIER .)
    DATA_TYPE       reduce using rule 66 (identifier_list -> IDENTIFIER .)
    LSQUARE         reduce using rule 66 (identifier_list -> IDENTIFIER .)
    STAR            reduce using rule 66 (identifier_list -> IDENTIFIER .)


state 91

    (69) method_decl -> FUNC LROUND IDENTIFIER type . RROUND IDENTIFIER signature
    (70) method_decl -> FUNC LROUND IDENTIFIER type . RROUND IDENTIFIER signature block

    RROUND          shift and go to state 161


state 92

    (30) var_decl_list -> IDENTIFIER . type var_decl_list
    (31) var_decl_list -> IDENTIFIER . type
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 162
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 93

    (29) struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list . RCURLY

    RCURLY          shift and go to state 163


state 94

    (25) var_decl -> VAR IDENTIFIER type EQ expression .

    IMPORT          reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    TYPE            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    VAR             reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    CONST           reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    FUNC            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    $end            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    RETURN          reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    LCURLY          reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    IF              reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    FOR             reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    CONTINUE        reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    BREAK           reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    GOTO            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    IDENTIFIER      reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    SEMICOLON       reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    PLUS_PLUS       reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    MINUS_MINUS     reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    AMP             reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    STAR            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    PLUS            reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    MINUS           reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    NOT             reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    LROUND          reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    INT_LIT         reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    FLOAT_LIT       reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    STRING_LIT      reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    BOOL_LIT        reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)
    RCURLY          reduce using rule 25 (var_decl -> VAR IDENTIFIER type EQ expression .)


state 95

    (121) logical_or_expression -> logical_or_expression OR_OR . logical_and_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    logical_and_expression         shift and go to state 164
    inclusive_or_expression        shift and go to state 56
    exclusive_or_expression        shift and go to state 64
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 96

    (123) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    unary_expression               shift and go to state 50
    assignment_expression          shift and go to state 166
    logical_or_expression          shift and go to state 49
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 97

    (124) assignment_operator -> PLUS_EQ .

    PLUS_PLUS       reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    MINUS_MINUS     reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    AMP             reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    STAR            reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    PLUS            reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    MINUS           reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    NOT             reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    IDENTIFIER      reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    LROUND          reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    INT_LIT         reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    FLOAT_LIT       reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    STRING_LIT      reduce using rule 124 (assignment_operator -> PLUS_EQ .)
    BOOL_LIT        reduce using rule 124 (assignment_operator -> PLUS_EQ .)


state 98

    (125) assignment_operator -> MINUS_EQ .

    PLUS_PLUS       reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    MINUS_MINUS     reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    AMP             reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    STAR            reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    PLUS            reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    MINUS           reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    NOT             reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    IDENTIFIER      reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    LROUND          reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    INT_LIT         reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    FLOAT_LIT       reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    STRING_LIT      reduce using rule 125 (assignment_operator -> MINUS_EQ .)
    BOOL_LIT        reduce using rule 125 (assignment_operator -> MINUS_EQ .)


state 99

    (126) assignment_operator -> STAR_EQ .

    PLUS_PLUS       reduce using rule 126 (assignment_operator -> STAR_EQ .)
    MINUS_MINUS     reduce using rule 126 (assignment_operator -> STAR_EQ .)
    AMP             reduce using rule 126 (assignment_operator -> STAR_EQ .)
    STAR            reduce using rule 126 (assignment_operator -> STAR_EQ .)
    PLUS            reduce using rule 126 (assignment_operator -> STAR_EQ .)
    MINUS           reduce using rule 126 (assignment_operator -> STAR_EQ .)
    NOT             reduce using rule 126 (assignment_operator -> STAR_EQ .)
    IDENTIFIER      reduce using rule 126 (assignment_operator -> STAR_EQ .)
    LROUND          reduce using rule 126 (assignment_operator -> STAR_EQ .)
    INT_LIT         reduce using rule 126 (assignment_operator -> STAR_EQ .)
    FLOAT_LIT       reduce using rule 126 (assignment_operator -> STAR_EQ .)
    STRING_LIT      reduce using rule 126 (assignment_operator -> STAR_EQ .)
    BOOL_LIT        reduce using rule 126 (assignment_operator -> STAR_EQ .)


state 100

    (127) assignment_operator -> DIVIDE_EQ .

    PLUS_PLUS       reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    MINUS_MINUS     reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    AMP             reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    STAR            reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    PLUS            reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    MINUS           reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    NOT             reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    IDENTIFIER      reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    LROUND          reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    INT_LIT         reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    FLOAT_LIT       reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    STRING_LIT      reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)
    BOOL_LIT        reduce using rule 127 (assignment_operator -> DIVIDE_EQ .)


state 101

    (128) assignment_operator -> MODULO_EQ .

    PLUS_PLUS       reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    MINUS_MINUS     reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    AMP             reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    STAR            reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    PLUS            reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    MINUS           reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    NOT             reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    IDENTIFIER      reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    LROUND          reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    INT_LIT         reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    FLOAT_LIT       reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    STRING_LIT      reduce using rule 128 (assignment_operator -> MODULO_EQ .)
    BOOL_LIT        reduce using rule 128 (assignment_operator -> MODULO_EQ .)


state 102

    (129) assignment_operator -> AMP_EQ .

    PLUS_PLUS       reduce using rule 129 (assignment_operator -> AMP_EQ .)
    MINUS_MINUS     reduce using rule 129 (assignment_operator -> AMP_EQ .)
    AMP             reduce using rule 129 (assignment_operator -> AMP_EQ .)
    STAR            reduce using rule 129 (assignment_operator -> AMP_EQ .)
    PLUS            reduce using rule 129 (assignment_operator -> AMP_EQ .)
    MINUS           reduce using rule 129 (assignment_operator -> AMP_EQ .)
    NOT             reduce using rule 129 (assignment_operator -> AMP_EQ .)
    IDENTIFIER      reduce using rule 129 (assignment_operator -> AMP_EQ .)
    LROUND          reduce using rule 129 (assignment_operator -> AMP_EQ .)
    INT_LIT         reduce using rule 129 (assignment_operator -> AMP_EQ .)
    FLOAT_LIT       reduce using rule 129 (assignment_operator -> AMP_EQ .)
    STRING_LIT      reduce using rule 129 (assignment_operator -> AMP_EQ .)
    BOOL_LIT        reduce using rule 129 (assignment_operator -> AMP_EQ .)


state 103

    (130) assignment_operator -> OR_EQ .

    PLUS_PLUS       reduce using rule 130 (assignment_operator -> OR_EQ .)
    MINUS_MINUS     reduce using rule 130 (assignment_operator -> OR_EQ .)
    AMP             reduce using rule 130 (assignment_operator -> OR_EQ .)
    STAR            reduce using rule 130 (assignment_operator -> OR_EQ .)
    PLUS            reduce using rule 130 (assignment_operator -> OR_EQ .)
    MINUS           reduce using rule 130 (assignment_operator -> OR_EQ .)
    NOT             reduce using rule 130 (assignment_operator -> OR_EQ .)
    IDENTIFIER      reduce using rule 130 (assignment_operator -> OR_EQ .)
    LROUND          reduce using rule 130 (assignment_operator -> OR_EQ .)
    INT_LIT         reduce using rule 130 (assignment_operator -> OR_EQ .)
    FLOAT_LIT       reduce using rule 130 (assignment_operator -> OR_EQ .)
    STRING_LIT      reduce using rule 130 (assignment_operator -> OR_EQ .)
    BOOL_LIT        reduce using rule 130 (assignment_operator -> OR_EQ .)


state 104

    (131) assignment_operator -> CARET_EQ .

    PLUS_PLUS       reduce using rule 131 (assignment_operator -> CARET_EQ .)
    MINUS_MINUS     reduce using rule 131 (assignment_operator -> CARET_EQ .)
    AMP             reduce using rule 131 (assignment_operator -> CARET_EQ .)
    STAR            reduce using rule 131 (assignment_operator -> CARET_EQ .)
    PLUS            reduce using rule 131 (assignment_operator -> CARET_EQ .)
    MINUS           reduce using rule 131 (assignment_operator -> CARET_EQ .)
    NOT             reduce using rule 131 (assignment_operator -> CARET_EQ .)
    IDENTIFIER      reduce using rule 131 (assignment_operator -> CARET_EQ .)
    LROUND          reduce using rule 131 (assignment_operator -> CARET_EQ .)
    INT_LIT         reduce using rule 131 (assignment_operator -> CARET_EQ .)
    FLOAT_LIT       reduce using rule 131 (assignment_operator -> CARET_EQ .)
    STRING_LIT      reduce using rule 131 (assignment_operator -> CARET_EQ .)
    BOOL_LIT        reduce using rule 131 (assignment_operator -> CARET_EQ .)


state 105

    (132) assignment_operator -> EQ .

    PLUS_PLUS       reduce using rule 132 (assignment_operator -> EQ .)
    MINUS_MINUS     reduce using rule 132 (assignment_operator -> EQ .)
    AMP             reduce using rule 132 (assignment_operator -> EQ .)
    STAR            reduce using rule 132 (assignment_operator -> EQ .)
    PLUS            reduce using rule 132 (assignment_operator -> EQ .)
    MINUS           reduce using rule 132 (assignment_operator -> EQ .)
    NOT             reduce using rule 132 (assignment_operator -> EQ .)
    IDENTIFIER      reduce using rule 132 (assignment_operator -> EQ .)
    LROUND          reduce using rule 132 (assignment_operator -> EQ .)
    INT_LIT         reduce using rule 132 (assignment_operator -> EQ .)
    FLOAT_LIT       reduce using rule 132 (assignment_operator -> EQ .)
    STRING_LIT      reduce using rule 132 (assignment_operator -> EQ .)
    BOOL_LIT        reduce using rule 132 (assignment_operator -> EQ .)


state 106

    (133) assignment_operator -> ASSIGN .

    PLUS_PLUS       reduce using rule 133 (assignment_operator -> ASSIGN .)
    MINUS_MINUS     reduce using rule 133 (assignment_operator -> ASSIGN .)
    AMP             reduce using rule 133 (assignment_operator -> ASSIGN .)
    STAR            reduce using rule 133 (assignment_operator -> ASSIGN .)
    PLUS            reduce using rule 133 (assignment_operator -> ASSIGN .)
    MINUS           reduce using rule 133 (assignment_operator -> ASSIGN .)
    NOT             reduce using rule 133 (assignment_operator -> ASSIGN .)
    IDENTIFIER      reduce using rule 133 (assignment_operator -> ASSIGN .)
    LROUND          reduce using rule 133 (assignment_operator -> ASSIGN .)
    INT_LIT         reduce using rule 133 (assignment_operator -> ASSIGN .)
    FLOAT_LIT       reduce using rule 133 (assignment_operator -> ASSIGN .)
    STRING_LIT      reduce using rule 133 (assignment_operator -> ASSIGN .)
    BOOL_LIT        reduce using rule 133 (assignment_operator -> ASSIGN .)


state 107

    (119) logical_and_expression -> logical_and_expression AMP_AMP . inclusive_or_expression
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    inclusive_or_expression        shift and go to state 167
    exclusive_or_expression        shift and go to state 64
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 108

    (75) postfix_expression -> postfix_expression LSQUARE . expression RSQUARE
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 52
    expression                     shift and go to state 168
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 109

    (76) postfix_expression -> postfix_expression LROUND . RROUND
    (77) postfix_expression -> postfix_expression LROUND . argument_expression_list RROUND
    (83) argument_expression_list -> . assignment_expression
    (84) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    RROUND          shift and go to state 169
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 52
    argument_expression_list       shift and go to state 170
    assignment_expression          shift and go to state 171
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 110

    (78) postfix_expression -> postfix_expression DOT . IDENTIFIER
    (79) postfix_expression -> postfix_expression DOT . IDENTIFIER LROUND RROUND
    (80) postfix_expression -> postfix_expression DOT . IDENTIFIER LROUND argument_expression_list RROUND

    IDENTIFIER      shift and go to state 172


state 111

    (81) postfix_expression -> postfix_expression PLUS_PLUS .

    LSQUARE         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LROUND          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DOT             reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_PLUS       reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_MINUS     reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS_EQ         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS_EQ        reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STAR_EQ         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE_EQ       reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULO_EQ       reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AMP_EQ          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_EQ           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CARET_EQ        reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ              reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    ASSIGN          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STAR            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    DIVIDE          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MODULO          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    PLUS            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    MINUS           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LSHIFT          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RSHIFT          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LT              reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GT              reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LT_EQ           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GT_EQ           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    EQ_EQ           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT_EQ          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AMP             reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CARET           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR              reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    AMP_AMP         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    OR_OR           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    IMPORT          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    TYPE            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    VAR             reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CONST           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FUNC            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    $end            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RETURN          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    LCURLY          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    IF              reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FOR             reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    CONTINUE        reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BREAK           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    GOTO            reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    IDENTIFIER      reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    SEMICOLON       reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    NOT             reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    INT_LIT         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    FLOAT_LIT       reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    STRING_LIT      reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    BOOL_LIT        reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RCURLY          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RROUND          reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    RSQUARE         reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)
    COMMA           reduce using rule 81 (postfix_expression -> postfix_expression PLUS_PLUS .)


state 112

    (82) postfix_expression -> postfix_expression MINUS_MINUS .

    LSQUARE         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LROUND          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DOT             reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_PLUS       reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_MINUS     reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS_EQ         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS_EQ        reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STAR_EQ         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE_EQ       reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULO_EQ       reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AMP_EQ          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_EQ           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CARET_EQ        reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ              reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    ASSIGN          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STAR            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    DIVIDE          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MODULO          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    PLUS            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    MINUS           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LSHIFT          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RSHIFT          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LT              reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GT              reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LT_EQ           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GT_EQ           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    EQ_EQ           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT_EQ          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AMP             reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CARET           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR              reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    AMP_AMP         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    OR_OR           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    IMPORT          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    TYPE            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    VAR             reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CONST           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FUNC            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    $end            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RETURN          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    LCURLY          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    IF              reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FOR             reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    CONTINUE        reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BREAK           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    GOTO            reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    IDENTIFIER      reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    SEMICOLON       reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    NOT             reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    INT_LIT         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    FLOAT_LIT       reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    STRING_LIT      reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    BOOL_LIT        reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RCURLY          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RROUND          reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    RSQUARE         reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)
    COMMA           reduce using rule 82 (postfix_expression -> postfix_expression MINUS_MINUS .)


state 113

    (86) unary_expression -> PLUS_PLUS postfix_expression .
    (75) postfix_expression -> postfix_expression . LSQUARE expression RSQUARE
    (76) postfix_expression -> postfix_expression . LROUND RROUND
    (77) postfix_expression -> postfix_expression . LROUND argument_expression_list RROUND
    (78) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (79) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> postfix_expression . PLUS_PLUS
    (82) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for LROUND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    PLUS_EQ         reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    MINUS_EQ        reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    STAR_EQ         reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    DIVIDE_EQ       reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    MODULO_EQ       reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    AMP_EQ          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    OR_EQ           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    CARET_EQ        reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    EQ              reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    ASSIGN          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    STAR            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    DIVIDE          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    MODULO          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    PLUS            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    MINUS           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    LSHIFT          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    RSHIFT          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    LT              reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    GT              reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    LT_EQ           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    GT_EQ           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    EQ_EQ           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    NOT_EQ          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    AMP             reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    CARET           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    OR              reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    AMP_AMP         reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    OR_OR           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    IMPORT          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    TYPE            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    VAR             reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    CONST           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    FUNC            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    $end            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    RETURN          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    LCURLY          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    IF              reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    FOR             reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    CONTINUE        reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    BREAK           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    GOTO            reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    IDENTIFIER      reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    SEMICOLON       reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    NOT             reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    INT_LIT         reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    FLOAT_LIT       reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    STRING_LIT      reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    BOOL_LIT        reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    RCURLY          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    RROUND          reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    RSQUARE         reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    COMMA           reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .)
    LSQUARE         shift and go to state 108
    LROUND          shift and go to state 109
    DOT             shift and go to state 110
    PLUS_PLUS       shift and go to state 111
    MINUS_MINUS     shift and go to state 112

  ! PLUS_PLUS       [ reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .) ]
  ! LROUND          [ reduce using rule 86 (unary_expression -> PLUS_PLUS postfix_expression .) ]


state 114

    (87) unary_expression -> MINUS_MINUS postfix_expression .
    (75) postfix_expression -> postfix_expression . LSQUARE expression RSQUARE
    (76) postfix_expression -> postfix_expression . LROUND RROUND
    (77) postfix_expression -> postfix_expression . LROUND argument_expression_list RROUND
    (78) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (79) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> postfix_expression . PLUS_PLUS
    (82) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for LROUND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    PLUS_EQ         reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    MINUS_EQ        reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    STAR_EQ         reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    DIVIDE_EQ       reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    MODULO_EQ       reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    AMP_EQ          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    OR_EQ           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    CARET_EQ        reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    EQ              reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    ASSIGN          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    STAR            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    DIVIDE          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    MODULO          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    PLUS            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    MINUS           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    LSHIFT          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    RSHIFT          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    LT              reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    GT              reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    LT_EQ           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    GT_EQ           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    EQ_EQ           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    NOT_EQ          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    AMP             reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    CARET           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    OR              reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    AMP_AMP         reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    OR_OR           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    IMPORT          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    TYPE            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    VAR             reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    CONST           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    FUNC            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    $end            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    RETURN          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    LCURLY          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    IF              reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    FOR             reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    CONTINUE        reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    BREAK           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    GOTO            reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    IDENTIFIER      reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    SEMICOLON       reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    NOT             reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    INT_LIT         reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    FLOAT_LIT       reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    STRING_LIT      reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    BOOL_LIT        reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    RCURLY          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    RROUND          reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    RSQUARE         reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    COMMA           reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .)
    LSQUARE         shift and go to state 108
    LROUND          shift and go to state 109
    DOT             shift and go to state 110
    PLUS_PLUS       shift and go to state 111
    MINUS_MINUS     shift and go to state 112

  ! PLUS_PLUS       [ reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .) ]
  ! LROUND          [ reduce using rule 87 (unary_expression -> MINUS_MINUS postfix_expression .) ]


state 115

    (88) unary_expression -> unary_operator postfix_expression .
    (75) postfix_expression -> postfix_expression . LSQUARE expression RSQUARE
    (76) postfix_expression -> postfix_expression . LROUND RROUND
    (77) postfix_expression -> postfix_expression . LROUND argument_expression_list RROUND
    (78) postfix_expression -> postfix_expression . DOT IDENTIFIER
    (79) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> postfix_expression . DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> postfix_expression . PLUS_PLUS
    (82) postfix_expression -> postfix_expression . MINUS_MINUS

  ! shift/reduce conflict for LROUND resolved as shift
  ! shift/reduce conflict for PLUS_PLUS resolved as shift
  ! shift/reduce conflict for MINUS_MINUS resolved as shift
    PLUS_EQ         reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    MINUS_EQ        reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    STAR_EQ         reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    DIVIDE_EQ       reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    MODULO_EQ       reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    AMP_EQ          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    OR_EQ           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    CARET_EQ        reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    EQ              reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    ASSIGN          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    STAR            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    DIVIDE          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    MODULO          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    PLUS            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    MINUS           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    LSHIFT          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    RSHIFT          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    LT              reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    GT              reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    LT_EQ           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    GT_EQ           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    EQ_EQ           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    NOT_EQ          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    AMP             reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    CARET           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    OR              reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    AMP_AMP         reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    OR_OR           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    IMPORT          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    TYPE            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    VAR             reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    CONST           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    FUNC            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    $end            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    RETURN          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    LCURLY          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    IF              reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    FOR             reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    CONTINUE        reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    BREAK           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    GOTO            reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    IDENTIFIER      reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    SEMICOLON       reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    NOT             reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    INT_LIT         reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    FLOAT_LIT       reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    STRING_LIT      reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    BOOL_LIT        reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    RCURLY          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    RROUND          reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    RSQUARE         reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    COMMA           reduce using rule 88 (unary_expression -> unary_operator postfix_expression .)
    LSQUARE         shift and go to state 108
    LROUND          shift and go to state 109
    DOT             shift and go to state 110
    PLUS_PLUS       shift and go to state 111
    MINUS_MINUS     shift and go to state 112

  ! PLUS_PLUS       [ reduce using rule 88 (unary_expression -> unary_operator postfix_expression .) ]
  ! MINUS_MINUS     [ reduce using rule 88 (unary_expression -> unary_operator postfix_expression .) ]
  ! LROUND          [ reduce using rule 88 (unary_expression -> unary_operator postfix_expression .) ]


state 116

    (117) inclusive_or_expression -> inclusive_or_expression OR . exclusive_or_expression
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    exclusive_or_expression        shift and go to state 173
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 117

    (73) primary_expression -> LROUND expression . RROUND

    RROUND          shift and go to state 174


state 118

    (115) exclusive_or_expression -> exclusive_or_expression CARET . and_expression
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    and_expression                 shift and go to state 175
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 119

    (113) and_expression -> and_expression AMP . equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    equality_expression            shift and go to state 176
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 120

    (110) equality_expression -> equality_expression EQ_EQ . relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    relational_expression          shift and go to state 177
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 121

    (111) equality_expression -> equality_expression NOT_EQ . relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    relational_expression          shift and go to state 178
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 122

    (105) relational_expression -> relational_expression LT . shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    shift_expression               shift and go to state 179
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 123

    (106) relational_expression -> relational_expression GT . shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    shift_expression               shift and go to state 180
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 124

    (107) relational_expression -> relational_expression LT_EQ . shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    shift_expression               shift and go to state 181
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 125

    (108) relational_expression -> relational_expression GT_EQ . shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    shift_expression               shift and go to state 182
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 126

    (102) shift_expression -> shift_expression LSHIFT . additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    additive_expression            shift and go to state 183
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 127

    (103) shift_expression -> shift_expression RSHIFT . additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    additive_expression            shift and go to state 184
    multiplicative_expression      shift and go to state 75
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 128

    (99) additive_expression -> additive_expression PLUS . multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    multiplicative_expression      shift and go to state 185
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 129

    (100) additive_expression -> additive_expression MINUS . multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    multiplicative_expression      shift and go to state 186
    unary_expression               shift and go to state 165
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 130

    (95) multiplicative_expression -> multiplicative_expression STAR . unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    unary_expression               shift and go to state 187
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 131

    (96) multiplicative_expression -> multiplicative_expression DIVIDE . unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    unary_expression               shift and go to state 188
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 132

    (97) multiplicative_expression -> multiplicative_expression MODULO . unary_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    unary_expression               shift and go to state 189
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    primary_expression             shift and go to state 57
    lit_operand                    shift and go to state 65

state 133

    (14) arr_type -> LSQUARE INT_LIT RSQUARE . arr_type
    (15) arr_type -> LSQUARE INT_LIT RSQUARE . DATA_TYPE
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE

    DATA_TYPE       shift and go to state 192
    LSQUARE         shift and go to state 190

    arr_type                       shift and go to state 191

state 134

    (16) slc_type -> LSQUARE . RSQUARE slc_type
    (17) slc_type -> LSQUARE . RSQUARE DATA_TYPE

    RSQUARE         shift and go to state 77


state 135

    (16) slc_type -> LSQUARE RSQUARE slc_type .

    EQ              reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    IMPORT          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    TYPE            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    VAR             reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    CONST           reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    FUNC            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    $end            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    RETURN          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    LCURLY          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    IF              reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    FOR             reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    CONTINUE        reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    BREAK           reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    GOTO            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    IDENTIFIER      reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    SEMICOLON       reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    PLUS_PLUS       reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    MINUS_MINUS     reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    AMP             reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    STAR            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    PLUS            reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    MINUS           reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    NOT             reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    LROUND          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    INT_LIT         reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    FLOAT_LIT       reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    STRING_LIT      reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    BOOL_LIT        reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    RCURLY          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    RROUND          reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)
    COMMA           reduce using rule 16 (slc_type -> LSQUARE RSQUARE slc_type .)


state 136

    (17) slc_type -> LSQUARE RSQUARE DATA_TYPE .

    EQ              reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    IMPORT          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    TYPE            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    VAR             reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    CONST           reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    FUNC            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    $end            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    RETURN          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    LCURLY          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    IF              reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    FOR             reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    CONTINUE        reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    BREAK           reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    GOTO            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    IDENTIFIER      reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    SEMICOLON       reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    PLUS_PLUS       reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    MINUS_MINUS     reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    AMP             reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    STAR            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    PLUS            reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    MINUS           reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    NOT             reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    LROUND          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    INT_LIT         reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    FLOAT_LIT       reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    STRING_LIT      reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    BOOL_LIT        reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    RCURLY          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    RROUND          reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)
    COMMA           reduce using rule 17 (slc_type -> LSQUARE RSQUARE DATA_TYPE .)


state 137

    (27) var_decl -> CONST IDENTIFIER type EQ expression .

    IMPORT          reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    TYPE            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    VAR             reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    CONST           reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    FUNC            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    $end            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    RETURN          reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    LCURLY          reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    IF              reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    FOR             reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    CONTINUE        reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    BREAK           reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    GOTO            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    IDENTIFIER      reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    SEMICOLON       reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    PLUS_PLUS       reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    MINUS_MINUS     reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    AMP             reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    STAR            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    PLUS            reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    MINUS           reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    NOT             reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    LROUND          reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    INT_LIT         reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    FLOAT_LIT       reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    STRING_LIT      reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    BOOL_LIT        reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)
    RCURLY          reduce using rule 27 (var_decl -> CONST IDENTIFIER type EQ expression .)


state 138

    (32) block -> LCURLY stmt_list . RCURLY

    RCURLY          shift and go to state 193


state 139

    (33) stmt_list -> stmt . stmt_list
    (34) stmt_list -> stmt .
    (33) stmt_list -> . stmt stmt_list
    (34) stmt_list -> . stmt
    (35) stmt -> . var_decl
    (36) stmt -> . return_stmt
    (37) stmt -> . block
    (38) stmt -> . selection_stmt
    (39) stmt -> . iteration_stmt
    (40) stmt -> . jump_stmt
    (41) stmt -> . label_stmt
    (42) stmt -> . expression_stmt
    (43) stmt -> . expression
    (24) var_decl -> . VAR IDENTIFIER type
    (25) var_decl -> . VAR IDENTIFIER type EQ expression
    (26) var_decl -> . VAR IDENTIFIER ASSIGN expression
    (27) var_decl -> . CONST IDENTIFIER type EQ expression
    (28) var_decl -> . CONST IDENTIFIER ASSIGN expression
    (44) return_stmt -> . RETURN argument_expression_list
    (32) block -> . LCURLY stmt_list RCURLY
    (47) selection_stmt -> . IF expression block
    (48) selection_stmt -> . IF expression block ELSE block
    (49) selection_stmt -> . IF expression block ELSE selection_stmt
    (50) iteration_stmt -> . FOR block
    (51) iteration_stmt -> . FOR expression block
    (52) iteration_stmt -> . FOR expression_stmt expression_stmt expression block
    (53) jump_stmt -> . CONTINUE
    (54) jump_stmt -> . BREAK
    (55) jump_stmt -> . GOTO IDENTIFIER
    (56) label_stmt -> . IDENTIFIER COLON stmt
    (45) expression_stmt -> . SEMICOLON
    (46) expression_stmt -> . expression SEMICOLON
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    RCURLY          reduce using rule 34 (stmt_list -> stmt .)
    VAR             shift and go to state 13
    CONST           shift and go to state 14
    RETURN          shift and go to state 150
    LCURLY          shift and go to state 83
    IF              shift and go to state 151
    FOR             shift and go to state 152
    CONTINUE        shift and go to state 153
    BREAK           shift and go to state 154
    GOTO            shift and go to state 155
    IDENTIFIER      shift and go to state 149
    SEMICOLON       shift and go to state 156
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    stmt                           shift and go to state 139
    stmt_list                      shift and go to state 194
    var_decl                       shift and go to state 140
    return_stmt                    shift and go to state 141
    block                          shift and go to state 142
    selection_stmt                 shift and go to state 143
    iteration_stmt                 shift and go to state 144
    jump_stmt                      shift and go to state 145
    label_stmt                     shift and go to state 146
    expression_stmt                shift and go to state 147
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 140

    (35) stmt -> var_decl .

    VAR             reduce using rule 35 (stmt -> var_decl .)
    CONST           reduce using rule 35 (stmt -> var_decl .)
    RETURN          reduce using rule 35 (stmt -> var_decl .)
    LCURLY          reduce using rule 35 (stmt -> var_decl .)
    IF              reduce using rule 35 (stmt -> var_decl .)
    FOR             reduce using rule 35 (stmt -> var_decl .)
    CONTINUE        reduce using rule 35 (stmt -> var_decl .)
    BREAK           reduce using rule 35 (stmt -> var_decl .)
    GOTO            reduce using rule 35 (stmt -> var_decl .)
    IDENTIFIER      reduce using rule 35 (stmt -> var_decl .)
    SEMICOLON       reduce using rule 35 (stmt -> var_decl .)
    PLUS_PLUS       reduce using rule 35 (stmt -> var_decl .)
    MINUS_MINUS     reduce using rule 35 (stmt -> var_decl .)
    AMP             reduce using rule 35 (stmt -> var_decl .)
    STAR            reduce using rule 35 (stmt -> var_decl .)
    PLUS            reduce using rule 35 (stmt -> var_decl .)
    MINUS           reduce using rule 35 (stmt -> var_decl .)
    NOT             reduce using rule 35 (stmt -> var_decl .)
    LROUND          reduce using rule 35 (stmt -> var_decl .)
    INT_LIT         reduce using rule 35 (stmt -> var_decl .)
    FLOAT_LIT       reduce using rule 35 (stmt -> var_decl .)
    STRING_LIT      reduce using rule 35 (stmt -> var_decl .)
    BOOL_LIT        reduce using rule 35 (stmt -> var_decl .)
    RCURLY          reduce using rule 35 (stmt -> var_decl .)


state 141

    (36) stmt -> return_stmt .

    VAR             reduce using rule 36 (stmt -> return_stmt .)
    CONST           reduce using rule 36 (stmt -> return_stmt .)
    RETURN          reduce using rule 36 (stmt -> return_stmt .)
    LCURLY          reduce using rule 36 (stmt -> return_stmt .)
    IF              reduce using rule 36 (stmt -> return_stmt .)
    FOR             reduce using rule 36 (stmt -> return_stmt .)
    CONTINUE        reduce using rule 36 (stmt -> return_stmt .)
    BREAK           reduce using rule 36 (stmt -> return_stmt .)
    GOTO            reduce using rule 36 (stmt -> return_stmt .)
    IDENTIFIER      reduce using rule 36 (stmt -> return_stmt .)
    SEMICOLON       reduce using rule 36 (stmt -> return_stmt .)
    PLUS_PLUS       reduce using rule 36 (stmt -> return_stmt .)
    MINUS_MINUS     reduce using rule 36 (stmt -> return_stmt .)
    AMP             reduce using rule 36 (stmt -> return_stmt .)
    STAR            reduce using rule 36 (stmt -> return_stmt .)
    PLUS            reduce using rule 36 (stmt -> return_stmt .)
    MINUS           reduce using rule 36 (stmt -> return_stmt .)
    NOT             reduce using rule 36 (stmt -> return_stmt .)
    LROUND          reduce using rule 36 (stmt -> return_stmt .)
    INT_LIT         reduce using rule 36 (stmt -> return_stmt .)
    FLOAT_LIT       reduce using rule 36 (stmt -> return_stmt .)
    STRING_LIT      reduce using rule 36 (stmt -> return_stmt .)
    BOOL_LIT        reduce using rule 36 (stmt -> return_stmt .)
    RCURLY          reduce using rule 36 (stmt -> return_stmt .)


state 142

    (37) stmt -> block .

    VAR             reduce using rule 37 (stmt -> block .)
    CONST           reduce using rule 37 (stmt -> block .)
    RETURN          reduce using rule 37 (stmt -> block .)
    LCURLY          reduce using rule 37 (stmt -> block .)
    IF              reduce using rule 37 (stmt -> block .)
    FOR             reduce using rule 37 (stmt -> block .)
    CONTINUE        reduce using rule 37 (stmt -> block .)
    BREAK           reduce using rule 37 (stmt -> block .)
    GOTO            reduce using rule 37 (stmt -> block .)
    IDENTIFIER      reduce using rule 37 (stmt -> block .)
    SEMICOLON       reduce using rule 37 (stmt -> block .)
    PLUS_PLUS       reduce using rule 37 (stmt -> block .)
    MINUS_MINUS     reduce using rule 37 (stmt -> block .)
    AMP             reduce using rule 37 (stmt -> block .)
    STAR            reduce using rule 37 (stmt -> block .)
    PLUS            reduce using rule 37 (stmt -> block .)
    MINUS           reduce using rule 37 (stmt -> block .)
    NOT             reduce using rule 37 (stmt -> block .)
    LROUND          reduce using rule 37 (stmt -> block .)
    INT_LIT         reduce using rule 37 (stmt -> block .)
    FLOAT_LIT       reduce using rule 37 (stmt -> block .)
    STRING_LIT      reduce using rule 37 (stmt -> block .)
    BOOL_LIT        reduce using rule 37 (stmt -> block .)
    RCURLY          reduce using rule 37 (stmt -> block .)


state 143

    (38) stmt -> selection_stmt .

    VAR             reduce using rule 38 (stmt -> selection_stmt .)
    CONST           reduce using rule 38 (stmt -> selection_stmt .)
    RETURN          reduce using rule 38 (stmt -> selection_stmt .)
    LCURLY          reduce using rule 38 (stmt -> selection_stmt .)
    IF              reduce using rule 38 (stmt -> selection_stmt .)
    FOR             reduce using rule 38 (stmt -> selection_stmt .)
    CONTINUE        reduce using rule 38 (stmt -> selection_stmt .)
    BREAK           reduce using rule 38 (stmt -> selection_stmt .)
    GOTO            reduce using rule 38 (stmt -> selection_stmt .)
    IDENTIFIER      reduce using rule 38 (stmt -> selection_stmt .)
    SEMICOLON       reduce using rule 38 (stmt -> selection_stmt .)
    PLUS_PLUS       reduce using rule 38 (stmt -> selection_stmt .)
    MINUS_MINUS     reduce using rule 38 (stmt -> selection_stmt .)
    AMP             reduce using rule 38 (stmt -> selection_stmt .)
    STAR            reduce using rule 38 (stmt -> selection_stmt .)
    PLUS            reduce using rule 38 (stmt -> selection_stmt .)
    MINUS           reduce using rule 38 (stmt -> selection_stmt .)
    NOT             reduce using rule 38 (stmt -> selection_stmt .)
    LROUND          reduce using rule 38 (stmt -> selection_stmt .)
    INT_LIT         reduce using rule 38 (stmt -> selection_stmt .)
    FLOAT_LIT       reduce using rule 38 (stmt -> selection_stmt .)
    STRING_LIT      reduce using rule 38 (stmt -> selection_stmt .)
    BOOL_LIT        reduce using rule 38 (stmt -> selection_stmt .)
    RCURLY          reduce using rule 38 (stmt -> selection_stmt .)


state 144

    (39) stmt -> iteration_stmt .

    VAR             reduce using rule 39 (stmt -> iteration_stmt .)
    CONST           reduce using rule 39 (stmt -> iteration_stmt .)
    RETURN          reduce using rule 39 (stmt -> iteration_stmt .)
    LCURLY          reduce using rule 39 (stmt -> iteration_stmt .)
    IF              reduce using rule 39 (stmt -> iteration_stmt .)
    FOR             reduce using rule 39 (stmt -> iteration_stmt .)
    CONTINUE        reduce using rule 39 (stmt -> iteration_stmt .)
    BREAK           reduce using rule 39 (stmt -> iteration_stmt .)
    GOTO            reduce using rule 39 (stmt -> iteration_stmt .)
    IDENTIFIER      reduce using rule 39 (stmt -> iteration_stmt .)
    SEMICOLON       reduce using rule 39 (stmt -> iteration_stmt .)
    PLUS_PLUS       reduce using rule 39 (stmt -> iteration_stmt .)
    MINUS_MINUS     reduce using rule 39 (stmt -> iteration_stmt .)
    AMP             reduce using rule 39 (stmt -> iteration_stmt .)
    STAR            reduce using rule 39 (stmt -> iteration_stmt .)
    PLUS            reduce using rule 39 (stmt -> iteration_stmt .)
    MINUS           reduce using rule 39 (stmt -> iteration_stmt .)
    NOT             reduce using rule 39 (stmt -> iteration_stmt .)
    LROUND          reduce using rule 39 (stmt -> iteration_stmt .)
    INT_LIT         reduce using rule 39 (stmt -> iteration_stmt .)
    FLOAT_LIT       reduce using rule 39 (stmt -> iteration_stmt .)
    STRING_LIT      reduce using rule 39 (stmt -> iteration_stmt .)
    BOOL_LIT        reduce using rule 39 (stmt -> iteration_stmt .)
    RCURLY          reduce using rule 39 (stmt -> iteration_stmt .)


state 145

    (40) stmt -> jump_stmt .

    VAR             reduce using rule 40 (stmt -> jump_stmt .)
    CONST           reduce using rule 40 (stmt -> jump_stmt .)
    RETURN          reduce using rule 40 (stmt -> jump_stmt .)
    LCURLY          reduce using rule 40 (stmt -> jump_stmt .)
    IF              reduce using rule 40 (stmt -> jump_stmt .)
    FOR             reduce using rule 40 (stmt -> jump_stmt .)
    CONTINUE        reduce using rule 40 (stmt -> jump_stmt .)
    BREAK           reduce using rule 40 (stmt -> jump_stmt .)
    GOTO            reduce using rule 40 (stmt -> jump_stmt .)
    IDENTIFIER      reduce using rule 40 (stmt -> jump_stmt .)
    SEMICOLON       reduce using rule 40 (stmt -> jump_stmt .)
    PLUS_PLUS       reduce using rule 40 (stmt -> jump_stmt .)
    MINUS_MINUS     reduce using rule 40 (stmt -> jump_stmt .)
    AMP             reduce using rule 40 (stmt -> jump_stmt .)
    STAR            reduce using rule 40 (stmt -> jump_stmt .)
    PLUS            reduce using rule 40 (stmt -> jump_stmt .)
    MINUS           reduce using rule 40 (stmt -> jump_stmt .)
    NOT             reduce using rule 40 (stmt -> jump_stmt .)
    LROUND          reduce using rule 40 (stmt -> jump_stmt .)
    INT_LIT         reduce using rule 40 (stmt -> jump_stmt .)
    FLOAT_LIT       reduce using rule 40 (stmt -> jump_stmt .)
    STRING_LIT      reduce using rule 40 (stmt -> jump_stmt .)
    BOOL_LIT        reduce using rule 40 (stmt -> jump_stmt .)
    RCURLY          reduce using rule 40 (stmt -> jump_stmt .)


state 146

    (41) stmt -> label_stmt .

    VAR             reduce using rule 41 (stmt -> label_stmt .)
    CONST           reduce using rule 41 (stmt -> label_stmt .)
    RETURN          reduce using rule 41 (stmt -> label_stmt .)
    LCURLY          reduce using rule 41 (stmt -> label_stmt .)
    IF              reduce using rule 41 (stmt -> label_stmt .)
    FOR             reduce using rule 41 (stmt -> label_stmt .)
    CONTINUE        reduce using rule 41 (stmt -> label_stmt .)
    BREAK           reduce using rule 41 (stmt -> label_stmt .)
    GOTO            reduce using rule 41 (stmt -> label_stmt .)
    IDENTIFIER      reduce using rule 41 (stmt -> label_stmt .)
    SEMICOLON       reduce using rule 41 (stmt -> label_stmt .)
    PLUS_PLUS       reduce using rule 41 (stmt -> label_stmt .)
    MINUS_MINUS     reduce using rule 41 (stmt -> label_stmt .)
    AMP             reduce using rule 41 (stmt -> label_stmt .)
    STAR            reduce using rule 41 (stmt -> label_stmt .)
    PLUS            reduce using rule 41 (stmt -> label_stmt .)
    MINUS           reduce using rule 41 (stmt -> label_stmt .)
    NOT             reduce using rule 41 (stmt -> label_stmt .)
    LROUND          reduce using rule 41 (stmt -> label_stmt .)
    INT_LIT         reduce using rule 41 (stmt -> label_stmt .)
    FLOAT_LIT       reduce using rule 41 (stmt -> label_stmt .)
    STRING_LIT      reduce using rule 41 (stmt -> label_stmt .)
    BOOL_LIT        reduce using rule 41 (stmt -> label_stmt .)
    RCURLY          reduce using rule 41 (stmt -> label_stmt .)


state 147

    (42) stmt -> expression_stmt .

    VAR             reduce using rule 42 (stmt -> expression_stmt .)
    CONST           reduce using rule 42 (stmt -> expression_stmt .)
    RETURN          reduce using rule 42 (stmt -> expression_stmt .)
    LCURLY          reduce using rule 42 (stmt -> expression_stmt .)
    IF              reduce using rule 42 (stmt -> expression_stmt .)
    FOR             reduce using rule 42 (stmt -> expression_stmt .)
    CONTINUE        reduce using rule 42 (stmt -> expression_stmt .)
    BREAK           reduce using rule 42 (stmt -> expression_stmt .)
    GOTO            reduce using rule 42 (stmt -> expression_stmt .)
    IDENTIFIER      reduce using rule 42 (stmt -> expression_stmt .)
    SEMICOLON       reduce using rule 42 (stmt -> expression_stmt .)
    PLUS_PLUS       reduce using rule 42 (stmt -> expression_stmt .)
    MINUS_MINUS     reduce using rule 42 (stmt -> expression_stmt .)
    AMP             reduce using rule 42 (stmt -> expression_stmt .)
    STAR            reduce using rule 42 (stmt -> expression_stmt .)
    PLUS            reduce using rule 42 (stmt -> expression_stmt .)
    MINUS           reduce using rule 42 (stmt -> expression_stmt .)
    NOT             reduce using rule 42 (stmt -> expression_stmt .)
    LROUND          reduce using rule 42 (stmt -> expression_stmt .)
    INT_LIT         reduce using rule 42 (stmt -> expression_stmt .)
    FLOAT_LIT       reduce using rule 42 (stmt -> expression_stmt .)
    STRING_LIT      reduce using rule 42 (stmt -> expression_stmt .)
    BOOL_LIT        reduce using rule 42 (stmt -> expression_stmt .)
    RCURLY          reduce using rule 42 (stmt -> expression_stmt .)


state 148

    (43) stmt -> expression .
    (46) expression_stmt -> expression . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    VAR             reduce using rule 43 (stmt -> expression .)
    CONST           reduce using rule 43 (stmt -> expression .)
    RETURN          reduce using rule 43 (stmt -> expression .)
    LCURLY          reduce using rule 43 (stmt -> expression .)
    IF              reduce using rule 43 (stmt -> expression .)
    FOR             reduce using rule 43 (stmt -> expression .)
    CONTINUE        reduce using rule 43 (stmt -> expression .)
    BREAK           reduce using rule 43 (stmt -> expression .)
    GOTO            reduce using rule 43 (stmt -> expression .)
    IDENTIFIER      reduce using rule 43 (stmt -> expression .)
    PLUS_PLUS       reduce using rule 43 (stmt -> expression .)
    MINUS_MINUS     reduce using rule 43 (stmt -> expression .)
    AMP             reduce using rule 43 (stmt -> expression .)
    STAR            reduce using rule 43 (stmt -> expression .)
    PLUS            reduce using rule 43 (stmt -> expression .)
    MINUS           reduce using rule 43 (stmt -> expression .)
    NOT             reduce using rule 43 (stmt -> expression .)
    LROUND          reduce using rule 43 (stmt -> expression .)
    INT_LIT         reduce using rule 43 (stmt -> expression .)
    FLOAT_LIT       reduce using rule 43 (stmt -> expression .)
    STRING_LIT      reduce using rule 43 (stmt -> expression .)
    BOOL_LIT        reduce using rule 43 (stmt -> expression .)
    RCURLY          reduce using rule 43 (stmt -> expression .)
    SEMICOLON       shift and go to state 195

  ! SEMICOLON       [ reduce using rule 43 (stmt -> expression .) ]


state 149

    (56) label_stmt -> IDENTIFIER . COLON stmt
    (71) primary_expression -> IDENTIFIER .

    COLON           shift and go to state 196
    LSQUARE         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LROUND          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DOT             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS_PLUS       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS_MINUS     reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS_EQ         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS_EQ        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STAR_EQ         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DIVIDE_EQ       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MODULO_EQ       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP_EQ          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CARET_EQ        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    EQ              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    ASSIGN          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STAR            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    DIVIDE          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MODULO          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    PLUS            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    MINUS           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LSHIFT          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RSHIFT          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LT              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GT              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LT_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GT_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    EQ_EQ           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    NOT_EQ          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CARET           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    AMP_AMP         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    OR_OR           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    SEMICOLON       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    VAR             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CONST           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RETURN          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    LCURLY          reduce using rule 71 (primary_expression -> IDENTIFIER .)
    IF              reduce using rule 71 (primary_expression -> IDENTIFIER .)
    FOR             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    CONTINUE        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    BREAK           reduce using rule 71 (primary_expression -> IDENTIFIER .)
    GOTO            reduce using rule 71 (primary_expression -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 71 (primary_expression -> IDENTIFIER .)
    NOT             reduce using rule 71 (primary_expression -> IDENTIFIER .)
    INT_LIT         reduce using rule 71 (primary_expression -> IDENTIFIER .)
    FLOAT_LIT       reduce using rule 71 (primary_expression -> IDENTIFIER .)
    STRING_LIT      reduce using rule 71 (primary_expression -> IDENTIFIER .)
    BOOL_LIT        reduce using rule 71 (primary_expression -> IDENTIFIER .)
    RCURLY          reduce using rule 71 (primary_expression -> IDENTIFIER .)


state 150

    (44) return_stmt -> RETURN . argument_expression_list
    (83) argument_expression_list -> . assignment_expression
    (84) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    argument_expression_list       shift and go to state 197
    assignment_expression          shift and go to state 171
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 151

    (47) selection_stmt -> IF . expression block
    (48) selection_stmt -> IF . expression block ELSE block
    (49) selection_stmt -> IF . expression block ELSE selection_stmt
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 198
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 152

    (50) iteration_stmt -> FOR . block
    (51) iteration_stmt -> FOR . expression block
    (52) iteration_stmt -> FOR . expression_stmt expression_stmt expression block
    (32) block -> . LCURLY stmt_list RCURLY
    (134) expression -> . assignment_expression
    (45) expression_stmt -> . SEMICOLON
    (46) expression_stmt -> . expression SEMICOLON
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    LCURLY          shift and go to state 83
    SEMICOLON       shift and go to state 156
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    block                          shift and go to state 199
    expression                     shift and go to state 200
    expression_stmt                shift and go to state 201
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 153

    (53) jump_stmt -> CONTINUE .

    VAR             reduce using rule 53 (jump_stmt -> CONTINUE .)
    CONST           reduce using rule 53 (jump_stmt -> CONTINUE .)
    RETURN          reduce using rule 53 (jump_stmt -> CONTINUE .)
    LCURLY          reduce using rule 53 (jump_stmt -> CONTINUE .)
    IF              reduce using rule 53 (jump_stmt -> CONTINUE .)
    FOR             reduce using rule 53 (jump_stmt -> CONTINUE .)
    CONTINUE        reduce using rule 53 (jump_stmt -> CONTINUE .)
    BREAK           reduce using rule 53 (jump_stmt -> CONTINUE .)
    GOTO            reduce using rule 53 (jump_stmt -> CONTINUE .)
    IDENTIFIER      reduce using rule 53 (jump_stmt -> CONTINUE .)
    SEMICOLON       reduce using rule 53 (jump_stmt -> CONTINUE .)
    PLUS_PLUS       reduce using rule 53 (jump_stmt -> CONTINUE .)
    MINUS_MINUS     reduce using rule 53 (jump_stmt -> CONTINUE .)
    AMP             reduce using rule 53 (jump_stmt -> CONTINUE .)
    STAR            reduce using rule 53 (jump_stmt -> CONTINUE .)
    PLUS            reduce using rule 53 (jump_stmt -> CONTINUE .)
    MINUS           reduce using rule 53 (jump_stmt -> CONTINUE .)
    NOT             reduce using rule 53 (jump_stmt -> CONTINUE .)
    LROUND          reduce using rule 53 (jump_stmt -> CONTINUE .)
    INT_LIT         reduce using rule 53 (jump_stmt -> CONTINUE .)
    FLOAT_LIT       reduce using rule 53 (jump_stmt -> CONTINUE .)
    STRING_LIT      reduce using rule 53 (jump_stmt -> CONTINUE .)
    BOOL_LIT        reduce using rule 53 (jump_stmt -> CONTINUE .)
    RCURLY          reduce using rule 53 (jump_stmt -> CONTINUE .)


state 154

    (54) jump_stmt -> BREAK .

    VAR             reduce using rule 54 (jump_stmt -> BREAK .)
    CONST           reduce using rule 54 (jump_stmt -> BREAK .)
    RETURN          reduce using rule 54 (jump_stmt -> BREAK .)
    LCURLY          reduce using rule 54 (jump_stmt -> BREAK .)
    IF              reduce using rule 54 (jump_stmt -> BREAK .)
    FOR             reduce using rule 54 (jump_stmt -> BREAK .)
    CONTINUE        reduce using rule 54 (jump_stmt -> BREAK .)
    BREAK           reduce using rule 54 (jump_stmt -> BREAK .)
    GOTO            reduce using rule 54 (jump_stmt -> BREAK .)
    IDENTIFIER      reduce using rule 54 (jump_stmt -> BREAK .)
    SEMICOLON       reduce using rule 54 (jump_stmt -> BREAK .)
    PLUS_PLUS       reduce using rule 54 (jump_stmt -> BREAK .)
    MINUS_MINUS     reduce using rule 54 (jump_stmt -> BREAK .)
    AMP             reduce using rule 54 (jump_stmt -> BREAK .)
    STAR            reduce using rule 54 (jump_stmt -> BREAK .)
    PLUS            reduce using rule 54 (jump_stmt -> BREAK .)
    MINUS           reduce using rule 54 (jump_stmt -> BREAK .)
    NOT             reduce using rule 54 (jump_stmt -> BREAK .)
    LROUND          reduce using rule 54 (jump_stmt -> BREAK .)
    INT_LIT         reduce using rule 54 (jump_stmt -> BREAK .)
    FLOAT_LIT       reduce using rule 54 (jump_stmt -> BREAK .)
    STRING_LIT      reduce using rule 54 (jump_stmt -> BREAK .)
    BOOL_LIT        reduce using rule 54 (jump_stmt -> BREAK .)
    RCURLY          reduce using rule 54 (jump_stmt -> BREAK .)


state 155

    (55) jump_stmt -> GOTO . IDENTIFIER

    IDENTIFIER      shift and go to state 202


state 156

    (45) expression_stmt -> SEMICOLON .

    VAR             reduce using rule 45 (expression_stmt -> SEMICOLON .)
    CONST           reduce using rule 45 (expression_stmt -> SEMICOLON .)
    RETURN          reduce using rule 45 (expression_stmt -> SEMICOLON .)
    LCURLY          reduce using rule 45 (expression_stmt -> SEMICOLON .)
    IF              reduce using rule 45 (expression_stmt -> SEMICOLON .)
    FOR             reduce using rule 45 (expression_stmt -> SEMICOLON .)
    CONTINUE        reduce using rule 45 (expression_stmt -> SEMICOLON .)
    BREAK           reduce using rule 45 (expression_stmt -> SEMICOLON .)
    GOTO            reduce using rule 45 (expression_stmt -> SEMICOLON .)
    IDENTIFIER      reduce using rule 45 (expression_stmt -> SEMICOLON .)
    SEMICOLON       reduce using rule 45 (expression_stmt -> SEMICOLON .)
    PLUS_PLUS       reduce using rule 45 (expression_stmt -> SEMICOLON .)
    MINUS_MINUS     reduce using rule 45 (expression_stmt -> SEMICOLON .)
    AMP             reduce using rule 45 (expression_stmt -> SEMICOLON .)
    STAR            reduce using rule 45 (expression_stmt -> SEMICOLON .)
    PLUS            reduce using rule 45 (expression_stmt -> SEMICOLON .)
    MINUS           reduce using rule 45 (expression_stmt -> SEMICOLON .)
    NOT             reduce using rule 45 (expression_stmt -> SEMICOLON .)
    LROUND          reduce using rule 45 (expression_stmt -> SEMICOLON .)
    INT_LIT         reduce using rule 45 (expression_stmt -> SEMICOLON .)
    FLOAT_LIT       reduce using rule 45 (expression_stmt -> SEMICOLON .)
    STRING_LIT      reduce using rule 45 (expression_stmt -> SEMICOLON .)
    BOOL_LIT        reduce using rule 45 (expression_stmt -> SEMICOLON .)
    RCURLY          reduce using rule 45 (expression_stmt -> SEMICOLON .)


state 157

    (61) params -> LROUND param_list RROUND .

    DATA_TYPE       reduce using rule 61 (params -> LROUND param_list RROUND .)
    LSQUARE         reduce using rule 61 (params -> LROUND param_list RROUND .)
    STAR            reduce using rule 61 (params -> LROUND param_list RROUND .)
    LCURLY          reduce using rule 61 (params -> LROUND param_list RROUND .)
    IMPORT          reduce using rule 61 (params -> LROUND param_list RROUND .)
    TYPE            reduce using rule 61 (params -> LROUND param_list RROUND .)
    VAR             reduce using rule 61 (params -> LROUND param_list RROUND .)
    CONST           reduce using rule 61 (params -> LROUND param_list RROUND .)
    FUNC            reduce using rule 61 (params -> LROUND param_list RROUND .)
    $end            reduce using rule 61 (params -> LROUND param_list RROUND .)


state 158

    (65) param_list -> param_list COMMA . identifier_list type
    (66) identifier_list -> . IDENTIFIER
    (67) identifier_list -> . identifier_list COMMA IDENTIFIER

    IDENTIFIER      shift and go to state 90

    identifier_list                shift and go to state 203

state 159

    (64) param_list -> identifier_list type .

    RROUND          reduce using rule 64 (param_list -> identifier_list type .)
    COMMA           reduce using rule 64 (param_list -> identifier_list type .)


state 160

    (67) identifier_list -> identifier_list COMMA . IDENTIFIER

    IDENTIFIER      shift and go to state 204


state 161

    (69) method_decl -> FUNC LROUND IDENTIFIER type RROUND . IDENTIFIER signature
    (70) method_decl -> FUNC LROUND IDENTIFIER type RROUND . IDENTIFIER signature block

    IDENTIFIER      shift and go to state 205


state 162

    (30) var_decl_list -> IDENTIFIER type . var_decl_list
    (31) var_decl_list -> IDENTIFIER type .
    (30) var_decl_list -> . IDENTIFIER type var_decl_list
    (31) var_decl_list -> . IDENTIFIER type

    RCURLY          reduce using rule 31 (var_decl_list -> IDENTIFIER type .)
    IDENTIFIER      shift and go to state 92

    var_decl_list                  shift and go to state 206

state 163

    (29) struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .

    IMPORT          reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)
    TYPE            reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)
    VAR             reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)
    CONST           reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)
    FUNC            reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)
    $end            reduce using rule 29 (struct_decl -> TYPE IDENTIFIER STRUCT LCURLY var_decl_list RCURLY .)


state 164

    (121) logical_or_expression -> logical_or_expression OR_OR logical_and_expression .
    (119) logical_and_expression -> logical_and_expression . AMP_AMP inclusive_or_expression

    OR_OR           reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    IMPORT          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    TYPE            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    VAR             reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    CONST           reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    FUNC            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    $end            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RETURN          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    LCURLY          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    IF              reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    FOR             reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    CONTINUE        reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    BREAK           reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    GOTO            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    IDENTIFIER      reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    SEMICOLON       reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    PLUS_PLUS       reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    MINUS_MINUS     reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    AMP             reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    STAR            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    PLUS            reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    MINUS           reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    NOT             reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    LROUND          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    INT_LIT         reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    FLOAT_LIT       reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    STRING_LIT      reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    BOOL_LIT        reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RCURLY          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RROUND          reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    RSQUARE         reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    COMMA           reduce using rule 121 (logical_or_expression -> logical_or_expression OR_OR logical_and_expression .)
    AMP_AMP         shift and go to state 107


state 165

    (94) multiplicative_expression -> unary_expression .

    STAR            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    DIVIDE          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MODULO          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    PLUS            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MINUS           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LSHIFT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RSHIFT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LT              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GT              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LT_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GT_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    EQ_EQ           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    NOT_EQ          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    AMP             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CARET           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    OR              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    AMP_AMP         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    OR_OR           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IMPORT          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    TYPE            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    VAR             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CONST           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FUNC            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    $end            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RETURN          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LCURLY          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IF              reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FOR             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    CONTINUE        reduce using rule 94 (multiplicative_expression -> unary_expression .)
    BREAK           reduce using rule 94 (multiplicative_expression -> unary_expression .)
    GOTO            reduce using rule 94 (multiplicative_expression -> unary_expression .)
    IDENTIFIER      reduce using rule 94 (multiplicative_expression -> unary_expression .)
    SEMICOLON       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    PLUS_PLUS       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    MINUS_MINUS     reduce using rule 94 (multiplicative_expression -> unary_expression .)
    NOT             reduce using rule 94 (multiplicative_expression -> unary_expression .)
    LROUND          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    INT_LIT         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    FLOAT_LIT       reduce using rule 94 (multiplicative_expression -> unary_expression .)
    STRING_LIT      reduce using rule 94 (multiplicative_expression -> unary_expression .)
    BOOL_LIT        reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RCURLY          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RROUND          reduce using rule 94 (multiplicative_expression -> unary_expression .)
    RSQUARE         reduce using rule 94 (multiplicative_expression -> unary_expression .)
    COMMA           reduce using rule 94 (multiplicative_expression -> unary_expression .)


state 166

    (123) assignment_expression -> unary_expression assignment_operator assignment_expression .

    IMPORT          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    TYPE            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    VAR             reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CONST           reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FUNC            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    $end            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RETURN          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LCURLY          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    IF              reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FOR             reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    CONTINUE        reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    BREAK           reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    GOTO            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    IDENTIFIER      reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMICOLON       reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PLUS_PLUS       reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    MINUS_MINUS     reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    AMP             reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STAR            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    PLUS            reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    MINUS           reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    NOT             reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    LROUND          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    INT_LIT         reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    FLOAT_LIT       reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    STRING_LIT      reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    BOOL_LIT        reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RCURLY          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RROUND          reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RSQUARE         reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    COMMA           reduce using rule 123 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 167

    (119) logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .
    (117) inclusive_or_expression -> inclusive_or_expression . OR exclusive_or_expression

    AMP_AMP         reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    OR_OR           reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    IMPORT          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    TYPE            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    VAR             reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    CONST           reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    FUNC            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    $end            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    RETURN          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    LCURLY          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    IF              reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    FOR             reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    CONTINUE        reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    BREAK           reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    GOTO            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    IDENTIFIER      reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    SEMICOLON       reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    PLUS_PLUS       reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    MINUS_MINUS     reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    AMP             reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    STAR            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    PLUS            reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    MINUS           reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    NOT             reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    LROUND          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    INT_LIT         reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    FLOAT_LIT       reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    STRING_LIT      reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    BOOL_LIT        reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    RCURLY          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    RROUND          reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    RSQUARE         reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    COMMA           reduce using rule 119 (logical_and_expression -> logical_and_expression AMP_AMP inclusive_or_expression .)
    OR              shift and go to state 116


state 168

    (75) postfix_expression -> postfix_expression LSQUARE expression . RSQUARE

    RSQUARE         shift and go to state 207


state 169

    (76) postfix_expression -> postfix_expression LROUND RROUND .

    LSQUARE         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    LROUND          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    DOT             reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    PLUS_PLUS       reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    MINUS_MINUS     reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    PLUS_EQ         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    MINUS_EQ        reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    STAR_EQ         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    DIVIDE_EQ       reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    MODULO_EQ       reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    AMP_EQ          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    OR_EQ           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    CARET_EQ        reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    EQ              reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    ASSIGN          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    STAR            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    DIVIDE          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    MODULO          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    PLUS            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    MINUS           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    LSHIFT          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    RSHIFT          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    LT              reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    GT              reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    LT_EQ           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    GT_EQ           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    EQ_EQ           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    NOT_EQ          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    AMP             reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    CARET           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    OR              reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    AMP_AMP         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    OR_OR           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    IMPORT          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    TYPE            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    VAR             reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    CONST           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    FUNC            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    $end            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    RETURN          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    LCURLY          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    IF              reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    FOR             reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    CONTINUE        reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    BREAK           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    GOTO            reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    IDENTIFIER      reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    SEMICOLON       reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    NOT             reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    INT_LIT         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    FLOAT_LIT       reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    STRING_LIT      reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    BOOL_LIT        reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    RCURLY          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    RROUND          reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    RSQUARE         reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)
    COMMA           reduce using rule 76 (postfix_expression -> postfix_expression LROUND RROUND .)


state 170

    (77) postfix_expression -> postfix_expression LROUND argument_expression_list . RROUND
    (84) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RROUND          shift and go to state 208
    COMMA           shift and go to state 209


state 171

    (83) argument_expression_list -> assignment_expression .

    RROUND          reduce using rule 83 (argument_expression_list -> assignment_expression .)
    COMMA           reduce using rule 83 (argument_expression_list -> assignment_expression .)
    VAR             reduce using rule 83 (argument_expression_list -> assignment_expression .)
    CONST           reduce using rule 83 (argument_expression_list -> assignment_expression .)
    RETURN          reduce using rule 83 (argument_expression_list -> assignment_expression .)
    LCURLY          reduce using rule 83 (argument_expression_list -> assignment_expression .)
    IF              reduce using rule 83 (argument_expression_list -> assignment_expression .)
    FOR             reduce using rule 83 (argument_expression_list -> assignment_expression .)
    CONTINUE        reduce using rule 83 (argument_expression_list -> assignment_expression .)
    BREAK           reduce using rule 83 (argument_expression_list -> assignment_expression .)
    GOTO            reduce using rule 83 (argument_expression_list -> assignment_expression .)
    IDENTIFIER      reduce using rule 83 (argument_expression_list -> assignment_expression .)
    SEMICOLON       reduce using rule 83 (argument_expression_list -> assignment_expression .)
    PLUS_PLUS       reduce using rule 83 (argument_expression_list -> assignment_expression .)
    MINUS_MINUS     reduce using rule 83 (argument_expression_list -> assignment_expression .)
    AMP             reduce using rule 83 (argument_expression_list -> assignment_expression .)
    STAR            reduce using rule 83 (argument_expression_list -> assignment_expression .)
    PLUS            reduce using rule 83 (argument_expression_list -> assignment_expression .)
    MINUS           reduce using rule 83 (argument_expression_list -> assignment_expression .)
    NOT             reduce using rule 83 (argument_expression_list -> assignment_expression .)
    LROUND          reduce using rule 83 (argument_expression_list -> assignment_expression .)
    INT_LIT         reduce using rule 83 (argument_expression_list -> assignment_expression .)
    FLOAT_LIT       reduce using rule 83 (argument_expression_list -> assignment_expression .)
    STRING_LIT      reduce using rule 83 (argument_expression_list -> assignment_expression .)
    BOOL_LIT        reduce using rule 83 (argument_expression_list -> assignment_expression .)
    RCURLY          reduce using rule 83 (argument_expression_list -> assignment_expression .)


state 172

    (78) postfix_expression -> postfix_expression DOT IDENTIFIER .
    (79) postfix_expression -> postfix_expression DOT IDENTIFIER . LROUND RROUND
    (80) postfix_expression -> postfix_expression DOT IDENTIFIER . LROUND argument_expression_list RROUND

  ! shift/reduce conflict for LROUND resolved as shift
    LSQUARE         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DOT             reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_PLUS       reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_MINUS     reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS_EQ         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS_EQ        reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR_EQ         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE_EQ       reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO_EQ       reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP_EQ          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_EQ           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CARET_EQ        reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ              reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    ASSIGN          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STAR            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    DIVIDE          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MODULO          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    PLUS            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    MINUS           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LSHIFT          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RSHIFT          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT              reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT              reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LT_EQ           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GT_EQ           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    EQ_EQ           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT_EQ          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP             reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CARET           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR              reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    AMP_AMP         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    OR_OR           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IMPORT          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    TYPE            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    VAR             reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CONST           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FUNC            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    $end            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RETURN          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LCURLY          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IF              reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FOR             reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    CONTINUE        reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BREAK           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    GOTO            reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    IDENTIFIER      reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    SEMICOLON       reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    NOT             reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    INT_LIT         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    FLOAT_LIT       reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    STRING_LIT      reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    BOOL_LIT        reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RCURLY          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RROUND          reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    RSQUARE         reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    COMMA           reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .)
    LROUND          shift and go to state 210

  ! LROUND          [ reduce using rule 78 (postfix_expression -> postfix_expression DOT IDENTIFIER .) ]


state 173

    (117) inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .
    (115) exclusive_or_expression -> exclusive_or_expression . CARET and_expression

    OR              reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AMP_AMP         reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    OR_OR           reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    IMPORT          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    TYPE            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    VAR             reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONST           reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    FUNC            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    $end            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RETURN          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LCURLY          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    IF              reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    FOR             reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CONTINUE        reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    BREAK           reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    GOTO            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    IDENTIFIER      reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    SEMICOLON       reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    PLUS_PLUS       reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    MINUS_MINUS     reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    AMP             reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    STAR            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    PLUS            reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    MINUS           reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    NOT             reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    LROUND          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    INT_LIT         reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    FLOAT_LIT       reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    STRING_LIT      reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    BOOL_LIT        reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RCURLY          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RROUND          reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    RSQUARE         reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    COMMA           reduce using rule 117 (inclusive_or_expression -> inclusive_or_expression OR exclusive_or_expression .)
    CARET           shift and go to state 118


state 174

    (73) primary_expression -> LROUND expression RROUND .

    LSQUARE         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    LROUND          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    DOT             reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    PLUS_PLUS       reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    MINUS_MINUS     reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    PLUS_EQ         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    MINUS_EQ        reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    STAR_EQ         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    DIVIDE_EQ       reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    MODULO_EQ       reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    AMP_EQ          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    OR_EQ           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    CARET_EQ        reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    EQ              reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    ASSIGN          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    STAR            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    DIVIDE          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    MODULO          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    PLUS            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    MINUS           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    LSHIFT          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    RSHIFT          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    LT              reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    GT              reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    LT_EQ           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    GT_EQ           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    EQ_EQ           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    NOT_EQ          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    AMP             reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    CARET           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    OR              reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    AMP_AMP         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    OR_OR           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    IMPORT          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    TYPE            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    VAR             reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    CONST           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    FUNC            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    $end            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    RETURN          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    LCURLY          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    IF              reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    FOR             reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    CONTINUE        reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    BREAK           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    GOTO            reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    IDENTIFIER      reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    SEMICOLON       reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    NOT             reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    INT_LIT         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    FLOAT_LIT       reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    STRING_LIT      reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    BOOL_LIT        reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    RCURLY          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    RROUND          reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    RSQUARE         reduce using rule 73 (primary_expression -> LROUND expression RROUND .)
    COMMA           reduce using rule 73 (primary_expression -> LROUND expression RROUND .)


state 175

    (115) exclusive_or_expression -> exclusive_or_expression CARET and_expression .
    (113) and_expression -> and_expression . AMP equality_expression

  ! shift/reduce conflict for AMP resolved as shift
    CARET           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    OR              reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AMP_AMP         reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    OR_OR           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    IMPORT          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    TYPE            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    VAR             reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    CONST           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    FUNC            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    $end            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RETURN          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    LCURLY          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    IF              reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    FOR             reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    CONTINUE        reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    BREAK           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    GOTO            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    IDENTIFIER      reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    SEMICOLON       reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    PLUS_PLUS       reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    MINUS_MINUS     reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    STAR            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    PLUS            reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    MINUS           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    NOT             reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    LROUND          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    INT_LIT         reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    FLOAT_LIT       reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    STRING_LIT      reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    BOOL_LIT        reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RCURLY          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RROUND          reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    RSQUARE         reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    COMMA           reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .)
    AMP             shift and go to state 119

  ! AMP             [ reduce using rule 115 (exclusive_or_expression -> exclusive_or_expression CARET and_expression .) ]


state 176

    (113) and_expression -> and_expression AMP equality_expression .
    (110) equality_expression -> equality_expression . EQ_EQ relational_expression
    (111) equality_expression -> equality_expression . NOT_EQ relational_expression

    AMP             reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    CARET           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    OR              reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    AMP_AMP         reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    OR_OR           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    IMPORT          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    TYPE            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    VAR             reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    CONST           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    FUNC            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    $end            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    RETURN          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    LCURLY          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    IF              reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    FOR             reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    CONTINUE        reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    BREAK           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    GOTO            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    IDENTIFIER      reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    SEMICOLON       reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    PLUS_PLUS       reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    MINUS_MINUS     reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    STAR            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    PLUS            reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    MINUS           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    NOT             reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    LROUND          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    INT_LIT         reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    FLOAT_LIT       reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    STRING_LIT      reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    BOOL_LIT        reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    RCURLY          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    RROUND          reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    RSQUARE         reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    COMMA           reduce using rule 113 (and_expression -> and_expression AMP equality_expression .)
    EQ_EQ           shift and go to state 120
    NOT_EQ          shift and go to state 121


state 177

    (110) equality_expression -> equality_expression EQ_EQ relational_expression .
    (105) relational_expression -> relational_expression . LT shift_expression
    (106) relational_expression -> relational_expression . GT shift_expression
    (107) relational_expression -> relational_expression . LT_EQ shift_expression
    (108) relational_expression -> relational_expression . GT_EQ shift_expression

    EQ_EQ           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    NOT_EQ          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    AMP             reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    CARET           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    OR              reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    AMP_AMP         reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    OR_OR           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    IMPORT          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    TYPE            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    VAR             reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    CONST           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    FUNC            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    $end            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    RETURN          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    LCURLY          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    IF              reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    FOR             reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    CONTINUE        reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    BREAK           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    GOTO            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    IDENTIFIER      reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    SEMICOLON       reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    PLUS_PLUS       reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    MINUS_MINUS     reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    STAR            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    PLUS            reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    MINUS           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    NOT             reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    LROUND          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    INT_LIT         reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    FLOAT_LIT       reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    STRING_LIT      reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    BOOL_LIT        reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    RCURLY          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    RROUND          reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    RSQUARE         reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    COMMA           reduce using rule 110 (equality_expression -> equality_expression EQ_EQ relational_expression .)
    LT              shift and go to state 122
    GT              shift and go to state 123
    LT_EQ           shift and go to state 124
    GT_EQ           shift and go to state 125


state 178

    (111) equality_expression -> equality_expression NOT_EQ relational_expression .
    (105) relational_expression -> relational_expression . LT shift_expression
    (106) relational_expression -> relational_expression . GT shift_expression
    (107) relational_expression -> relational_expression . LT_EQ shift_expression
    (108) relational_expression -> relational_expression . GT_EQ shift_expression

    EQ_EQ           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT_EQ          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    AMP             reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    CARET           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    OR              reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    AMP_AMP         reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    OR_OR           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    IMPORT          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    TYPE            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    VAR             reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    CONST           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    FUNC            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    $end            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RETURN          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LCURLY          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    IF              reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    FOR             reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    CONTINUE        reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    BREAK           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    GOTO            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    IDENTIFIER      reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    SEMICOLON       reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    PLUS_PLUS       reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    MINUS_MINUS     reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    STAR            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    PLUS            reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    MINUS           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    NOT             reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LROUND          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    INT_LIT         reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    FLOAT_LIT       reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    STRING_LIT      reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    BOOL_LIT        reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RCURLY          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RROUND          reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    RSQUARE         reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    COMMA           reduce using rule 111 (equality_expression -> equality_expression NOT_EQ relational_expression .)
    LT              shift and go to state 122
    GT              shift and go to state 123
    LT_EQ           shift and go to state 124
    GT_EQ           shift and go to state 125


state 179

    (105) relational_expression -> relational_expression LT shift_expression .
    (102) shift_expression -> shift_expression . LSHIFT additive_expression
    (103) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    GT              reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    LT_EQ           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    GT_EQ           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    EQ_EQ           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    NOT_EQ          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    AMP             reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    CARET           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    OR              reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    AMP_AMP         reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    OR_OR           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    IMPORT          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    TYPE            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    VAR             reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    CONST           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    FUNC            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    $end            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    RETURN          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    LCURLY          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    IF              reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    FOR             reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    CONTINUE        reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    BREAK           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    GOTO            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    IDENTIFIER      reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    SEMICOLON       reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    PLUS_PLUS       reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    MINUS_MINUS     reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    STAR            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    PLUS            reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    MINUS           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    NOT             reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    LROUND          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    INT_LIT         reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    FLOAT_LIT       reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    STRING_LIT      reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    BOOL_LIT        reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    RCURLY          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    RROUND          reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    RSQUARE         reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    COMMA           reduce using rule 105 (relational_expression -> relational_expression LT shift_expression .)
    LSHIFT          shift and go to state 126
    RSHIFT          shift and go to state 127


state 180

    (106) relational_expression -> relational_expression GT shift_expression .
    (102) shift_expression -> shift_expression . LSHIFT additive_expression
    (103) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    GT              reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    LT_EQ           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    GT_EQ           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    EQ_EQ           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    NOT_EQ          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    AMP             reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    CARET           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    OR              reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    AMP_AMP         reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    OR_OR           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    IMPORT          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    TYPE            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    VAR             reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    CONST           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    FUNC            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    $end            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    RETURN          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    LCURLY          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    IF              reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    FOR             reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    CONTINUE        reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    BREAK           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    GOTO            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    IDENTIFIER      reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    SEMICOLON       reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    PLUS_PLUS       reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    MINUS_MINUS     reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    STAR            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    PLUS            reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    MINUS           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    NOT             reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    LROUND          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    INT_LIT         reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    FLOAT_LIT       reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    STRING_LIT      reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    BOOL_LIT        reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    RCURLY          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    RROUND          reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    RSQUARE         reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    COMMA           reduce using rule 106 (relational_expression -> relational_expression GT shift_expression .)
    LSHIFT          shift and go to state 126
    RSHIFT          shift and go to state 127


state 181

    (107) relational_expression -> relational_expression LT_EQ shift_expression .
    (102) shift_expression -> shift_expression . LSHIFT additive_expression
    (103) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    GT              reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    LT_EQ           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    GT_EQ           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    EQ_EQ           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    NOT_EQ          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    AMP             reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    CARET           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    OR              reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    AMP_AMP         reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    OR_OR           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    IMPORT          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    TYPE            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    VAR             reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    CONST           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    FUNC            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    $end            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    RETURN          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    LCURLY          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    IF              reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    FOR             reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    CONTINUE        reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    BREAK           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    GOTO            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    IDENTIFIER      reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    SEMICOLON       reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    PLUS_PLUS       reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    MINUS_MINUS     reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    STAR            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    PLUS            reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    MINUS           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    NOT             reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    LROUND          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    INT_LIT         reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    FLOAT_LIT       reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    STRING_LIT      reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    BOOL_LIT        reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    RCURLY          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    RROUND          reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    RSQUARE         reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    COMMA           reduce using rule 107 (relational_expression -> relational_expression LT_EQ shift_expression .)
    LSHIFT          shift and go to state 126
    RSHIFT          shift and go to state 127


state 182

    (108) relational_expression -> relational_expression GT_EQ shift_expression .
    (102) shift_expression -> shift_expression . LSHIFT additive_expression
    (103) shift_expression -> shift_expression . RSHIFT additive_expression

    LT              reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    GT              reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    LT_EQ           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    GT_EQ           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    EQ_EQ           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    NOT_EQ          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    AMP             reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    CARET           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    OR              reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    AMP_AMP         reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    OR_OR           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    IMPORT          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    TYPE            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    VAR             reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    CONST           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    FUNC            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    $end            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    RETURN          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    LCURLY          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    IF              reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    FOR             reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    CONTINUE        reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    BREAK           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    GOTO            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    IDENTIFIER      reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    SEMICOLON       reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    PLUS_PLUS       reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    MINUS_MINUS     reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    STAR            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    PLUS            reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    MINUS           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    NOT             reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    LROUND          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    INT_LIT         reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    FLOAT_LIT       reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    STRING_LIT      reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    BOOL_LIT        reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    RCURLY          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    RROUND          reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    RSQUARE         reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    COMMA           reduce using rule 108 (relational_expression -> relational_expression GT_EQ shift_expression .)
    LSHIFT          shift and go to state 126
    RSHIFT          shift and go to state 127


state 183

    (102) shift_expression -> shift_expression LSHIFT additive_expression .
    (99) additive_expression -> additive_expression . PLUS multiplicative_expression
    (100) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LSHIFT          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSHIFT          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT              reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT              reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LT_EQ           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GT_EQ           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    EQ_EQ           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NOT_EQ          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AMP             reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CARET           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR              reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    AMP_AMP         reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    OR_OR           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    IMPORT          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    TYPE            reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    VAR             reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONST           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FUNC            reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    $end            reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RETURN          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LCURLY          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    IF              reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FOR             reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    CONTINUE        reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BREAK           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    GOTO            reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    IDENTIFIER      reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    SEMICOLON       reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS_PLUS       reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    MINUS_MINUS     reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STAR            reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    NOT             reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    LROUND          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    INT_LIT         reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    FLOAT_LIT       reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    STRING_LIT      reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    BOOL_LIT        reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RCURLY          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RROUND          reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    RSQUARE         reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    COMMA           reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

  ! PLUS            [ reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .) ]
  ! MINUS           [ reduce using rule 102 (shift_expression -> shift_expression LSHIFT additive_expression .) ]


state 184

    (103) shift_expression -> shift_expression RSHIFT additive_expression .
    (99) additive_expression -> additive_expression . PLUS multiplicative_expression
    (100) additive_expression -> additive_expression . MINUS multiplicative_expression

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    LSHIFT          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSHIFT          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT              reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT              reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LT_EQ           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GT_EQ           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    EQ_EQ           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NOT_EQ          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AMP             reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CARET           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR              reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    AMP_AMP         reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    OR_OR           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    IMPORT          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    TYPE            reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    VAR             reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONST           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FUNC            reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    $end            reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RETURN          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LCURLY          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    IF              reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FOR             reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    CONTINUE        reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BREAK           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    GOTO            reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    IDENTIFIER      reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    SEMICOLON       reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS_PLUS       reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    MINUS_MINUS     reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STAR            reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    NOT             reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    LROUND          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    INT_LIT         reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    FLOAT_LIT       reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    STRING_LIT      reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    BOOL_LIT        reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RCURLY          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RROUND          reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    RSQUARE         reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    COMMA           reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .)
    PLUS            shift and go to state 128
    MINUS           shift and go to state 129

  ! PLUS            [ reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .) ]
  ! MINUS           [ reduce using rule 103 (shift_expression -> shift_expression RSHIFT additive_expression .) ]


state 185

    (99) additive_expression -> additive_expression PLUS multiplicative_expression .
    (95) multiplicative_expression -> multiplicative_expression . STAR unary_expression
    (96) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (97) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

  ! shift/reduce conflict for STAR resolved as shift
    PLUS            reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LSHIFT          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSHIFT          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT              reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT              reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LT_EQ           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GT_EQ           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    EQ_EQ           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT_EQ          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMP             reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CARET           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR              reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    AMP_AMP         reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    OR_OR           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IMPORT          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    TYPE            reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    VAR             reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONST           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FUNC            reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    $end            reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RETURN          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LCURLY          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IF              reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FOR             reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    CONTINUE        reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BREAK           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    GOTO            reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    IDENTIFIER      reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    SEMICOLON       reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    PLUS_PLUS       reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    MINUS_MINUS     reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    NOT             reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    LROUND          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    INT_LIT         reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    FLOAT_LIT       reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STRING_LIT      reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    BOOL_LIT        reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RCURLY          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RROUND          reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    RSQUARE         reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    COMMA           reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .)
    STAR            shift and go to state 130
    DIVIDE          shift and go to state 131
    MODULO          shift and go to state 132

  ! STAR            [ reduce using rule 99 (additive_expression -> additive_expression PLUS multiplicative_expression .) ]


state 186

    (100) additive_expression -> additive_expression MINUS multiplicative_expression .
    (95) multiplicative_expression -> multiplicative_expression . STAR unary_expression
    (96) multiplicative_expression -> multiplicative_expression . DIVIDE unary_expression
    (97) multiplicative_expression -> multiplicative_expression . MODULO unary_expression

  ! shift/reduce conflict for STAR resolved as shift
    PLUS            reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LSHIFT          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSHIFT          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT              reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT              reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LT_EQ           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GT_EQ           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    EQ_EQ           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT_EQ          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMP             reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CARET           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR              reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    AMP_AMP         reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    OR_OR           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IMPORT          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    TYPE            reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    VAR             reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONST           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FUNC            reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    $end            reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RETURN          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LCURLY          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IF              reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FOR             reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    CONTINUE        reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BREAK           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    GOTO            reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    IDENTIFIER      reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    SEMICOLON       reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    PLUS_PLUS       reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    MINUS_MINUS     reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    NOT             reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    LROUND          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    INT_LIT         reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    FLOAT_LIT       reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STRING_LIT      reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    BOOL_LIT        reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RCURLY          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RROUND          reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    RSQUARE         reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    COMMA           reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .)
    STAR            shift and go to state 130
    DIVIDE          shift and go to state 131
    MODULO          shift and go to state 132

  ! STAR            [ reduce using rule 100 (additive_expression -> additive_expression MINUS multiplicative_expression .) ]


state 187

    (95) multiplicative_expression -> multiplicative_expression STAR unary_expression .

    STAR            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    DIVIDE          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    MODULO          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    PLUS            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    MINUS           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    LSHIFT          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    RSHIFT          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    LT              reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    GT              reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    LT_EQ           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    GT_EQ           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    EQ_EQ           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    NOT_EQ          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    AMP             reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    CARET           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    OR              reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    AMP_AMP         reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    OR_OR           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    IMPORT          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    TYPE            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    VAR             reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    CONST           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    FUNC            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    $end            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    RETURN          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    LCURLY          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    IF              reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    FOR             reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    CONTINUE        reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    BREAK           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    GOTO            reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    IDENTIFIER      reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    SEMICOLON       reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    PLUS_PLUS       reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    MINUS_MINUS     reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    NOT             reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    LROUND          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    INT_LIT         reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    FLOAT_LIT       reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    STRING_LIT      reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    BOOL_LIT        reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    RCURLY          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    RROUND          reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    RSQUARE         reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)
    COMMA           reduce using rule 95 (multiplicative_expression -> multiplicative_expression STAR unary_expression .)


state 188

    (96) multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .

    STAR            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    DIVIDE          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MODULO          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LSHIFT          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSHIFT          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT              reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT              reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LT_EQ           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GT_EQ           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    EQ_EQ           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NOT_EQ          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AMP             reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CARET           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR              reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    AMP_AMP         reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    OR_OR           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IMPORT          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    TYPE            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    VAR             reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CONST           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FUNC            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    $end            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RETURN          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LCURLY          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IF              reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FOR             reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    CONTINUE        reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    BREAK           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    GOTO            reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    IDENTIFIER      reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    SEMICOLON       reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    PLUS_PLUS       reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    MINUS_MINUS     reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    NOT             reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    LROUND          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    INT_LIT         reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    FLOAT_LIT       reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    STRING_LIT      reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    BOOL_LIT        reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RCURLY          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RROUND          reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    RSQUARE         reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)
    COMMA           reduce using rule 96 (multiplicative_expression -> multiplicative_expression DIVIDE unary_expression .)


state 189

    (97) multiplicative_expression -> multiplicative_expression MODULO unary_expression .

    STAR            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    DIVIDE          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MODULO          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PLUS            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MINUS           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LSHIFT          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RSHIFT          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LT              reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GT              reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LT_EQ           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GT_EQ           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    EQ_EQ           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NOT_EQ          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    AMP             reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CARET           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    OR              reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    AMP_AMP         reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    OR_OR           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IMPORT          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    TYPE            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    VAR             reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CONST           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FUNC            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    $end            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RETURN          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LCURLY          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IF              reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FOR             reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    CONTINUE        reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    BREAK           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    GOTO            reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    IDENTIFIER      reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    SEMICOLON       reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    PLUS_PLUS       reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    MINUS_MINUS     reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    NOT             reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    LROUND          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    INT_LIT         reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    FLOAT_LIT       reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    STRING_LIT      reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    BOOL_LIT        reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RCURLY          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RROUND          reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    RSQUARE         reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)
    COMMA           reduce using rule 97 (multiplicative_expression -> multiplicative_expression MODULO unary_expression .)


state 190

    (14) arr_type -> LSQUARE . INT_LIT RSQUARE arr_type
    (15) arr_type -> LSQUARE . INT_LIT RSQUARE DATA_TYPE

    INT_LIT         shift and go to state 76


state 191

    (14) arr_type -> LSQUARE INT_LIT RSQUARE arr_type .

    EQ              reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    IMPORT          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    TYPE            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    VAR             reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    CONST           reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    FUNC            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    $end            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    RETURN          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    LCURLY          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    IF              reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    FOR             reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    CONTINUE        reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    BREAK           reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    GOTO            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    IDENTIFIER      reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    SEMICOLON       reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    PLUS_PLUS       reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    MINUS_MINUS     reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    AMP             reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    STAR            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    PLUS            reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    MINUS           reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    NOT             reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    LROUND          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    INT_LIT         reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    FLOAT_LIT       reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    STRING_LIT      reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    BOOL_LIT        reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    RCURLY          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    RROUND          reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)
    COMMA           reduce using rule 14 (arr_type -> LSQUARE INT_LIT RSQUARE arr_type .)


state 192

    (15) arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .

    EQ              reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    IMPORT          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    TYPE            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    VAR             reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    CONST           reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    FUNC            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    $end            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    RETURN          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    LCURLY          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    IF              reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    FOR             reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    CONTINUE        reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    BREAK           reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    GOTO            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    IDENTIFIER      reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    SEMICOLON       reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    PLUS_PLUS       reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    MINUS_MINUS     reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    AMP             reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    STAR            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    PLUS            reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    MINUS           reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    NOT             reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    LROUND          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    INT_LIT         reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    FLOAT_LIT       reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    STRING_LIT      reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    BOOL_LIT        reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    RCURLY          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    RROUND          reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)
    COMMA           reduce using rule 15 (arr_type -> LSQUARE INT_LIT RSQUARE DATA_TYPE .)


state 193

    (32) block -> LCURLY stmt_list RCURLY .

    IMPORT          reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    TYPE            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    VAR             reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    CONST           reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    FUNC            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    $end            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    RETURN          reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    LCURLY          reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    IF              reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    FOR             reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    CONTINUE        reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    BREAK           reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    GOTO            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    IDENTIFIER      reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    SEMICOLON       reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    PLUS_PLUS       reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    MINUS_MINUS     reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    AMP             reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    STAR            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    PLUS            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    MINUS           reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    NOT             reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    LROUND          reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    INT_LIT         reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    FLOAT_LIT       reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    STRING_LIT      reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    BOOL_LIT        reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    RCURLY          reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)
    ELSE            reduce using rule 32 (block -> LCURLY stmt_list RCURLY .)


state 194

    (33) stmt_list -> stmt stmt_list .

    RCURLY          reduce using rule 33 (stmt_list -> stmt stmt_list .)


state 195

    (46) expression_stmt -> expression SEMICOLON .

    VAR             reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    CONST           reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    RETURN          reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    LCURLY          reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    IF              reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    FOR             reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    CONTINUE        reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    BREAK           reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    GOTO            reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    IDENTIFIER      reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    SEMICOLON       reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    PLUS_PLUS       reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    MINUS_MINUS     reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    AMP             reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    STAR            reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    PLUS            reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    MINUS           reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    NOT             reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    LROUND          reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    INT_LIT         reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    FLOAT_LIT       reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    STRING_LIT      reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    BOOL_LIT        reduce using rule 46 (expression_stmt -> expression SEMICOLON .)
    RCURLY          reduce using rule 46 (expression_stmt -> expression SEMICOLON .)


state 196

    (56) label_stmt -> IDENTIFIER COLON . stmt
    (35) stmt -> . var_decl
    (36) stmt -> . return_stmt
    (37) stmt -> . block
    (38) stmt -> . selection_stmt
    (39) stmt -> . iteration_stmt
    (40) stmt -> . jump_stmt
    (41) stmt -> . label_stmt
    (42) stmt -> . expression_stmt
    (43) stmt -> . expression
    (24) var_decl -> . VAR IDENTIFIER type
    (25) var_decl -> . VAR IDENTIFIER type EQ expression
    (26) var_decl -> . VAR IDENTIFIER ASSIGN expression
    (27) var_decl -> . CONST IDENTIFIER type EQ expression
    (28) var_decl -> . CONST IDENTIFIER ASSIGN expression
    (44) return_stmt -> . RETURN argument_expression_list
    (32) block -> . LCURLY stmt_list RCURLY
    (47) selection_stmt -> . IF expression block
    (48) selection_stmt -> . IF expression block ELSE block
    (49) selection_stmt -> . IF expression block ELSE selection_stmt
    (50) iteration_stmt -> . FOR block
    (51) iteration_stmt -> . FOR expression block
    (52) iteration_stmt -> . FOR expression_stmt expression_stmt expression block
    (53) jump_stmt -> . CONTINUE
    (54) jump_stmt -> . BREAK
    (55) jump_stmt -> . GOTO IDENTIFIER
    (56) label_stmt -> . IDENTIFIER COLON stmt
    (45) expression_stmt -> . SEMICOLON
    (46) expression_stmt -> . expression SEMICOLON
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    VAR             shift and go to state 13
    CONST           shift and go to state 14
    RETURN          shift and go to state 150
    LCURLY          shift and go to state 83
    IF              shift and go to state 151
    FOR             shift and go to state 152
    CONTINUE        shift and go to state 153
    BREAK           shift and go to state 154
    GOTO            shift and go to state 155
    IDENTIFIER      shift and go to state 149
    SEMICOLON       shift and go to state 156
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    stmt                           shift and go to state 211
    var_decl                       shift and go to state 140
    return_stmt                    shift and go to state 141
    block                          shift and go to state 142
    selection_stmt                 shift and go to state 143
    iteration_stmt                 shift and go to state 144
    jump_stmt                      shift and go to state 145
    label_stmt                     shift and go to state 146
    expression_stmt                shift and go to state 147
    expression                     shift and go to state 148
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 197

    (44) return_stmt -> RETURN argument_expression_list .
    (84) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    VAR             reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    CONST           reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    RETURN          reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    LCURLY          reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    IF              reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    FOR             reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    CONTINUE        reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    BREAK           reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    GOTO            reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    IDENTIFIER      reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    SEMICOLON       reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    PLUS_PLUS       reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    MINUS_MINUS     reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    AMP             reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    STAR            reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    PLUS            reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    MINUS           reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    NOT             reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    LROUND          reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    INT_LIT         reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    FLOAT_LIT       reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    STRING_LIT      reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    BOOL_LIT        reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    RCURLY          reduce using rule 44 (return_stmt -> RETURN argument_expression_list .)
    COMMA           shift and go to state 209


state 198

    (47) selection_stmt -> IF expression . block
    (48) selection_stmt -> IF expression . block ELSE block
    (49) selection_stmt -> IF expression . block ELSE selection_stmt
    (32) block -> . LCURLY stmt_list RCURLY

    LCURLY          shift and go to state 83

    block                          shift and go to state 212

state 199

    (50) iteration_stmt -> FOR block .

    VAR             reduce using rule 50 (iteration_stmt -> FOR block .)
    CONST           reduce using rule 50 (iteration_stmt -> FOR block .)
    RETURN          reduce using rule 50 (iteration_stmt -> FOR block .)
    LCURLY          reduce using rule 50 (iteration_stmt -> FOR block .)
    IF              reduce using rule 50 (iteration_stmt -> FOR block .)
    FOR             reduce using rule 50 (iteration_stmt -> FOR block .)
    CONTINUE        reduce using rule 50 (iteration_stmt -> FOR block .)
    BREAK           reduce using rule 50 (iteration_stmt -> FOR block .)
    GOTO            reduce using rule 50 (iteration_stmt -> FOR block .)
    IDENTIFIER      reduce using rule 50 (iteration_stmt -> FOR block .)
    SEMICOLON       reduce using rule 50 (iteration_stmt -> FOR block .)
    PLUS_PLUS       reduce using rule 50 (iteration_stmt -> FOR block .)
    MINUS_MINUS     reduce using rule 50 (iteration_stmt -> FOR block .)
    AMP             reduce using rule 50 (iteration_stmt -> FOR block .)
    STAR            reduce using rule 50 (iteration_stmt -> FOR block .)
    PLUS            reduce using rule 50 (iteration_stmt -> FOR block .)
    MINUS           reduce using rule 50 (iteration_stmt -> FOR block .)
    NOT             reduce using rule 50 (iteration_stmt -> FOR block .)
    LROUND          reduce using rule 50 (iteration_stmt -> FOR block .)
    INT_LIT         reduce using rule 50 (iteration_stmt -> FOR block .)
    FLOAT_LIT       reduce using rule 50 (iteration_stmt -> FOR block .)
    STRING_LIT      reduce using rule 50 (iteration_stmt -> FOR block .)
    BOOL_LIT        reduce using rule 50 (iteration_stmt -> FOR block .)
    RCURLY          reduce using rule 50 (iteration_stmt -> FOR block .)


state 200

    (51) iteration_stmt -> FOR expression . block
    (46) expression_stmt -> expression . SEMICOLON
    (32) block -> . LCURLY stmt_list RCURLY

    SEMICOLON       shift and go to state 195
    LCURLY          shift and go to state 83

    block                          shift and go to state 213

state 201

    (52) iteration_stmt -> FOR expression_stmt . expression_stmt expression block
    (45) expression_stmt -> . SEMICOLON
    (46) expression_stmt -> . expression SEMICOLON
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    SEMICOLON       shift and go to state 156
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression_stmt                shift and go to state 214
    expression                     shift and go to state 215
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 202

    (55) jump_stmt -> GOTO IDENTIFIER .

    VAR             reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    CONST           reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    RETURN          reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    LCURLY          reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    IF              reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    FOR             reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    CONTINUE        reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    BREAK           reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    GOTO            reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    IDENTIFIER      reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    SEMICOLON       reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    PLUS_PLUS       reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    MINUS_MINUS     reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    AMP             reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    STAR            reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    PLUS            reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    MINUS           reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    NOT             reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    LROUND          reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    INT_LIT         reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    FLOAT_LIT       reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    STRING_LIT      reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    BOOL_LIT        reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)
    RCURLY          reduce using rule 55 (jump_stmt -> GOTO IDENTIFIER .)


state 203

    (65) param_list -> param_list COMMA identifier_list . type
    (67) identifier_list -> identifier_list . COMMA IDENTIFIER
    (20) type -> . DATA_TYPE
    (21) type -> . arr_type
    (22) type -> . slc_type
    (23) type -> . ptr_type
    (14) arr_type -> . LSQUARE INT_LIT RSQUARE arr_type
    (15) arr_type -> . LSQUARE INT_LIT RSQUARE DATA_TYPE
    (16) slc_type -> . LSQUARE RSQUARE slc_type
    (17) slc_type -> . LSQUARE RSQUARE DATA_TYPE
    (18) ptr_type -> . STAR ptr_type
    (19) ptr_type -> . STAR DATA_TYPE

    COMMA           shift and go to state 160
    DATA_TYPE       shift and go to state 30
    LSQUARE         shift and go to state 34
    STAR            shift and go to state 35

    type                           shift and go to state 216
    arr_type                       shift and go to state 31
    slc_type                       shift and go to state 32
    ptr_type                       shift and go to state 33

state 204

    (67) identifier_list -> identifier_list COMMA IDENTIFIER .

    COMMA           reduce using rule 67 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    DATA_TYPE       reduce using rule 67 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    LSQUARE         reduce using rule 67 (identifier_list -> identifier_list COMMA IDENTIFIER .)
    STAR            reduce using rule 67 (identifier_list -> identifier_list COMMA IDENTIFIER .)


state 205

    (69) method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER . signature
    (70) method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER . signature block
    (59) signature -> . params result
    (60) signature -> . params
    (61) params -> . LROUND param_list RROUND
    (62) params -> . LROUND RROUND

    LROUND          shift and go to state 40

    signature                      shift and go to state 217
    params                         shift and go to state 39

state 206

    (30) var_decl_list -> IDENTIFIER type var_decl_list .

    RCURLY          reduce using rule 30 (var_decl_list -> IDENTIFIER type var_decl_list .)


state 207

    (75) postfix_expression -> postfix_expression LSQUARE expression RSQUARE .

    LSQUARE         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LROUND          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DOT             reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    PLUS_PLUS       reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MINUS_MINUS     reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    PLUS_EQ         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MINUS_EQ        reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    STAR_EQ         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DIVIDE_EQ       reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MODULO_EQ       reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    AMP_EQ          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    OR_EQ           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    CARET_EQ        reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    EQ              reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    ASSIGN          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    STAR            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    DIVIDE          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MODULO          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    PLUS            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    MINUS           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LSHIFT          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RSHIFT          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LT              reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    GT              reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LT_EQ           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    GT_EQ           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    EQ_EQ           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    NOT_EQ          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    AMP             reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    CARET           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    OR              reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    AMP_AMP         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    OR_OR           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    IMPORT          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    TYPE            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    VAR             reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    CONST           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    FUNC            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    $end            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RETURN          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    LCURLY          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    IF              reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    FOR             reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    CONTINUE        reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    BREAK           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    GOTO            reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    IDENTIFIER      reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    SEMICOLON       reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    NOT             reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    INT_LIT         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    FLOAT_LIT       reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    STRING_LIT      reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    BOOL_LIT        reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RCURLY          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RROUND          reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    RSQUARE         reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)
    COMMA           reduce using rule 75 (postfix_expression -> postfix_expression LSQUARE expression RSQUARE .)


state 208

    (77) postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .

    LSQUARE         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    LROUND          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    DOT             reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    PLUS_PLUS       reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    MINUS_MINUS     reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    PLUS_EQ         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    MINUS_EQ        reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    STAR_EQ         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    DIVIDE_EQ       reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    MODULO_EQ       reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    AMP_EQ          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    OR_EQ           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    CARET_EQ        reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    EQ              reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    ASSIGN          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    STAR            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    DIVIDE          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    MODULO          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    PLUS            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    MINUS           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    LSHIFT          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    RSHIFT          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    LT              reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    GT              reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    LT_EQ           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    GT_EQ           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    EQ_EQ           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    NOT_EQ          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    AMP             reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    CARET           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    OR              reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    AMP_AMP         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    OR_OR           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    IMPORT          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    TYPE            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    VAR             reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    CONST           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    FUNC            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    $end            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    RETURN          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    LCURLY          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    IF              reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    FOR             reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    CONTINUE        reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    BREAK           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    GOTO            reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    IDENTIFIER      reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    SEMICOLON       reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    NOT             reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    INT_LIT         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    FLOAT_LIT       reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    STRING_LIT      reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    BOOL_LIT        reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    RCURLY          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    RROUND          reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    RSQUARE         reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)
    COMMA           reduce using rule 77 (postfix_expression -> postfix_expression LROUND argument_expression_list RROUND .)


state 209

    (84) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    assignment_expression          shift and go to state 218
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 210

    (79) postfix_expression -> postfix_expression DOT IDENTIFIER LROUND . RROUND
    (80) postfix_expression -> postfix_expression DOT IDENTIFIER LROUND . argument_expression_list RROUND
    (83) argument_expression_list -> . assignment_expression
    (84) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    RROUND          shift and go to state 219
    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    postfix_expression             shift and go to state 52
    argument_expression_list       shift and go to state 220
    assignment_expression          shift and go to state 171
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 211

    (56) label_stmt -> IDENTIFIER COLON stmt .

    VAR             reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    CONST           reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    RETURN          reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    LCURLY          reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    IF              reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    FOR             reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    CONTINUE        reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    BREAK           reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    GOTO            reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    IDENTIFIER      reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    SEMICOLON       reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    PLUS_PLUS       reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    MINUS_MINUS     reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    AMP             reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    STAR            reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    PLUS            reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    MINUS           reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    NOT             reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    LROUND          reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    INT_LIT         reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    FLOAT_LIT       reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    STRING_LIT      reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    BOOL_LIT        reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)
    RCURLY          reduce using rule 56 (label_stmt -> IDENTIFIER COLON stmt .)


state 212

    (47) selection_stmt -> IF expression block .
    (48) selection_stmt -> IF expression block . ELSE block
    (49) selection_stmt -> IF expression block . ELSE selection_stmt

    VAR             reduce using rule 47 (selection_stmt -> IF expression block .)
    CONST           reduce using rule 47 (selection_stmt -> IF expression block .)
    RETURN          reduce using rule 47 (selection_stmt -> IF expression block .)
    LCURLY          reduce using rule 47 (selection_stmt -> IF expression block .)
    IF              reduce using rule 47 (selection_stmt -> IF expression block .)
    FOR             reduce using rule 47 (selection_stmt -> IF expression block .)
    CONTINUE        reduce using rule 47 (selection_stmt -> IF expression block .)
    BREAK           reduce using rule 47 (selection_stmt -> IF expression block .)
    GOTO            reduce using rule 47 (selection_stmt -> IF expression block .)
    IDENTIFIER      reduce using rule 47 (selection_stmt -> IF expression block .)
    SEMICOLON       reduce using rule 47 (selection_stmt -> IF expression block .)
    PLUS_PLUS       reduce using rule 47 (selection_stmt -> IF expression block .)
    MINUS_MINUS     reduce using rule 47 (selection_stmt -> IF expression block .)
    AMP             reduce using rule 47 (selection_stmt -> IF expression block .)
    STAR            reduce using rule 47 (selection_stmt -> IF expression block .)
    PLUS            reduce using rule 47 (selection_stmt -> IF expression block .)
    MINUS           reduce using rule 47 (selection_stmt -> IF expression block .)
    NOT             reduce using rule 47 (selection_stmt -> IF expression block .)
    LROUND          reduce using rule 47 (selection_stmt -> IF expression block .)
    INT_LIT         reduce using rule 47 (selection_stmt -> IF expression block .)
    FLOAT_LIT       reduce using rule 47 (selection_stmt -> IF expression block .)
    STRING_LIT      reduce using rule 47 (selection_stmt -> IF expression block .)
    BOOL_LIT        reduce using rule 47 (selection_stmt -> IF expression block .)
    RCURLY          reduce using rule 47 (selection_stmt -> IF expression block .)
    ELSE            shift and go to state 221


state 213

    (51) iteration_stmt -> FOR expression block .

    VAR             reduce using rule 51 (iteration_stmt -> FOR expression block .)
    CONST           reduce using rule 51 (iteration_stmt -> FOR expression block .)
    RETURN          reduce using rule 51 (iteration_stmt -> FOR expression block .)
    LCURLY          reduce using rule 51 (iteration_stmt -> FOR expression block .)
    IF              reduce using rule 51 (iteration_stmt -> FOR expression block .)
    FOR             reduce using rule 51 (iteration_stmt -> FOR expression block .)
    CONTINUE        reduce using rule 51 (iteration_stmt -> FOR expression block .)
    BREAK           reduce using rule 51 (iteration_stmt -> FOR expression block .)
    GOTO            reduce using rule 51 (iteration_stmt -> FOR expression block .)
    IDENTIFIER      reduce using rule 51 (iteration_stmt -> FOR expression block .)
    SEMICOLON       reduce using rule 51 (iteration_stmt -> FOR expression block .)
    PLUS_PLUS       reduce using rule 51 (iteration_stmt -> FOR expression block .)
    MINUS_MINUS     reduce using rule 51 (iteration_stmt -> FOR expression block .)
    AMP             reduce using rule 51 (iteration_stmt -> FOR expression block .)
    STAR            reduce using rule 51 (iteration_stmt -> FOR expression block .)
    PLUS            reduce using rule 51 (iteration_stmt -> FOR expression block .)
    MINUS           reduce using rule 51 (iteration_stmt -> FOR expression block .)
    NOT             reduce using rule 51 (iteration_stmt -> FOR expression block .)
    LROUND          reduce using rule 51 (iteration_stmt -> FOR expression block .)
    INT_LIT         reduce using rule 51 (iteration_stmt -> FOR expression block .)
    FLOAT_LIT       reduce using rule 51 (iteration_stmt -> FOR expression block .)
    STRING_LIT      reduce using rule 51 (iteration_stmt -> FOR expression block .)
    BOOL_LIT        reduce using rule 51 (iteration_stmt -> FOR expression block .)
    RCURLY          reduce using rule 51 (iteration_stmt -> FOR expression block .)


state 214

    (52) iteration_stmt -> FOR expression_stmt expression_stmt . expression block
    (134) expression -> . assignment_expression
    (122) assignment_expression -> . logical_or_expression
    (123) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (120) logical_or_expression -> . logical_and_expression
    (121) logical_or_expression -> . logical_or_expression OR_OR logical_and_expression
    (85) unary_expression -> . postfix_expression
    (86) unary_expression -> . PLUS_PLUS postfix_expression
    (87) unary_expression -> . MINUS_MINUS postfix_expression
    (88) unary_expression -> . unary_operator postfix_expression
    (118) logical_and_expression -> . inclusive_or_expression
    (119) logical_and_expression -> . logical_and_expression AMP_AMP inclusive_or_expression
    (74) postfix_expression -> . primary_expression
    (75) postfix_expression -> . postfix_expression LSQUARE expression RSQUARE
    (76) postfix_expression -> . postfix_expression LROUND RROUND
    (77) postfix_expression -> . postfix_expression LROUND argument_expression_list RROUND
    (78) postfix_expression -> . postfix_expression DOT IDENTIFIER
    (79) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND RROUND
    (80) postfix_expression -> . postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND
    (81) postfix_expression -> . postfix_expression PLUS_PLUS
    (82) postfix_expression -> . postfix_expression MINUS_MINUS
    (89) unary_operator -> . AMP
    (90) unary_operator -> . STAR
    (91) unary_operator -> . PLUS
    (92) unary_operator -> . MINUS
    (93) unary_operator -> . NOT
    (116) inclusive_or_expression -> . exclusive_or_expression
    (117) inclusive_or_expression -> . inclusive_or_expression OR exclusive_or_expression
    (71) primary_expression -> . IDENTIFIER
    (72) primary_expression -> . lit_operand
    (73) primary_expression -> . LROUND expression RROUND
    (114) exclusive_or_expression -> . and_expression
    (115) exclusive_or_expression -> . exclusive_or_expression CARET and_expression
    (135) lit_operand -> . INT_LIT
    (136) lit_operand -> . FLOAT_LIT
    (137) lit_operand -> . STRING_LIT
    (138) lit_operand -> . BOOL_LIT
    (112) and_expression -> . equality_expression
    (113) and_expression -> . and_expression AMP equality_expression
    (109) equality_expression -> . relational_expression
    (110) equality_expression -> . equality_expression EQ_EQ relational_expression
    (111) equality_expression -> . equality_expression NOT_EQ relational_expression
    (104) relational_expression -> . shift_expression
    (105) relational_expression -> . relational_expression LT shift_expression
    (106) relational_expression -> . relational_expression GT shift_expression
    (107) relational_expression -> . relational_expression LT_EQ shift_expression
    (108) relational_expression -> . relational_expression GT_EQ shift_expression
    (101) shift_expression -> . additive_expression
    (102) shift_expression -> . shift_expression LSHIFT additive_expression
    (103) shift_expression -> . shift_expression RSHIFT additive_expression
    (98) additive_expression -> . multiplicative_expression
    (99) additive_expression -> . additive_expression PLUS multiplicative_expression
    (100) additive_expression -> . additive_expression MINUS multiplicative_expression
    (94) multiplicative_expression -> . unary_expression
    (95) multiplicative_expression -> . multiplicative_expression STAR unary_expression
    (96) multiplicative_expression -> . multiplicative_expression DIVIDE unary_expression
    (97) multiplicative_expression -> . multiplicative_expression MODULO unary_expression

    PLUS_PLUS       shift and go to state 53
    MINUS_MINUS     shift and go to state 54
    AMP             shift and go to state 59
    STAR            shift and go to state 60
    PLUS            shift and go to state 61
    MINUS           shift and go to state 62
    NOT             shift and go to state 63
    IDENTIFIER      shift and go to state 46
    LROUND          shift and go to state 58
    INT_LIT         shift and go to state 67
    FLOAT_LIT       shift and go to state 68
    STRING_LIT      shift and go to state 69
    BOOL_LIT        shift and go to state 70

    expression                     shift and go to state 222
    assignment_expression          shift and go to state 48
    logical_or_expression          shift and go to state 49
    unary_expression               shift and go to state 50
    logical_and_expression         shift and go to state 51
    postfix_expression             shift and go to state 52
    unary_operator                 shift and go to state 55
    inclusive_or_expression        shift and go to state 56
    primary_expression             shift and go to state 57
    exclusive_or_expression        shift and go to state 64
    lit_operand                    shift and go to state 65
    and_expression                 shift and go to state 66
    equality_expression            shift and go to state 71
    relational_expression          shift and go to state 72
    shift_expression               shift and go to state 73
    additive_expression            shift and go to state 74
    multiplicative_expression      shift and go to state 75

state 215

    (46) expression_stmt -> expression . SEMICOLON

    SEMICOLON       shift and go to state 195


state 216

    (65) param_list -> param_list COMMA identifier_list type .

    RROUND          reduce using rule 65 (param_list -> param_list COMMA identifier_list type .)
    COMMA           reduce using rule 65 (param_list -> param_list COMMA identifier_list type .)


state 217

    (69) method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .
    (70) method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature . block
    (32) block -> . LCURLY stmt_list RCURLY

    IMPORT          reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    TYPE            reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    VAR             reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    CONST           reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    FUNC            reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    $end            reduce using rule 69 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature .)
    LCURLY          shift and go to state 83

    block                          shift and go to state 223

state 218

    (84) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    RROUND          reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    COMMA           reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    VAR             reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    CONST           reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    RETURN          reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    LCURLY          reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    IF              reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    FOR             reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    CONTINUE        reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    BREAK           reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    GOTO            reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    IDENTIFIER      reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    SEMICOLON       reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    PLUS_PLUS       reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    MINUS_MINUS     reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    AMP             reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    STAR            reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    PLUS            reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    MINUS           reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    NOT             reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    LROUND          reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    INT_LIT         reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    FLOAT_LIT       reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    STRING_LIT      reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    BOOL_LIT        reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    RCURLY          reduce using rule 84 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 219

    (79) postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .

    LSQUARE         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    LROUND          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    DOT             reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    PLUS_PLUS       reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    MINUS_MINUS     reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    PLUS_EQ         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    MINUS_EQ        reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    STAR_EQ         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    DIVIDE_EQ       reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    MODULO_EQ       reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    AMP_EQ          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    OR_EQ           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    CARET_EQ        reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    EQ              reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    ASSIGN          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    STAR            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    DIVIDE          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    MODULO          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    PLUS            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    MINUS           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    LSHIFT          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    RSHIFT          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    LT              reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    GT              reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    LT_EQ           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    GT_EQ           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    EQ_EQ           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    NOT_EQ          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    AMP             reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    CARET           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    OR              reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    AMP_AMP         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    OR_OR           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    IMPORT          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    TYPE            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    VAR             reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    CONST           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    FUNC            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    $end            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    RETURN          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    LCURLY          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    IF              reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    FOR             reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    CONTINUE        reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    BREAK           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    GOTO            reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    IDENTIFIER      reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    SEMICOLON       reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    NOT             reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    INT_LIT         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    FLOAT_LIT       reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    STRING_LIT      reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    BOOL_LIT        reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    RCURLY          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    RROUND          reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    RSQUARE         reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)
    COMMA           reduce using rule 79 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND RROUND .)


state 220

    (80) postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list . RROUND
    (84) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RROUND          shift and go to state 224
    COMMA           shift and go to state 209


state 221

    (48) selection_stmt -> IF expression block ELSE . block
    (49) selection_stmt -> IF expression block ELSE . selection_stmt
    (32) block -> . LCURLY stmt_list RCURLY
    (47) selection_stmt -> . IF expression block
    (48) selection_stmt -> . IF expression block ELSE block
    (49) selection_stmt -> . IF expression block ELSE selection_stmt

    LCURLY          shift and go to state 83
    IF              shift and go to state 151

    block                          shift and go to state 225
    selection_stmt                 shift and go to state 226

state 222

    (52) iteration_stmt -> FOR expression_stmt expression_stmt expression . block
    (32) block -> . LCURLY stmt_list RCURLY

    LCURLY          shift and go to state 83

    block                          shift and go to state 227

state 223

    (70) method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .

    IMPORT          reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)
    TYPE            reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)
    VAR             reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)
    CONST           reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)
    FUNC            reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)
    $end            reduce using rule 70 (method_decl -> FUNC LROUND IDENTIFIER type RROUND IDENTIFIER signature block .)


state 224

    (80) postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .

    LSQUARE         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    LROUND          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    DOT             reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    PLUS_PLUS       reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    MINUS_MINUS     reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    PLUS_EQ         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    MINUS_EQ        reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    STAR_EQ         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    DIVIDE_EQ       reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    MODULO_EQ       reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    AMP_EQ          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    OR_EQ           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    CARET_EQ        reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    EQ              reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    ASSIGN          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    STAR            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    DIVIDE          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    MODULO          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    PLUS            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    MINUS           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    LSHIFT          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    RSHIFT          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    LT              reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    GT              reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    LT_EQ           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    GT_EQ           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    EQ_EQ           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    NOT_EQ          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    AMP             reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    CARET           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    OR              reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    AMP_AMP         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    OR_OR           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    IMPORT          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    TYPE            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    VAR             reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    CONST           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    FUNC            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    $end            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    RETURN          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    LCURLY          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    IF              reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    FOR             reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    CONTINUE        reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    BREAK           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    GOTO            reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    IDENTIFIER      reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    SEMICOLON       reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    NOT             reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    INT_LIT         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    FLOAT_LIT       reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    STRING_LIT      reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    BOOL_LIT        reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    RCURLY          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    RROUND          reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    RSQUARE         reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)
    COMMA           reduce using rule 80 (postfix_expression -> postfix_expression DOT IDENTIFIER LROUND argument_expression_list RROUND .)


state 225

    (48) selection_stmt -> IF expression block ELSE block .

    VAR             reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    CONST           reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    RETURN          reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    LCURLY          reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    IF              reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    FOR             reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    CONTINUE        reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    BREAK           reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    GOTO            reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    IDENTIFIER      reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    SEMICOLON       reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    PLUS_PLUS       reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    MINUS_MINUS     reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    AMP             reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    STAR            reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    PLUS            reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    MINUS           reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    NOT             reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    LROUND          reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    INT_LIT         reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    FLOAT_LIT       reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    STRING_LIT      reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    BOOL_LIT        reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)
    RCURLY          reduce using rule 48 (selection_stmt -> IF expression block ELSE block .)


state 226

    (49) selection_stmt -> IF expression block ELSE selection_stmt .

    VAR             reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    CONST           reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    RETURN          reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    LCURLY          reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    IF              reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    FOR             reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    CONTINUE        reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    BREAK           reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    GOTO            reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    IDENTIFIER      reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    SEMICOLON       reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    PLUS_PLUS       reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    MINUS_MINUS     reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    AMP             reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    STAR            reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    PLUS            reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    MINUS           reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    NOT             reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    LROUND          reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    INT_LIT         reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    FLOAT_LIT       reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    STRING_LIT      reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    BOOL_LIT        reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)
    RCURLY          reduce using rule 49 (selection_stmt -> IF expression block ELSE selection_stmt .)


state 227

    (52) iteration_stmt -> FOR expression_stmt expression_stmt expression block .

    VAR             reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    CONST           reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    RETURN          reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    LCURLY          reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    IF              reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    FOR             reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    CONTINUE        reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    BREAK           reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    GOTO            reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    IDENTIFIER      reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    SEMICOLON       reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    PLUS_PLUS       reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    MINUS_MINUS     reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    AMP             reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    STAR            reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    PLUS            reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    MINUS           reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    NOT             reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    LROUND          reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    INT_LIT         reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    FLOAT_LIT       reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    STRING_LIT      reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    BOOL_LIT        reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)
    RCURLY          reduce using rule 52 (iteration_stmt -> FOR expression_stmt expression_stmt expression block .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for LROUND in state 52 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 52 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 52 resolved as shift
WARNING: shift/reduce conflict for AMP in state 66 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for STAR in state 75 resolved as shift
WARNING: shift/reduce conflict for LROUND in state 113 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 113 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 113 resolved as shift
WARNING: shift/reduce conflict for LROUND in state 114 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 114 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 114 resolved as shift
WARNING: shift/reduce conflict for LROUND in state 115 resolved as shift
WARNING: shift/reduce conflict for PLUS_PLUS in state 115 resolved as shift
WARNING: shift/reduce conflict for MINUS_MINUS in state 115 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 148 resolved as shift
WARNING: shift/reduce conflict for LROUND in state 172 resolved as shift
WARNING: shift/reduce conflict for AMP in state 175 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 183 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 183 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 184 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 184 resolved as shift
WARNING: shift/reduce conflict for STAR in state 185 resolved as shift
WARNING: shift/reduce conflict for STAR in state 186 resolved as shift
